{
  "docker": {
    "general": {
      "structure": "├── .dockerignore\n├── Dockerfile\n├── docker-compose.yml\n├── docker-entrypoint.sh\n└── template.yaml\n",
      "files": {
        ".dockerignore": "# {{ project_name }} Docker Ignore File\n# Created by {{ generator }} at {{ timestamp }}\n\n# Version control\n.git\n.gitignore\n.gitattributes\n.gitkeep\n\n# CI/CD\n.github\n.gitlab-ci.yml\n.travis.yml\n.circleci\n.jenkins\n\n# Documentation\nREADME.md\nCHANGELOG.md\nLICENSE\ndocs/\n*.md\n\n# IDE and editors\n.vscode/\n.idea/\n*.swp\n*.swo\n*~\n.DS_Store\nThumbs.db\n\n# Logs\nlogs/\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Runtime data\npids/\n*.pid\n*.seed\n*.pid.lock\n\n# Coverage directory used by tools like istanbul\ncoverage/\n.nyc_output/\n\n# Dependency directories\nnode_modules/\nvendor/\n.bundle/\n\n# Python\n__pycache__/\n*.py[cod]\n*$py.class\n*.so\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n.pytest_cache/\n.coverage\n.cache\n.tox/\n.venv/\nvenv/\nENV/\nenv/\n.env\n\n# PHP\ncomposer.phar\n/vendor/\n.phpunit.result.cache\n\n# Temporary files\ntmp/\ntemp/\n.tmp/\n.temp/\n\n# OS generated files\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\n\n# Database\n*.sqlite\n*.sqlite3\n*.db\n\n# Environment files\n.env.local\n.env.development\n.env.test\n.env.production\n\n# Package files\n*.tar.gz\n*.zip\n*.7z\n*.rar\n\n# Build artifacts\ndist/\nbuild/\nout/\n\n# Test results\ntest-results/\ncoverage/\n\n# Docker files (to avoid recursive copying)\nDockerfile*\ndocker-compose*.yml\n.dockerignore\n\n# Development tools\n.devcontainer/\n.docker/\n\n# Backup files\n*.bak\n*.backup\n*~",
        "Dockerfile": "# {{ project_name }} Docker Configuration\n# Created by {{ generator }} at {{ timestamp }}\n# Multi-stage build for optimized production image\n\n# Build stage\nFROM python:3.11-slim as builder\nLABEL maintainer=\"{{ generator }}\"\nLABEL description=\"Docker image for {{ project_name }}\"\n\n# Set work directory\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update && apt-get install -y \\\n    build-essential \\\n    curl \\\n    git \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Copy requirements first for better caching\nCOPY requirements.txt .\nRUN pip install --no-cache-dir --user -r requirements.txt\n\n# Production stage\nFROM python:3.11-slim as production\n\n# Create non-root user\nRUN groupadd -r appuser && useradd -r -g appuser appuser\n\n# Set work directory\nWORKDIR /app\n\n# Install runtime dependencies\nRUN apt-get update && apt-get install -y \\\n    curl \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && apt-get clean\n\n# Copy Python dependencies from builder stage\nCOPY --from=builder /root/.local /home/appuser/.local\n\n# Copy application code\nCOPY --chown=appuser:appuser . .\n\n# Create necessary directories\nRUN mkdir -p /app/logs /app/data /app/temp \\\n    && chown -R appuser:appuser /app\n\n# Switch to non-root user\nUSER appuser\n\n# Add local Python packages to PATH\nENV PATH=/home/appuser/.local/bin:$PATH\n\n# Expose application port\nEXPOSE 5000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n    CMD curl -f http://localhost:5000/health || exit 1\n\n# Default command\nCMD [\"python\", \"main.py\"]",
        "docker-compose.yml": "version: '3.8'\n\n# {{ project_name }} Docker Compose Configuration\n# Created by {{ generator }} at {{ timestamp }}\n\nservices:\n  # Main application service\n  {{ project_name|lower|replace(' ', '_') }}:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      target: production\n    container_name: {{ project_name|lower|replace(' ', '_') }}_app\n    restart: unless-stopped\n    ports:\n      - \"5000:5000\"\n    environment:\n      - FLASK_ENV=production\n      - PYTHONPATH=/app\n      - APP_PORT=5000\n    volumes:\n      - ./data:/app/data\n      - ./logs:/app/logs\n      - ./config:/app/config\n    depends_on:\n      - redis\n      - postgres\n    networks:\n      - app_network\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:5000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n\n  # PostgreSQL database\n  postgres:\n    image: postgres:15-alpine\n    container_name: {{ project_name|lower|replace(' ', '_') }}_postgres\n    restart: unless-stopped\n    environment:\n      POSTGRES_DB: {{ project_name|lower|replace(' ', '_') }}_db\n      POSTGRES_USER: appuser\n      POSTGRES_PASSWORD: securepassword123\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql\n    ports:\n      - \"5432:5432\"\n    networks:\n      - app_network\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U appuser -d {{ project_name|lower|replace(' ', '_') }}_db\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  # Redis cache\n  redis:\n    image: redis:7-alpine\n    container_name: {{ project_name|lower|replace(' ', '_') }}_redis\n    restart: unless-stopped\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - redis_data:/data\n    networks:\n      - app_network\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"ping\"]\n      interval: 10s\n      timeout: 3s\n      retries: 3\n\n  # Nginx reverse proxy (optional)\n  nginx:\n    image: nginx:alpine\n    container_name: {{ project_name|lower|replace(' ', '_') }}_nginx\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx/nginx.conf:/etc/nginx/nginx.conf\n      - ./nginx/ssl:/etc/nginx/ssl\n    depends_on:\n      - {{ project_name|lower|replace(' ', '_') }}\n    networks:\n      - app_network\n    profiles:\n      - nginx\n\n# Named volumes for data persistence\nvolumes:\n  postgres_data:\n    driver: local\n  redis_data:\n    driver: local\n\n# Network for service communication\nnetworks:\n  app_network:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 172.20.0.0/16",
        "docker-entrypoint.sh": "#!/bin/bash\n# {{ project_name }} Docker Entrypoint Script\n# Created by {{ generator }} at {{ timestamp }}\n\nset -e\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\necho -e \"${BLUE}🚀 Starting {{ project_name }} Container${NC}\"\n\n# Function to log messages\nlog() {\n    echo -e \"${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}\"\n}\n\nwarn() {\n    echo -e \"${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}\"\n}\n\nerror() {\n    echo -e \"${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}\"\n}\n\n# Wait for dependencies\nwait_for_service() {\n    local host=$1\n    local port=$2\n    local service_name=$3\n    \n    log \"Waiting for $service_name to be ready...\"\n    \n    while ! nc -z \"$host\" \"$port\"; do\n        log \"Waiting for $service_name at $host:$port...\"\n        sleep 2\n    done\n    \n    log \"$service_name is ready!\"\n}\n\n# Database migration function\nrun_migrations() {\n    log \"Running database migrations...\"\n    \n    {% if language == 'python' %}\n    if [ -f \"manage.py\" ]; then\n        python manage.py migrate\n    elif [ -f \"alembic.ini\" ]; then\n        alembic upgrade head\n    else\n        log \"No migration tool found, skipping migrations\"\n    fi\n    {% elif language == 'nodejs' %}\n    if [ -f \"package.json\" ] && npm run | grep -q \"migrate\"; then\n        npm run migrate\n    else\n        log \"No migration script found, skipping migrations\"\n    fi\n    {% elif language == 'php' %}\n    if [ -f \"artisan\" ]; then\n        php artisan migrate --force\n    else\n        log \"No Laravel artisan found, skipping migrations\"\n    fi\n    {% endif %}\n}\n\n# Setup function\nsetup() {\n    log \"Setting up {{ project_name }}...\"\n    \n    # Create necessary directories\n    mkdir -p /app/logs\n    mkdir -p /app/data\n    mkdir -p /app/tmp\n    \n    # Set permissions\n    chmod 755 /app/logs\n    chmod 755 /app/data\n    chmod 755 /app/tmp\n    \n    {% if include_database | default(false) %}\n    # Wait for database\n    if [ -n \"$DATABASE_HOST\" ] && [ -n \"$DATABASE_PORT\" ]; then\n        wait_for_service \"$DATABASE_HOST\" \"$DATABASE_PORT\" \"Database\"\n        run_migrations\n    fi\n    {% endif %}\n    \n    {% if include_redis | default(false) %}\n    # Wait for Redis\n    if [ -n \"$REDIS_HOST\" ] && [ -n \"$REDIS_PORT\" ]; then\n        wait_for_service \"$REDIS_HOST\" \"$REDIS_PORT\" \"Redis\"\n    fi\n    {% endif %}\n    \n    log \"Setup completed!\"\n}\n\n# Health check function\nhealth_check() {\n    local port=${PORT:-{{ port | default('8000') }}}\n    \n    if curl -f \"http://localhost:$port/health\" >/dev/null 2>&1; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n# Cleanup function\ncleanup() {\n    log \"Shutting down {{ project_name }}...\"\n    \n    # Kill background processes\n    if [ -n \"$APP_PID\" ]; then\n        kill \"$APP_PID\" 2>/dev/null || true\n    fi\n    \n    log \"Cleanup completed\"\n    exit 0\n}\n\n# Signal handlers\ntrap cleanup SIGTERM SIGINT\n\n# Main execution\nmain() {\n    case \"$1\" in\n        \"setup\")\n            setup\n            ;;\n        \"health\")\n            if health_check; then\n                echo \"healthy\"\n                exit 0\n            else\n                echo \"unhealthy\"\n                exit 1\n            fi\n            ;;\n        \"migrations\")\n            run_migrations\n            ;;\n        *)\n            # Default startup sequence\n            setup\n            \n            log \"Starting {{ project_name }}...\"\n            \n            # Execute the main command\n            if [ $# -eq 0 ]; then\n                # Default command\n                {% if language == 'python' %}\n                exec python main.py\n                {% elif language == 'nodejs' %}\n                exec npm start\n                {% elif language == 'php' %}\n                exec php -S 0.0.0.0:{{ port | default('8000') }}\n                {% else %}\n                exec \"$@\"\n                {% endif %}\n            else\n                exec \"$@\"\n            fi\n            ;;\n    esac\n}\n\n# Run main function\nmain \"$@\"",
        "template.yaml": "name: \"docker-general\"\nversion: \"1.0.0\"\ndescription: \"قالب شامل لمشاريع Docker الاحترافية\"\nlanguage: \"docker\"\nframework: \"general\"\n\nstructure:\n  directories:\n    - \"app\"\n    - \"config\"\n    - \"scripts\"\n    - \"docs\"\n    - \"tests\"\n\n  files:\n    - path: \"Dockerfile\"\n      template: \"docker/general/Dockerfile\"\n      type: \"template\"\n    \n    - path: \"docker-compose.yml\"\n      template: \"docker/general/docker-compose.yml\"\n      type: \"template\"\n    \n    - path: \".dockerignore\"\n      template: \"docker/general/dockerignore\"\n      type: \"template\"\n    \n    - path: \"README.md\"\n      template: \"docker/general/README.md\"\n      type: \"template\"\n\ncomponents:\n  service:\n    template: \"docker/general/components/service.yml\"\n    path: \"docker-compose.{{component_name|lower}}.yml\""
      }
    },
    "web": {
      "structure": "",
      "files": {}
    }
  },
  "html": {
    "general": {
      "structure": "├── css/\n│   └── style.css\n├── index.html\n├── js/\n│   └── script.js\n└── template.yaml\n",
      "files": {
        "index.html": "<!DOCTYPE html>\n<html lang=\"ar\" dir=\"rtl\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"موقع {{ project_name }} - تم إنشاؤه بواسطة Project Template Generator\">\n    <meta name=\"keywords\" content=\"HTML, CSS, JavaScript, موقع ويب\">\n    <meta name=\"author\" content=\"{{ project_name }}\">\n    \n    <title>{{ project_name }} - الصفحة الرئيسية</title>\n    \n    <!-- CSS -->\n    <link rel=\"stylesheet\" href=\"css/style.css\">\n    \n    <!-- Favicon -->\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"assets/favicon.ico\">\n</head>\n<body>\n    <!-- Header -->\n    <header class=\"header\">\n        <nav class=\"navbar\">\n            <div class=\"container\">\n                <div class=\"nav-brand\">\n                    <h1>{{ project_name }}</h1>\n                </div>\n                <ul class=\"nav-menu\">\n                    <li><a href=\"#home\" class=\"nav-link active\">الرئيسية</a></li>\n                    <li><a href=\"#about\" class=\"nav-link\">حول</a></li>\n                    <li><a href=\"#services\" class=\"nav-link\">الخدمات</a></li>\n                    <li><a href=\"#contact\" class=\"nav-link\">اتصل بنا</a></li>\n                </ul>\n                <div class=\"hamburger\">\n                    <span></span>\n                    <span></span>\n                    <span></span>\n                </div>\n            </div>\n        </nav>\n    </header>\n\n    <!-- Main Content -->\n    <main>\n        <!-- Hero Section -->\n        <section id=\"home\" class=\"hero\">\n            <div class=\"container\">\n                <div class=\"hero-content\">\n                    <h1>مرحباً بك في {{ project_name }}</h1>\n                    <p>موقع ويب متطور تم إنشاؤه باستخدام HTML, CSS, و JavaScript</p>\n                    <div class=\"hero-buttons\">\n                        <a href=\"#about\" class=\"btn btn-primary\">اكتشف المزيد</a>\n                        <a href=\"#contact\" class=\"btn btn-secondary\">تواصل معنا</a>\n                    </div>\n                </div>\n            </div>\n        </section>\n\n        <!-- About Section -->\n        <section id=\"about\" class=\"section\">\n            <div class=\"container\">\n                <h2 class=\"section-title\">حول {{ project_name }}</h2>\n                <div class=\"about-content\">\n                    <div class=\"about-text\">\n                        <p>نحن فريق متخصص في تطوير مواقع الويب الحديثة والمتطورة. نقدم حلول تقنية مبتكرة تساعد عملائنا على تحقيق أهدافهم الرقمية.</p>\n                        <p>تم بناء هذا الموقع باستخدام أحدث التقنيات والمعايير العالمية لضمان الأداء الأمثل وتجربة مستخدم مميزة.</p>\n                    </div>\n                    <div class=\"about-features\">\n                        <div class=\"feature-card\">\n                            <h3>تصميم متجاوب</h3>\n                            <p>يعمل بشكل مثالي على جميع الأجهزة والشاشات</p>\n                        </div>\n                        <div class=\"feature-card\">\n                            <h3>أداء سريع</h3>\n                            <p>محسن للسرعة والأداء الفائق</p>\n                        </div>\n                        <div class=\"feature-card\">\n                            <h3>سهولة الاستخدام</h3>\n                            <p>واجهة بسيطة وسهلة التنقل</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n\n        <!-- Services Section -->\n        <section id=\"services\" class=\"section bg-light\">\n            <div class=\"container\">\n                <h2 class=\"section-title\">خدماتنا</h2>\n                <div class=\"services-grid\">\n                    <div class=\"service-item\">\n                        <div class=\"service-icon\">🌐</div>\n                        <h3>تطوير المواقع</h3>\n                        <p>تطوير مواقع ويب حديثة ومتجاوبة باستخدام أحدث التقنيات</p>\n                    </div>\n                    <div class=\"service-item\">\n                        <div class=\"service-icon\">📱</div>\n                        <h3>تطبيقات الجوال</h3>\n                        <p>تطوير تطبيقات جوال أصلية ومتقدمة لجميع المنصات</p>\n                    </div>\n                    <div class=\"service-item\">\n                        <div class=\"service-icon\">🎨</div>\n                        <h3>التصميم</h3>\n                        <p>تصميم واجهات مستخدم جذابة وتجربة مستخدم مميزة</p>\n                    </div>\n                    <div class=\"service-item\">\n                        <div class=\"service-icon\">⚡</div>\n                        <h3>الاستشارات</h3>\n                        <p>استشارات تقنية متخصصة لتطوير استراتيجيتك الرقمية</p>\n                    </div>\n                </div>\n            </div>\n        </section>\n\n        <!-- Contact Section -->\n        <section id=\"contact\" class=\"section\">\n            <div class=\"container\">\n                <h2 class=\"section-title\">تواصل معنا</h2>\n                <div class=\"contact-content\">\n                    <div class=\"contact-info\">\n                        <h3>معلومات التواصل</h3>\n                        <div class=\"contact-item\">\n                            <strong>البريد الإلكتروني:</strong>\n                            <span>info@{{ project_name|lower|replace(' ', '') }}.com</span>\n                        </div>\n                        <div class=\"contact-item\">\n                            <strong>الهاتف:</strong>\n                            <span>+966 12 345 6789</span>\n                        </div>\n                        <div class=\"contact-item\">\n                            <strong>العنوان:</strong>\n                            <span>الرياض، المملكة العربية السعودية</span>\n                        </div>\n                    </div>\n                    <form class=\"contact-form\">\n                        <div class=\"form-group\">\n                            <input type=\"text\" id=\"name\" name=\"name\" placeholder=\"الاسم\" required>\n                        </div>\n                        <div class=\"form-group\">\n                            <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"البريد الإلكتروني\" required>\n                        </div>\n                        <div class=\"form-group\">\n                            <textarea id=\"message\" name=\"message\" placeholder=\"الرسالة\" rows=\"5\" required></textarea>\n                        </div>\n                        <button type=\"submit\" class=\"btn btn-primary\">إرسال الرسالة</button>\n                    </form>\n                </div>\n            </div>\n        </section>\n    </main>\n\n    <!-- Footer -->\n    <footer class=\"footer\">\n        <div class=\"container\">\n            <div class=\"footer-content\">\n                <div class=\"footer-section\">\n                    <h3>{{ project_name }}</h3>\n                    <p>موقع ويب احترافي تم إنشاؤه باستخدام Project Template Generator.</p>\n                </div>\n                <div class=\"footer-section\">\n                    <h4>روابط سريعة</h4>\n                    <ul>\n                        <li><a href=\"#home\">الرئيسية</a></li>\n                        <li><a href=\"#about\">حول</a></li>\n                        <li><a href=\"#services\">الخدمات</a></li>\n                        <li><a href=\"#contact\">اتصل بنا</a></li>\n                    </ul>\n                </div>\n                <div class=\"footer-section\">\n                    <h4>تابعنا</h4>\n                    <div class=\"social-links\">\n                        <a href=\"#\" aria-label=\"Twitter\">🐦</a>\n                        <a href=\"#\" aria-label=\"Facebook\">📘</a>\n                        <a href=\"#\" aria-label=\"LinkedIn\">💼</a>\n                        <a href=\"#\" aria-label=\"Instagram\">📷</a>\n                    </div>\n                </div>\n            </div>\n            <div class=\"footer-bottom\">\n                <p>&copy; 2025 {{ project_name }}. جميع الحقوق محفوظة.</p>\n                <p>تم إنشاؤه بواسطة Project Template Generator</p>\n            </div>\n        </div>\n    </footer>\n\n    <!-- JavaScript -->\n    <script src=\"js/script.js\"></script>\n</body>\n</html>",
        "template.yaml": "name: \"html-general\"\nversion: \"1.0.0\"\ndescription: \"قالب HTML عام بسيط ونظيف\"\nlanguage: \"html\"\nframework: \"general\"\n\nstructure:\n  directories:\n    - \"css\"\n    - \"js\"\n    - \"images\"\n    - \"assets\"\n\n  files:\n    - path: \"index.html\"\n      template: \"html/general/index.html\"\n      type: \"template\"\n    \n    - path: \"css/style.css\"\n      template: \"html/general/css/style.css\"\n      type: \"template\"\n      \n    - path: \"js/script.js\"\n      template: \"html/general/js/script.js\"\n      type: \"template\"\n    \n    - path: \"README.md\"\n      template: \"html/general/README.md\"\n      type: \"template\"\n\ncomponents:\n  page:\n    template: \"html/general/components/page.html\"\n    path: \"{{component_name|lower}}.html\"",
        "css/style.css": "/* العام */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n:root {\n    --primary-color: #2563eb;\n    --secondary-color: #64748b;\n    --accent-color: #f59e0b;\n    --background-color: #ffffff;\n    --text-color: #1e293b;\n    --light-gray: #f8fafc;\n    --border-color: #e2e8f0;\n    --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n    --transition: all 0.3s ease;\n}\n\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    line-height: 1.6;\n    color: var(--text-color);\n    background-color: var(--background-color);\n    direction: rtl;\n}\n\n.container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 0 20px;\n}\n\n/* Typography */\nh1, h2, h3, h4, h5, h6 {\n    margin-bottom: 1rem;\n    font-weight: 600;\n}\n\nh1 { font-size: 2.5rem; }\nh2 { font-size: 2rem; }\nh3 { font-size: 1.5rem; }\n\np {\n    margin-bottom: 1rem;\n    color: var(--secondary-color);\n}\n\n/* Buttons */\n.btn {\n    display: inline-block;\n    padding: 12px 24px;\n    border-radius: 8px;\n    text-decoration: none;\n    font-weight: 500;\n    text-align: center;\n    transition: var(--transition);\n    border: 2px solid transparent;\n    cursor: pointer;\n}\n\n.btn-primary {\n    background-color: var(--primary-color);\n    color: white;\n}\n\n.btn-primary:hover {\n    background-color: #1d4ed8;\n    transform: translateY(-2px);\n}\n\n.btn-secondary {\n    background-color: transparent;\n    color: var(--primary-color);\n    border-color: var(--primary-color);\n}\n\n.btn-secondary:hover {\n    background-color: var(--primary-color);\n    color: white;\n}\n\n/* Header & Navigation */\n.header {\n    background-color: white;\n    box-shadow: var(--shadow);\n    position: fixed;\n    top: 0;\n    width: 100%;\n    z-index: 1000;\n}\n\n.navbar {\n    padding: 1rem 0;\n}\n\n.navbar .container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.nav-brand h1 {\n    color: var(--primary-color);\n    margin: 0;\n}\n\n.nav-menu {\n    display: flex;\n    list-style: none;\n    gap: 2rem;\n}\n\n.nav-link {\n    text-decoration: none;\n    color: var(--text-color);\n    font-weight: 500;\n    transition: var(--transition);\n}\n\n.nav-link:hover,\n.nav-link.active {\n    color: var(--primary-color);\n}\n\n.hamburger {\n    display: none;\n    flex-direction: column;\n    cursor: pointer;\n}\n\n.hamburger span {\n    width: 25px;\n    height: 3px;\n    background-color: var(--text-color);\n    margin: 3px 0;\n    transition: var(--transition);\n}\n\n/* Main Content */\nmain {\n    margin-top: 80px;\n}\n\n.section {\n    padding: 4rem 0;\n}\n\n.bg-light {\n    background-color: var(--light-gray);\n}\n\n.section-title {\n    text-align: center;\n    margin-bottom: 3rem;\n    color: var(--text-color);\n}\n\n/* Hero Section */\n.hero {\n    background: linear-gradient(135deg, var(--primary-color) 0%, #1d4ed8 100%);\n    color: white;\n    padding: 6rem 0;\n    text-align: center;\n}\n\n.hero-content h1 {\n    font-size: 3rem;\n    margin-bottom: 1rem;\n}\n\n.hero-content p {\n    font-size: 1.2rem;\n    margin-bottom: 2rem;\n    color: rgba(255, 255, 255, 0.9);\n}\n\n.hero-buttons {\n    display: flex;\n    gap: 1rem;\n    justify-content: center;\n    flex-wrap: wrap;\n}\n\n/* About Section */\n.about-content {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 3rem;\n    align-items: center;\n}\n\n.about-text {\n    font-size: 1.1rem;\n}\n\n.about-features {\n    display: flex;\n    flex-direction: column;\n    gap: 1.5rem;\n}\n\n.feature-card {\n    background: white;\n    padding: 2rem;\n    border-radius: 12px;\n    box-shadow: var(--shadow);\n    transition: var(--transition);\n}\n\n.feature-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);\n}\n\n.feature-card h3 {\n    color: var(--primary-color);\n    margin-bottom: 0.5rem;\n}\n\n/* Services Section */\n.services-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 2rem;\n}\n\n.service-item {\n    background: white;\n    padding: 2rem;\n    border-radius: 12px;\n    text-align: center;\n    box-shadow: var(--shadow);\n    transition: var(--transition);\n}\n\n.service-item:hover {\n    transform: translateY(-5px);\n}\n\n.service-icon {\n    font-size: 3rem;\n    margin-bottom: 1rem;\n}\n\n.service-item h3 {\n    color: var(--primary-color);\n    margin-bottom: 1rem;\n}\n\n/* Contact Section */\n.contact-content {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 3rem;\n}\n\n.contact-info h3 {\n    margin-bottom: 1.5rem;\n    color: var(--primary-color);\n}\n\n.contact-item {\n    margin-bottom: 1rem;\n    padding: 0.5rem 0;\n}\n\n.contact-item strong {\n    display: block;\n    margin-bottom: 0.25rem;\n    color: var(--text-color);\n}\n\n.contact-form {\n    background: var(--light-gray);\n    padding: 2rem;\n    border-radius: 12px;\n}\n\n.form-group {\n    margin-bottom: 1.5rem;\n}\n\n.form-group input,\n.form-group textarea {\n    width: 100%;\n    padding: 12px;\n    border: 2px solid var(--border-color);\n    border-radius: 8px;\n    font-size: 1rem;\n    transition: var(--transition);\n}\n\n.form-group input:focus,\n.form-group textarea:focus {\n    outline: none;\n    border-color: var(--primary-color);\n}\n\n/* Footer */\n.footer {\n    background-color: var(--text-color);\n    color: white;\n    padding: 3rem 0 1rem;\n}\n\n.footer-content {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 2rem;\n    margin-bottom: 2rem;\n}\n\n.footer-section h3,\n.footer-section h4 {\n    margin-bottom: 1rem;\n    color: white;\n}\n\n.footer-section ul {\n    list-style: none;\n}\n\n.footer-section ul li {\n    margin-bottom: 0.5rem;\n}\n\n.footer-section a {\n    color: rgba(255, 255, 255, 0.8);\n    text-decoration: none;\n    transition: var(--transition);\n}\n\n.footer-section a:hover {\n    color: white;\n}\n\n.social-links {\n    display: flex;\n    gap: 1rem;\n}\n\n.social-links a {\n    display: inline-block;\n    font-size: 1.5rem;\n    transition: var(--transition);\n}\n\n.social-links a:hover {\n    transform: scale(1.2);\n}\n\n.footer-bottom {\n    border-top: 1px solid rgba(255, 255, 255, 0.1);\n    padding-top: 1rem;\n    text-align: center;\n    color: rgba(255, 255, 255, 0.7);\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .hamburger {\n        display: flex;\n    }\n    \n    .nav-menu {\n        display: none;\n        position: fixed;\n        top: 80px;\n        right: 0;\n        width: 100%;\n        background: white;\n        flex-direction: column;\n        padding: 2rem;\n        box-shadow: var(--shadow);\n    }\n    \n    .nav-menu.active {\n        display: flex;\n    }\n    \n    .hero-content h1 {\n        font-size: 2rem;\n    }\n    \n    .hero-buttons {\n        flex-direction: column;\n        align-items: center;\n    }\n    \n    .about-content {\n        grid-template-columns: 1fr;\n    }\n    \n    .contact-content {\n        grid-template-columns: 1fr;\n    }\n    \n    .services-grid {\n        grid-template-columns: 1fr;\n    }\n}\n\n@media (max-width: 480px) {\n    .container {\n        padding: 0 15px;\n    }\n    \n    .hero {\n        padding: 4rem 0;\n    }\n    \n    .section {\n        padding: 3rem 0;\n    }\n    \n    h1 { font-size: 1.8rem; }\n    h2 { font-size: 1.5rem; }\n    h3 { font-size: 1.3rem; }\n}",
        "js/script.js": "// Mobile Navigation Toggle\ndocument.addEventListener('DOMContentLoaded', function() {\n    const hamburger = document.querySelector('.hamburger');\n    const navMenu = document.querySelector('.nav-menu');\n    const navLinks = document.querySelectorAll('.nav-link');\n\n    // Toggle mobile menu\n    hamburger.addEventListener('click', function() {\n        navMenu.classList.toggle('active');\n        hamburger.classList.toggle('active');\n    });\n\n    // Close mobile menu when clicking on a link\n    navLinks.forEach(link => {\n        link.addEventListener('click', function() {\n            navMenu.classList.remove('active');\n            hamburger.classList.remove('active');\n        });\n    });\n\n    // Smooth scrolling for navigation links\n    navLinks.forEach(link => {\n        link.addEventListener('click', function(e) {\n            e.preventDefault();\n            const targetId = this.getAttribute('href');\n            const targetSection = document.querySelector(targetId);\n            \n            if (targetSection) {\n                const offsetTop = targetSection.offsetTop - 80; // Account for fixed header\n                window.scrollTo({\n                    top: offsetTop,\n                    behavior: 'smooth'\n                });\n            }\n        });\n    });\n\n    // Update active navigation link on scroll\n    window.addEventListener('scroll', function() {\n        let current = '';\n        const sections = document.querySelectorAll('section');\n        \n        sections.forEach(section => {\n            const sectionTop = section.offsetTop - 100;\n            const sectionHeight = section.clientHeight;\n            \n            if (window.pageYOffset >= sectionTop && \n                window.pageYOffset < sectionTop + sectionHeight) {\n                current = section.getAttribute('id');\n            }\n        });\n\n        navLinks.forEach(link => {\n            link.classList.remove('active');\n            if (link.getAttribute('href') === `#${current}`) {\n                link.classList.add('active');\n            }\n        });\n    });\n\n    // Contact form handling\n    const contactForm = document.querySelector('.contact-form');\n    if (contactForm) {\n        contactForm.addEventListener('submit', function(e) {\n            e.preventDefault();\n            \n            const formData = new FormData(this);\n            const name = formData.get('name');\n            const email = formData.get('email');\n            const message = formData.get('message');\n            \n            // Basic validation\n            if (!name || !email || !message) {\n                showNotification('يرجى ملء جميع الحقول المطلوبة', 'error');\n                return;\n            }\n            \n            if (!isValidEmail(email)) {\n                showNotification('يرجى إدخال بريد إلكتروني صحيح', 'error');\n                return;\n            }\n            \n            // Simulate form submission\n            showNotification('جارٍ إرسال الرسالة...', 'info');\n            \n            setTimeout(() => {\n                showNotification('تم إرسال رسالتك بنجاح! سنتواصل معك قريباً.', 'success');\n                contactForm.reset();\n            }, 2000);\n        });\n    }\n\n    // Add scroll animations\n    const observerOptions = {\n        threshold: 0.1,\n        rootMargin: '0px 0px -50px 0px'\n    };\n\n    const observer = new IntersectionObserver(function(entries) {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                entry.target.style.opacity = '1';\n                entry.target.style.transform = 'translateY(0)';\n            }\n        });\n    }, observerOptions);\n\n    // Observe elements for animation\n    const animateElements = document.querySelectorAll('.feature-card, .service-item, .section-title');\n    animateElements.forEach(el => {\n        el.style.opacity = '0';\n        el.style.transform = 'translateY(30px)';\n        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';\n        observer.observe(el);\n    });\n});\n\n// Utility Functions\nfunction isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n}\n\nfunction showNotification(message, type = 'info') {\n    // Remove existing notifications\n    const existingNotification = document.querySelector('.notification');\n    if (existingNotification) {\n        existingNotification.remove();\n    }\n\n    // Create notification element\n    const notification = document.createElement('div');\n    notification.className = `notification notification-${type}`;\n    notification.innerHTML = `\n        <span>${message}</span>\n        <button class=\"notification-close\" onclick=\"this.parentElement.remove()\">×</button>\n    `;\n\n    // Add styles\n    Object.assign(notification.style, {\n        position: 'fixed',\n        top: '20px',\n        right: '20px',\n        padding: '15px 20px',\n        borderRadius: '8px',\n        color: 'white',\n        fontSize: '14px',\n        fontWeight: '500',\n        zIndex: '10000',\n        maxWidth: '400px',\n        boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',\n        transform: 'translateX(100%)',\n        transition: 'transform 0.3s ease'\n    });\n\n    // Set background color based on type\n    const colors = {\n        success: '#10b981',\n        error: '#ef4444',\n        info: '#3b82f6',\n        warning: '#f59e0b'\n    };\n    notification.style.backgroundColor = colors[type] || colors.info;\n\n    // Add to page\n    document.body.appendChild(notification);\n\n    // Animate in\n    setTimeout(() => {\n        notification.style.transform = 'translateX(0)';\n    }, 100);\n\n    // Auto remove after 5 seconds\n    setTimeout(() => {\n        notification.style.transform = 'translateX(100%)';\n        setTimeout(() => {\n            notification.remove();\n        }, 300);\n    }, 5000);\n}\n\n// Back to top button\nfunction createBackToTopButton() {\n    const backToTop = document.createElement('button');\n    backToTop.innerHTML = '↑';\n    backToTop.className = 'back-to-top';\n    \n    Object.assign(backToTop.style, {\n        position: 'fixed',\n        bottom: '20px',\n        left: '20px',\n        width: '50px',\n        height: '50px',\n        borderRadius: '50%',\n        backgroundColor: 'var(--primary-color)',\n        color: 'white',\n        border: 'none',\n        fontSize: '20px',\n        cursor: 'pointer',\n        opacity: '0',\n        visibility: 'hidden',\n        transition: 'all 0.3s ease',\n        zIndex: '1000'\n    });\n\n    backToTop.addEventListener('click', function() {\n        window.scrollTo({\n            top: 0,\n            behavior: 'smooth'\n        });\n    });\n\n    document.body.appendChild(backToTop);\n\n    // Show/hide based on scroll position\n    window.addEventListener('scroll', function() {\n        if (window.pageYOffset > 300) {\n            backToTop.style.opacity = '1';\n            backToTop.style.visibility = 'visible';\n        } else {\n            backToTop.style.opacity = '0';\n            backToTop.style.visibility = 'hidden';\n        }\n    });\n}\n\n// Initialize back to top button\ncreateBackToTopButton();\n\n// Console welcome message\nconsole.log(`\n🚀 مرحباً بك في موقع {{ project_name }}!\n📝 تم إنشاء هذا الموقع باستخدام Project Template Generator\n💻 للمزيد من المعلومات، تفضل بزيارة موقعنا\n`);\n\n// Performance monitoring\nwindow.addEventListener('load', function() {\n    const loadTime = performance.now();\n    console.log(`⚡ تم تحميل الصفحة في ${Math.round(loadTime)} مللي ثانية`);\n});"
      }
    },
    "responsive": {
      "structure": "├── README.md\n├── css/\n│   └── style.css\n├── index.html\n├── js/\n│   └── script.js\n└── template.yaml\n",
      "files": {
        "README.md": "# {{ project_name }} - موقع متجاوب\n\nموقع ويب متجاوب ومتطور تم إنشاؤه باستخدام Bootstrap 5 و Project Template Generator.\n\n## الميزات\n\n- ✅ **تصميم متجاوب بالكامل** - يعمل على جميع الأجهزة\n- ✅ **Bootstrap 5** - أحدث إصدار من Bootstrap\n- ✅ **تحسين الأداء** - سرعة تحميل فائقة\n- ✅ **إمكانية الوصول** - متوافق مع معايير a11y\n- ✅ **SEO محسن** - محسن لمحركات البحث\n- ✅ **تأثيرات متحركة** - AOS animations\n- ✅ **Dark/Light Mode** - وضع داكن وفاتح\n- ✅ **PWA Ready** - جاهز للتطبيقات التقدمية\n\n## البدء السريع\n\n### 1. تحميل الملفات\n```bash\n# تحميل المشروع\ngit clone [repository-url]\ncd {{ project_name|lower|replace(' ', '-') }}\n```\n\n### 2. تشغيل الخادم المحلي\n```bash\n# Python\npython -m http.server 8000\n\n# Node.js\nnpx serve .\n\n# PHP\nphp -S localhost:8000\n```\n\n### 3. فتح المتصفح\nانتقل إلى `http://localhost:8000`\n\n## هيكل المشروع\n\n```\n├── index.html              # الصفحة الرئيسية\n├── css/\n│   └── style.css          # الأنماط المخصصة\n├── js/\n│   └── script.js          # JavaScript مخصص\n├── assets/\n│   ├── images/            # الصور\n│   └── icons/             # الأيقونات\n├── pages/                 # صفحات إضافية\n├── components/            # مكونات قابلة لإعادة الاستخدام\n└── docs/                  # التوثيق\n```\n\n## التخصيص\n\n### الألوان\n```css\n:root {\n    --primary-color: #0d6efd;\n    --secondary-color: #6c757d;\n    --success-color: #198754;\n    /* يمكنك تغيير هذه القيم */\n}\n```\n\n### الخطوط\n```css\nbody {\n    font-family: 'Cairo', 'Segoe UI', sans-serif;\n    /* يمكنك إضافة خطوط مخصصة */\n}\n```\n\n### إضافة صفحة جديدة\n```bash\nptg add page PageName\n```\n\n## المكونات\n\n### Navigation Bar\n```html\n<nav class=\"navbar navbar-expand-lg navbar-dark bg-primary fixed-top\">\n    <!-- محتوى التنقل -->\n</nav>\n```\n\n### Hero Section\n```html\n<section class=\"hero-section bg-primary text-white\">\n    <!-- محتوى البطل -->\n</section>\n```\n\n### Feature Cards\n```html\n<div class=\"feature-card h-100 p-4 text-center\">\n    <!-- محتوى الميزة -->\n</div>\n```\n\n## Bootstrap Components\n\n### Buttons\n```html\n<button class=\"btn btn-primary\">زر أساسي</button>\n<button class=\"btn btn-outline-secondary\">زر ثانوي</button>\n```\n\n### Cards\n```html\n<div class=\"card\">\n    <div class=\"card-body\">\n        <h5 class=\"card-title\">عنوان البطاقة</h5>\n        <p class=\"card-text\">نص البطاقة</p>\n    </div>\n</div>\n```\n\n### Forms\n```html\n<div class=\"form-floating\">\n    <input type=\"text\" class=\"form-control\" id=\"name\" placeholder=\"الاسم\">\n    <label for=\"name\">الاسم</label>\n</div>\n```\n\n## JavaScript Features\n\n### Smooth Scrolling\n```javascript\n// التمرير السلس للروابط الداخلية\ndocument.querySelectorAll('a[href^=\"#\"]').forEach(link => {\n    link.addEventListener('click', smoothScroll);\n});\n```\n\n### Form Validation\n```javascript\n// التحقق من صحة النماذج\nfunction validateForm(formData) {\n    // منطق التحقق\n}\n```\n\n### Notifications\n```javascript\n// عرض الإشعارات\nshowNotification('رسالة النجاح', 'success');\n```\n\n## تحسين الأداء\n\n### تحسين الصور\n- استخدم تنسيقات حديثة (WebP, AVIF)\n- ضغط الصور قبل الرفع\n- استخدم lazy loading\n\n### تحسين CSS\n```css\n/* استخدم CSS Grid و Flexbox */\n.container {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n}\n```\n\n### تحسين JavaScript\n```javascript\n// استخدم debouncing للأحداث المتكررة\nfunction debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n```\n\n## إمكانية الوصول (Accessibility)\n\n### ARIA Labels\n```html\n<button aria-label=\"إغلاق القائمة\" aria-expanded=\"false\">\n    <i class=\"bi bi-x\"></i>\n</button>\n```\n\n### Semantic HTML\n```html\n<main>\n    <section aria-labelledby=\"features-heading\">\n        <h2 id=\"features-heading\">الميزات</h2>\n    </section>\n</main>\n```\n\n### Focus Management\n```css\n.btn:focus {\n    outline: 2px solid var(--primary-color);\n    outline-offset: 2px;\n}\n```\n\n## تحسين محركات البحث (SEO)\n\n### Meta Tags\n```html\n<meta name=\"description\" content=\"وصف الموقع\">\n<meta name=\"keywords\" content=\"كلمات مفتاحية\">\n<meta property=\"og:title\" content=\"عنوان الموقع\">\n<meta property=\"og:description\" content=\"وصف الموقع\">\n```\n\n### Structured Data\n```html\n<script type=\"application/ld+json\">\n{\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"WebSite\",\n    \"name\": \"{{ project_name }}\",\n    \"url\": \"https://example.com\"\n}\n</script>\n```\n\n## Progressive Web App (PWA)\n\n### Service Worker\n```javascript\n// في sw.js\nself.addEventListener('install', event => {\n    event.waitUntil(\n        caches.open('v1').then(cache => {\n            return cache.addAll([\n                '/',\n                '/css/style.css',\n                '/js/script.js'\n            ]);\n        })\n    );\n});\n```\n\n### Web App Manifest\n```json\n{\n    \"name\": \"{{ project_name }}\",\n    \"short_name\": \"{{ project_name }}\",\n    \"start_url\": \"/\",\n    \"display\": \"standalone\",\n    \"theme_color\": \"#0d6efd\",\n    \"background_color\": \"#ffffff\"\n}\n```\n\n## الاختبار\n\n### اختبار التجاوب\n```bash\n# Chrome DevTools\n# فتح أدوات المطور > Toggle device toolbar\n# اختبار أحجام شاشات مختلفة\n```\n\n### اختبار الأداء\n```bash\n# Lighthouse\n# فتح أدوات المطور > Lighthouse > Generate report\n```\n\n### اختبار إمكانية الوصول\n```bash\n# Wave Web Accessibility Evaluation Tool\n# axe DevTools\n```\n\n## النشر\n\n### GitHub Pages\n```bash\n# في إعدادات المستودع\n# Pages > Source > Deploy from a branch > main\n```\n\n### Netlify\n```bash\n# سحب وإفلات المجلد أو ربط Git repository\n```\n\n### Vercel\n```bash\nnpx vercel --prod\n```\n\n## التطوير\n\n### Hot Reload\n```bash\n# Live Server (VS Code Extension)\n# أو browser-sync\nnpx browser-sync start --server --files \"**/*\"\n```\n\n### CSS Processing\n```bash\n# Sass\nnpm install -g sass\nsass --watch css/style.scss:css/style.css\n```\n\n### JavaScript Bundling\n```bash\n# Webpack أو Vite للمشاريع الكبيرة\nnpm install -g vite\nvite build\n```\n\n## المساهمة\n\n1. Fork المشروع\n2. إنشاء branch للميزة الجديدة\n3. Commit التغييرات\n4. Push إلى branch\n5. إنشاء Pull Request\n\n## الدعم\n\n### الإبلاغ عن مشاكل\n- أنشئ issue في GitHub\n- اذكر معلومات المتصفح ونظام التشغيل\n- أرفق لقطات شاشة إذا أمكن\n\n### المجتمع\n- Discord Server: [رابط]\n- Telegram Group: [رابط]\n\n## الترخيص\n\nMIT License\n\n---\n\n**تم إنشاء هذا المشروع باستخدام Project Template Generator**",
        "index.html": "<!DOCTYPE html>\n<html lang=\"ar\" dir=\"rtl\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"موقع {{ project_name }} المتجاوب - تم إنشاؤه بواسطة Project Template Generator\">\n    <meta name=\"keywords\" content=\"HTML, CSS, JavaScript, Bootstrap, responsive, موقع متجاوب\">\n    <meta name=\"author\" content=\"{{ project_name }}\">\n    \n    <title>{{ project_name }} - موقع متجاوب</title>\n    \n    <!-- Bootstrap CSS -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.rtl.min.css\" rel=\"stylesheet\">\n    <!-- Bootstrap Icons -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css\" rel=\"stylesheet\">\n    <!-- Custom CSS -->\n    <link rel=\"stylesheet\" href=\"css/style.css\">\n    \n    <!-- Favicon -->\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"assets/favicon.ico\">\n</head>\n<body>\n    <!-- Navigation -->\n    <nav class=\"navbar navbar-expand-lg navbar-dark bg-primary fixed-top\">\n        <div class=\"container\">\n            <a class=\"navbar-brand fw-bold\" href=\"#home\">\n                <i class=\"bi bi-code-square me-2\"></i>\n                {{ project_name }}\n            </a>\n            \n            <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\">\n                <span class=\"navbar-toggler-icon\"></span>\n            </button>\n            \n            <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n                <ul class=\"navbar-nav ms-auto\">\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link active\" href=\"#home\">الرئيسية</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"#features\">الميزات</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"#about\">حول</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"#services\">الخدمات</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"#portfolio\">الأعمال</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"#contact\">اتصل بنا</a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    <!-- Hero Section -->\n    <section id=\"home\" class=\"hero-section bg-primary text-white\">\n        <div class=\"container\">\n            <div class=\"row align-items-center min-vh-100 pt-5\">\n                <div class=\"col-lg-6\">\n                    <div class=\"hero-content\" data-aos=\"fade-up\">\n                        <h1 class=\"display-4 fw-bold mb-4\">مرحباً بك في {{ project_name }}</h1>\n                        <p class=\"lead mb-4\">موقع ويب متجاوب ومتطور تم بناؤه باستخدام Bootstrap 5 وأحدث تقنيات الويب</p>\n                        <div class=\"d-flex gap-3 flex-wrap\">\n                            <a href=\"#features\" class=\"btn btn-light btn-lg\">\n                                <i class=\"bi bi-arrow-down me-2\"></i>\n                                اكتشف الميزات\n                            </a>\n                            <a href=\"#contact\" class=\"btn btn-outline-light btn-lg\">\n                                <i class=\"bi bi-envelope me-2\"></i>\n                                تواصل معنا\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-lg-6\">\n                    <div class=\"hero-image text-center\" data-aos=\"fade-up\" data-aos-delay=\"200\">\n                        <div class=\"hero-placeholder\">\n                            <i class=\"bi bi-laptop display-1\"></i>\n                            <p class=\"mt-3\">صورة توضيحية للموقع</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </section>\n\n    <!-- Features Section -->\n    <section id=\"features\" class=\"py-5\">\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-12 text-center mb-5\">\n                    <h2 class=\"display-5 fw-bold\" data-aos=\"fade-up\">الميزات الرئيسية</h2>\n                    <p class=\"lead text-muted\" data-aos=\"fade-up\" data-aos-delay=\"100\">اكتشف ما يجعل موقعنا مميزاً</p>\n                </div>\n            </div>\n            <div class=\"row g-4\">\n                <div class=\"col-md-6 col-lg-4\" data-aos=\"fade-up\" data-aos-delay=\"100\">\n                    <div class=\"feature-card h-100 p-4 text-center\">\n                        <div class=\"feature-icon mb-3\">\n                            <i class=\"bi bi-phone text-primary display-4\"></i>\n                        </div>\n                        <h4>متجاوب بالكامل</h4>\n                        <p class=\"text-muted\">يعمل بشكل مثالي على جميع الأجهزة من الهواتف إلى أجهزة الكمبيوتر</p>\n                    </div>\n                </div>\n                <div class=\"col-md-6 col-lg-4\" data-aos=\"fade-up\" data-aos-delay=\"200\">\n                    <div class=\"feature-card h-100 p-4 text-center\">\n                        <div class=\"feature-icon mb-3\">\n                            <i class=\"bi bi-lightning text-primary display-4\"></i>\n                        </div>\n                        <h4>سرعة فائقة</h4>\n                        <p class=\"text-muted\">محسن للأداء والسرعة مع تحميل سريع للصفحات</p>\n                    </div>\n                </div>\n                <div class=\"col-md-6 col-lg-4\" data-aos=\"fade-up\" data-aos-delay=\"300\">\n                    <div class=\"feature-card h-100 p-4 text-center\">\n                        <div class=\"feature-icon mb-3\">\n                            <i class=\"bi bi-shield-check text-primary display-4\"></i>\n                        </div>\n                        <h4>أمان متقدم</h4>\n                        <p class=\"text-muted\">بنية آمنة مع أفضل ممارسات الأمان السيبراني</p>\n                    </div>\n                </div>\n                <div class=\"col-md-6 col-lg-4\" data-aos=\"fade-up\" data-aos-delay=\"400\">\n                    <div class=\"feature-card h-100 p-4 text-center\">\n                        <div class=\"feature-icon mb-3\">\n                            <i class=\"bi bi-palette text-primary display-4\"></i>\n                        </div>\n                        <h4>تصميم حديث</h4>\n                        <p class=\"text-muted\">واجهة مستخدم عصرية وجذابة مع تجربة مستخدم مميزة</p>\n                    </div>\n                </div>\n                <div class=\"col-md-6 col-lg-4\" data-aos=\"fade-up\" data-aos-delay=\"500\">\n                    <div class=\"feature-card h-100 p-4 text-center\">\n                        <div class=\"feature-icon mb-3\">\n                            <i class=\"bi bi-gear text-primary display-4\"></i>\n                        </div>\n                        <h4>سهولة التخصيص</h4>\n                        <p class=\"text-muted\">قابل للتخصيص بسهولة حسب احتياجاتك ومتطلباتك</p>\n                    </div>\n                </div>\n                <div class=\"col-md-6 col-lg-4\" data-aos=\"fade-up\" data-aos-delay=\"600\">\n                    <div class=\"feature-card h-100 p-4 text-center\">\n                        <div class=\"feature-icon mb-3\">\n                            <i class=\"bi bi-headset text-primary display-4\"></i>\n                        </div>\n                        <h4>دعم متواصل</h4>\n                        <p class=\"text-muted\">فريق دعم متاح للمساعدة وحل أي مشاكل قد تواجهها</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </section>\n\n    <!-- About Section -->\n    <section id=\"about\" class=\"py-5 bg-light\">\n        <div class=\"container\">\n            <div class=\"row align-items-center\">\n                <div class=\"col-lg-6\" data-aos=\"fade-right\">\n                    <h2 class=\"display-5 fw-bold mb-4\">حول {{ project_name }}</h2>\n                    <p class=\"lead\">نحن فريق متخصص في تطوير مواقع الويب الحديثة والمتطورة باستخدام أحدث التقنيات.</p>\n                    <p>منذ تأسيسنا، نهدف إلى تقديم حلول تقنية مبتكرة تساعد عملائنا على تحقيق أهدافهم الرقمية. نؤمن بأن التكنولوجيا يجب أن تكون في خدمة الإنسان وتسهل حياته.</p>\n                    <div class=\"row mt-4\">\n                        <div class=\"col-6\">\n                            <div class=\"stat-item text-center\">\n                                <h3 class=\"display-6 text-primary fw-bold\">100+</h3>\n                                <p class=\"text-muted\">مشروع مكتمل</p>\n                            </div>\n                        </div>\n                        <div class=\"col-6\">\n                            <div class=\"stat-item text-center\">\n                                <h3 class=\"display-6 text-primary fw-bold\">50+</h3>\n                                <p class=\"text-muted\">عميل راضي</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-lg-6\" data-aos=\"fade-left\">\n                    <div class=\"about-image text-center\">\n                        <div class=\"about-placeholder\">\n                            <i class=\"bi bi-people display-1 text-primary\"></i>\n                            <p class=\"mt-3 text-muted\">صورة الفريق</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </section>\n\n    <!-- Services Section -->\n    <section id=\"services\" class=\"py-5\">\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-12 text-center mb-5\">\n                    <h2 class=\"display-5 fw-bold\" data-aos=\"fade-up\">خدماتنا</h2>\n                    <p class=\"lead text-muted\" data-aos=\"fade-up\" data-aos-delay=\"100\">نقدم مجموعة شاملة من الخدمات التقنية</p>\n                </div>\n            </div>\n            <div class=\"row g-4\">\n                <div class=\"col-md-6 col-lg-3\" data-aos=\"fade-up\" data-aos-delay=\"100\">\n                    <div class=\"service-card h-100\">\n                        <div class=\"service-icon\">\n                            <i class=\"bi bi-globe\"></i>\n                        </div>\n                        <h4>تطوير المواقع</h4>\n                        <p>تطوير مواقع ويب حديثة ومتجاوبة باستخدام أحدث التقنيات والأدوات</p>\n                        <a href=\"#\" class=\"btn btn-outline-primary\">اقرأ المزيد</a>\n                    </div>\n                </div>\n                <div class=\"col-md-6 col-lg-3\" data-aos=\"fade-up\" data-aos-delay=\"200\">\n                    <div class=\"service-card h-100\">\n                        <div class=\"service-icon\">\n                            <i class=\"bi bi-phone\"></i>\n                        </div>\n                        <h4>تطبيقات الجوال</h4>\n                        <p>تطوير تطبيقات جوال أصلية ومتقدمة لنظامي iOS و Android</p>\n                        <a href=\"#\" class=\"btn btn-outline-primary\">اقرأ المزيد</a>\n                    </div>\n                </div>\n                <div class=\"col-md-6 col-lg-3\" data-aos=\"fade-up\" data-aos-delay=\"300\">\n                    <div class=\"service-card h-100\">\n                        <div class=\"service-icon\">\n                            <i class=\"bi bi-brush\"></i>\n                        </div>\n                        <h4>التصميم</h4>\n                        <p>تصميم واجهات مستخدم جذابة وتجربة مستخدم استثنائية</p>\n                        <a href=\"#\" class=\"btn btn-outline-primary\">اقرأ المزيد</a>\n                    </div>\n                </div>\n                <div class=\"col-md-6 col-lg-3\" data-aos=\"fade-up\" data-aos-delay=\"400\">\n                    <div class=\"service-card h-100\">\n                        <div class=\"service-icon\">\n                            <i class=\"bi bi-graph-up\"></i>\n                        </div>\n                        <h4>التسويق الرقمي</h4>\n                        <p>استراتيجيات تسويق رقمي فعالة لنمو أعمالك على الإنترنت</p>\n                        <a href=\"#\" class=\"btn btn-outline-primary\">اقرأ المزيد</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </section>\n\n    <!-- Portfolio Section -->\n    <section id=\"portfolio\" class=\"py-5 bg-light\">\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-12 text-center mb-5\">\n                    <h2 class=\"display-5 fw-bold\" data-aos=\"fade-up\">أعمالنا</h2>\n                    <p class=\"lead text-muted\" data-aos=\"fade-up\" data-aos-delay=\"100\">نماذج من أعمالنا المميزة</p>\n                </div>\n            </div>\n            <div class=\"row g-4\">\n                <div class=\"col-md-6 col-lg-4\" data-aos=\"fade-up\" data-aos-delay=\"100\">\n                    <div class=\"portfolio-item\">\n                        <div class=\"portfolio-image\">\n                            <div class=\"portfolio-placeholder\">\n                                <i class=\"bi bi-image\"></i>\n                                <p>مشروع 1</p>\n                            </div>\n                        </div>\n                        <div class=\"portfolio-content\">\n                            <h5>موقع تجارة إلكترونية</h5>\n                            <p class=\"text-muted\">متجر إلكتروني متكامل مع نظام دفع آمن</p>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-6 col-lg-4\" data-aos=\"fade-up\" data-aos-delay=\"200\">\n                    <div class=\"portfolio-item\">\n                        <div class=\"portfolio-image\">\n                            <div class=\"portfolio-placeholder\">\n                                <i class=\"bi bi-image\"></i>\n                                <p>مشروع 2</p>\n                            </div>\n                        </div>\n                        <div class=\"portfolio-content\">\n                            <h5>تطبيق جوال</h5>\n                            <p class=\"text-muted\">تطبيق توصيل طعام مع واجهة مستخدم حديثة</p>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-6 col-lg-4\" data-aos=\"fade-up\" data-aos-delay=\"300\">\n                    <div class=\"portfolio-item\">\n                        <div class=\"portfolio-image\">\n                            <div class=\"portfolio-placeholder\">\n                                <i class=\"bi bi-image\"></i>\n                                <p>مشروع 3</p>\n                            </div>\n                        </div>\n                        <div class=\"portfolio-content\">\n                            <h5>نظام إدارة</h5>\n                            <p class=\"text-muted\">نظام إدارة شامل للشركات والمؤسسات</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </section>\n\n    <!-- Contact Section -->\n    <section id=\"contact\" class=\"py-5\">\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-12 text-center mb-5\">\n                    <h2 class=\"display-5 fw-bold\" data-aos=\"fade-up\">تواصل معنا</h2>\n                    <p class=\"lead text-muted\" data-aos=\"fade-up\" data-aos-delay=\"100\">نحن هنا للإجابة على استفساراتك</p>\n                </div>\n            </div>\n            <div class=\"row justify-content-center\">\n                <div class=\"col-lg-8\">\n                    <div class=\"row g-4\">\n                        <div class=\"col-md-4 text-center\" data-aos=\"fade-up\" data-aos-delay=\"100\">\n                            <div class=\"contact-info-item\">\n                                <i class=\"bi bi-geo-alt text-primary display-4 mb-3\"></i>\n                                <h5>العنوان</h5>\n                                <p class=\"text-muted\">الرياض، المملكة العربية السعودية</p>\n                            </div>\n                        </div>\n                        <div class=\"col-md-4 text-center\" data-aos=\"fade-up\" data-aos-delay=\"200\">\n                            <div class=\"contact-info-item\">\n                                <i class=\"bi bi-telephone text-primary display-4 mb-3\"></i>\n                                <h5>الهاتف</h5>\n                                <p class=\"text-muted\">+966 12 345 6789</p>\n                            </div>\n                        </div>\n                        <div class=\"col-md-4 text-center\" data-aos=\"fade-up\" data-aos-delay=\"300\">\n                            <div class=\"contact-info-item\">\n                                <i class=\"bi bi-envelope text-primary display-4 mb-3\"></i>\n                                <h5>البريد الإلكتروني</h5>\n                                <p class=\"text-muted\">info@{{ project_name|lower|replace(' ', '') }}.com</p>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <div class=\"mt-5\" data-aos=\"fade-up\" data-aos-delay=\"400\">\n                        <form class=\"contact-form\">\n                            <div class=\"row g-3\">\n                                <div class=\"col-md-6\">\n                                    <div class=\"form-floating\">\n                                        <input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" placeholder=\"الاسم\" required>\n                                        <label for=\"name\">الاسم</label>\n                                    </div>\n                                </div>\n                                <div class=\"col-md-6\">\n                                    <div class=\"form-floating\">\n                                        <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"البريد الإلكتروني\" required>\n                                        <label for=\"email\">البريد الإلكتروني</label>\n                                    </div>\n                                </div>\n                                <div class=\"col-12\">\n                                    <div class=\"form-floating\">\n                                        <input type=\"text\" class=\"form-control\" id=\"subject\" name=\"subject\" placeholder=\"الموضوع\" required>\n                                        <label for=\"subject\">الموضوع</label>\n                                    </div>\n                                </div>\n                                <div class=\"col-12\">\n                                    <div class=\"form-floating\">\n                                        <textarea class=\"form-control\" id=\"message\" name=\"message\" placeholder=\"الرسالة\" style=\"height: 120px\" required></textarea>\n                                        <label for=\"message\">الرسالة</label>\n                                    </div>\n                                </div>\n                                <div class=\"col-12 text-center\">\n                                    <button type=\"submit\" class=\"btn btn-primary btn-lg\">\n                                        <i class=\"bi bi-send me-2\"></i>\n                                        إرسال الرسالة\n                                    </button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </section>\n\n    <!-- Footer -->\n    <footer class=\"bg-dark text-white py-5\">\n        <div class=\"container\">\n            <div class=\"row g-4\">\n                <div class=\"col-lg-4\">\n                    <h5 class=\"mb-3\">{{ project_name }}</h5>\n                    <p class=\"text-muted\">موقع ويب متجاوب ومتطور تم إنشاؤه باستخدام Project Template Generator مع Bootstrap 5.</p>\n                    <div class=\"social-links\">\n                        <a href=\"#\" class=\"text-white me-3\"><i class=\"bi bi-facebook\"></i></a>\n                        <a href=\"#\" class=\"text-white me-3\"><i class=\"bi bi-twitter\"></i></a>\n                        <a href=\"#\" class=\"text-white me-3\"><i class=\"bi bi-instagram\"></i></a>\n                        <a href=\"#\" class=\"text-white me-3\"><i class=\"bi bi-linkedin\"></i></a>\n                    </div>\n                </div>\n                <div class=\"col-lg-2 col-md-6\">\n                    <h6 class=\"mb-3\">روابط سريعة</h6>\n                    <ul class=\"list-unstyled\">\n                        <li><a href=\"#home\" class=\"text-muted text-decoration-none\">الرئيسية</a></li>\n                        <li><a href=\"#about\" class=\"text-muted text-decoration-none\">حول</a></li>\n                        <li><a href=\"#services\" class=\"text-muted text-decoration-none\">الخدمات</a></li>\n                        <li><a href=\"#contact\" class=\"text-muted text-decoration-none\">اتصل بنا</a></li>\n                    </ul>\n                </div>\n                <div class=\"col-lg-2 col-md-6\">\n                    <h6 class=\"mb-3\">الخدمات</h6>\n                    <ul class=\"list-unstyled\">\n                        <li><a href=\"#\" class=\"text-muted text-decoration-none\">تطوير المواقع</a></li>\n                        <li><a href=\"#\" class=\"text-muted text-decoration-none\">تطبيقات الجوال</a></li>\n                        <li><a href=\"#\" class=\"text-muted text-decoration-none\">التصميم</a></li>\n                        <li><a href=\"#\" class=\"text-muted text-decoration-none\">التسويق الرقمي</a></li>\n                    </ul>\n                </div>\n                <div class=\"col-lg-4\">\n                    <h6 class=\"mb-3\">ابق على تواصل</h6>\n                    <p class=\"text-muted mb-3\">اشترك في نشرتنا البريدية للحصول على آخر الأخبار والتحديثات</p>\n                    <div class=\"input-group\">\n                        <input type=\"email\" class=\"form-control\" placeholder=\"البريد الإلكتروني\">\n                        <button class=\"btn btn-primary\" type=\"button\">اشتراك</button>\n                    </div>\n                </div>\n            </div>\n            <hr class=\"my-4\">\n            <div class=\"row align-items-center\">\n                <div class=\"col-md-6\">\n                    <p class=\"text-muted mb-0\">&copy; 2025 {{ project_name }}. جميع الحقوق محفوظة.</p>\n                </div>\n                <div class=\"col-md-6 text-md-end\">\n                    <p class=\"text-muted mb-0\">تم إنشاؤه بواسطة Project Template Generator</p>\n                </div>\n            </div>\n        </div>\n    </footer>\n\n    <!-- Back to Top Button -->\n    <button class=\"btn btn-primary btn-floating\" id=\"backToTop\">\n        <i class=\"bi bi-arrow-up\"></i>\n    </button>\n\n    <!-- Bootstrap JS -->\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n    <!-- AOS Animation -->\n    <script src=\"https://unpkg.com/aos@2.3.1/dist/aos.js\"></script>\n    <!-- Custom JS -->\n    <script src=\"js/script.js\"></script>\n</body>\n</html>",
        "template.yaml": "name: \"html-responsive\"\nversion: \"1.0.0\"\ndescription: \"قالب شامل لمواقع HTML متجاوبة واحترافية\"\nlanguage: \"html\"\nframework: \"responsive\"\n\nstructure:\n  directories:\n    - \"css\"\n    - \"js\"\n    - \"images\"\n    - \"fonts\"\n    - \"assets\"\n    - \"assets/icons\"\n    - \"pages\"\n    - \"components\"\n    - \"docs\"\n\n  files:\n    - path: \"index.html\"\n      template: \"html/responsive/index.html\"\n      type: \"template\"\n    \n    - path: \"css/style.css\"\n      template: \"html/responsive/css/style.css\"\n      type: \"template\"\n    \n    - path: \"js/script.js\"\n      template: \"html/responsive/js/script.js\"\n      type: \"template\"\n    \n    - path: \"README.md\"\n      template: \"html/responsive/README.md\"\n      type: \"template\"\n\ncomponents:\n  page:\n    template: \"html/responsive/components/page.html\"\n    path: \"pages/{{component_name|lower}}.html\"",
        "css/style.css": "/* Import AOS Animation CSS */\n@import url('https://unpkg.com/aos@2.3.1/dist/aos.css');\n\n/* Custom Variables */\n:root {\n    --primary-color: #0d6efd;\n    --secondary-color: #6c757d;\n    --success-color: #198754;\n    --info-color: #0dcaf0;\n    --warning-color: #ffc107;\n    --danger-color: #dc3545;\n    --light-color: #f8f9fa;\n    --dark-color: #212529;\n    --font-family: 'Cairo', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    --border-radius: 0.5rem;\n    --box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\n    --transition: all 0.3s ease-in-out;\n}\n\n/* Global Styles */\nbody {\n    font-family: var(--font-family);\n    line-height: 1.6;\n    scroll-behavior: smooth;\n}\n\n/* Smooth scroll padding for fixed navbar */\nhtml {\n    scroll-padding-top: 76px;\n}\n\n/* Navigation Enhancements */\n.navbar {\n    backdrop-filter: blur(10px);\n    background-color: rgba(13, 110, 253, 0.95) !important;\n    transition: var(--transition);\n}\n\n.navbar.scrolled {\n    background-color: rgba(13, 110, 253, 1) !important;\n    box-shadow: var(--box-shadow);\n}\n\n.navbar-brand {\n    font-size: 1.5rem;\n}\n\n.nav-link {\n    font-weight: 500;\n    position: relative;\n    transition: var(--transition);\n}\n\n.nav-link::after {\n    content: '';\n    position: absolute;\n    width: 0;\n    height: 2px;\n    bottom: 0;\n    left: 50%;\n    background-color: white;\n    transition: var(--transition);\n    transform: translateX(-50%);\n}\n\n.nav-link:hover::after,\n.nav-link.active::after {\n    width: 100%;\n}\n\n/* Hero Section */\n.hero-section {\n    background: linear-gradient(135deg, var(--primary-color) 0%, #0b5ed7 50%, #0a58ca 100%);\n    position: relative;\n    overflow: hidden;\n}\n\n.hero-section::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1000 1000\"><defs><radialGradient id=\"a\" cx=\"50%\" cy=\"50%\"><stop offset=\"0%\" stop-color=\"%23fff\" stop-opacity=\"0.1\"/><stop offset=\"100%\" stop-color=\"%23fff\" stop-opacity=\"0\"/></radialGradient></defs><circle cx=\"200\" cy=\"200\" r=\"100\" fill=\"url(%23a)\"/><circle cx=\"800\" cy=\"300\" r=\"150\" fill=\"url(%23a)\"/><circle cx=\"400\" cy=\"700\" r=\"120\" fill=\"url(%23a)\"/></svg>') no-repeat;\n    background-size: cover;\n    opacity: 0.1;\n}\n\n.hero-content {\n    position: relative;\n    z-index: 2;\n}\n\n.hero-placeholder,\n.about-placeholder,\n.portfolio-placeholder {\n    background: rgba(255, 255, 255, 0.1);\n    border: 2px dashed rgba(255, 255, 255, 0.3);\n    border-radius: var(--border-radius);\n    padding: 3rem;\n    color: rgba(255, 255, 255, 0.7);\n}\n\n.about-placeholder,\n.portfolio-placeholder {\n    background: rgba(0, 0, 0, 0.05);\n    border-color: rgba(0, 0, 0, 0.1);\n    color: var(--secondary-color);\n}\n\n/* Feature Cards */\n.feature-card {\n    background: white;\n    border-radius: var(--border-radius);\n    box-shadow: var(--box-shadow);\n    transition: var(--transition);\n    border: 1px solid rgba(0, 0, 0, 0.1);\n}\n\n.feature-card:hover {\n    transform: translateY(-10px);\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);\n}\n\n.feature-icon i {\n    transition: var(--transition);\n}\n\n.feature-card:hover .feature-icon i {\n    transform: scale(1.1);\n}\n\n/* Service Cards */\n.service-card {\n    background: white;\n    padding: 2rem;\n    border-radius: var(--border-radius);\n    box-shadow: var(--box-shadow);\n    transition: var(--transition);\n    border: 1px solid rgba(0, 0, 0, 0.1);\n    text-align: center;\n}\n\n.service-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);\n}\n\n.service-icon {\n    width: 80px;\n    height: 80px;\n    background: linear-gradient(135deg, var(--primary-color), #0b5ed7);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0 auto 1.5rem;\n    transition: var(--transition);\n}\n\n.service-icon i {\n    font-size: 2rem;\n    color: white;\n}\n\n.service-card:hover .service-icon {\n    transform: scale(1.1);\n}\n\n/* Portfolio Section */\n.portfolio-item {\n    background: white;\n    border-radius: var(--border-radius);\n    overflow: hidden;\n    box-shadow: var(--box-shadow);\n    transition: var(--transition);\n}\n\n.portfolio-item:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);\n}\n\n.portfolio-image {\n    height: 200px;\n    overflow: hidden;\n    position: relative;\n}\n\n.portfolio-placeholder {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: 2rem;\n}\n\n.portfolio-content {\n    padding: 1.5rem;\n}\n\n/* Contact Section */\n.contact-info-item {\n    padding: 1.5rem;\n    transition: var(--transition);\n}\n\n.contact-info-item:hover {\n    transform: translateY(-5px);\n}\n\n.contact-info-item i {\n    transition: var(--transition);\n}\n\n.contact-info-item:hover i {\n    transform: scale(1.1);\n}\n\n/* Contact Form */\n.contact-form {\n    background: white;\n    padding: 2rem;\n    border-radius: var(--border-radius);\n    box-shadow: var(--box-shadow);\n}\n\n.form-floating > .form-control {\n    border-radius: var(--border-radius);\n    border: 2px solid rgba(0, 0, 0, 0.1);\n    transition: var(--transition);\n}\n\n.form-floating > .form-control:focus {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);\n}\n\n/* Back to Top Button */\n.btn-floating {\n    position: fixed;\n    bottom: 2rem;\n    left: 2rem;\n    width: 3.5rem;\n    height: 3.5rem;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 1000;\n    opacity: 0;\n    visibility: hidden;\n    transition: var(--transition);\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);\n}\n\n.btn-floating.show {\n    opacity: 1;\n    visibility: visible;\n}\n\n.btn-floating:hover {\n    transform: translateY(-3px);\n}\n\n/* Statistics */\n.stat-item h3 {\n    background: linear-gradient(135deg, var(--primary-color), #0b5ed7);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n    margin-bottom: 0.5rem;\n}\n\n/* Social Links */\n.social-links a {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    width: 2.5rem;\n    height: 2.5rem;\n    border-radius: 50%;\n    background: rgba(255, 255, 255, 0.1);\n    transition: var(--transition);\n    text-decoration: none;\n}\n\n.social-links a:hover {\n    background: var(--primary-color);\n    transform: translateY(-3px);\n    color: white !important;\n}\n\n/* Custom Animations */\n@keyframes fadeInUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n@keyframes pulse {\n    0% {\n        transform: scale(1);\n    }\n    50% {\n        transform: scale(1.05);\n    }\n    100% {\n        transform: scale(1);\n    }\n}\n\n.animate-pulse {\n    animation: pulse 2s infinite;\n}\n\n/* Responsive Enhancements */\n@media (max-width: 768px) {\n    .hero-section {\n        padding: 4rem 0;\n    }\n    \n    .hero-content h1 {\n        font-size: 2rem;\n    }\n    \n    .display-4 {\n        font-size: 2.5rem;\n    }\n    \n    .display-5 {\n        font-size: 2rem;\n    }\n    \n    .btn-floating {\n        bottom: 1rem;\n        left: 1rem;\n        width: 3rem;\n        height: 3rem;\n    }\n    \n    .service-card,\n    .feature-card {\n        margin-bottom: 1rem;\n    }\n}\n\n@media (max-width: 576px) {\n    .hero-content h1 {\n        font-size: 1.8rem;\n    }\n    \n    .hero-content .lead {\n        font-size: 1rem;\n    }\n    \n    .contact-form {\n        padding: 1.5rem;\n    }\n    \n    .service-icon {\n        width: 60px;\n        height: 60px;\n    }\n    \n    .service-icon i {\n        font-size: 1.5rem;\n    }\n}\n\n/* Print Styles */\n@media print {\n    .navbar,\n    .btn-floating,\n    .hero-section,\n    #contact {\n        display: none !important;\n    }\n    \n    body {\n        font-size: 12pt;\n        line-height: 1.4;\n    }\n    \n    h1, h2, h3, h4, h5, h6 {\n        page-break-after: avoid;\n    }\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n    .feature-card,\n    .service-card,\n    .portfolio-item {\n        border: 2px solid var(--dark-color);\n    }\n}\n\n/* Reduced motion support */\n@media (prefers-reduced-motion: reduce) {\n    *,\n    *::before,\n    *::after {\n        animation-duration: 0.01ms !important;\n        animation-iteration-count: 1 !important;\n        transition-duration: 0.01ms !important;\n    }\n}",
        "js/script.js": "// DOM Content Loaded\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Initialize AOS (Animate On Scroll)\n    if (typeof AOS !== 'undefined') {\n        AOS.init({\n            duration: 800,\n            easing: 'ease-in-out',\n            once: true,\n            offset: 100\n        });\n    }\n\n    // Initialize all components\n    initNavbar();\n    initSmoothScrolling();\n    initBackToTop();\n    initContactForm();\n    initAnimations();\n    initPerformanceMonitoring();\n\n    console.log('🚀 {{ project_name }} - موقع متجاوب تم تحميله بنجاح!');\n});\n\n// Navbar Functions\nfunction initNavbar() {\n    const navbar = document.querySelector('.navbar');\n    const navLinks = document.querySelectorAll('.nav-link');\n\n    // Navbar scroll effect\n    window.addEventListener('scroll', function() {\n        if (window.scrollY > 50) {\n            navbar.classList.add('scrolled');\n        } else {\n            navbar.classList.remove('scrolled');\n        }\n    });\n\n    // Update active nav link on scroll\n    window.addEventListener('scroll', function() {\n        updateActiveNavLink();\n    });\n\n    // Close mobile menu when clicking on a link\n    navLinks.forEach(link => {\n        link.addEventListener('click', function() {\n            const navbarCollapse = document.querySelector('.navbar-collapse');\n            if (navbarCollapse.classList.contains('show')) {\n                const bsCollapse = new bootstrap.Collapse(navbarCollapse);\n                bsCollapse.hide();\n            }\n        });\n    });\n}\n\nfunction updateActiveNavLink() {\n    const sections = document.querySelectorAll('section[id]');\n    const navLinks = document.querySelectorAll('.nav-link');\n    \n    let current = '';\n    \n    sections.forEach(section => {\n        const sectionTop = section.offsetTop - 100;\n        const sectionHeight = section.clientHeight;\n        \n        if (window.pageYOffset >= sectionTop && \n            window.pageYOffset < sectionTop + sectionHeight) {\n            current = section.getAttribute('id');\n        }\n    });\n\n    navLinks.forEach(link => {\n        link.classList.remove('active');\n        if (link.getAttribute('href') === `#${current}`) {\n            link.classList.add('active');\n        }\n    });\n}\n\n// Smooth Scrolling\nfunction initSmoothScrolling() {\n    const links = document.querySelectorAll('a[href^=\"#\"]');\n    \n    links.forEach(link => {\n        link.addEventListener('click', function(e) {\n            e.preventDefault();\n            \n            const targetId = this.getAttribute('href');\n            const targetSection = document.querySelector(targetId);\n            \n            if (targetSection) {\n                const offsetTop = targetSection.offsetTop - 76; // Account for fixed navbar\n                \n                window.scrollTo({\n                    top: offsetTop,\n                    behavior: 'smooth'\n                });\n            }\n        });\n    });\n}\n\n// Back to Top Button\nfunction initBackToTop() {\n    const backToTopBtn = document.getElementById('backToTop');\n    \n    if (backToTopBtn) {\n        // Show/hide button based on scroll position\n        window.addEventListener('scroll', function() {\n            if (window.pageYOffset > 300) {\n                backToTopBtn.classList.add('show');\n            } else {\n                backToTopBtn.classList.remove('show');\n            }\n        });\n\n        // Scroll to top when clicked\n        backToTopBtn.addEventListener('click', function() {\n            window.scrollTo({\n                top: 0,\n                behavior: 'smooth'\n            });\n        });\n    }\n}\n\n// Contact Form\nfunction initContactForm() {\n    const contactForm = document.querySelector('.contact-form');\n    \n    if (contactForm) {\n        contactForm.addEventListener('submit', function(e) {\n            e.preventDefault();\n            \n            const formData = new FormData(this);\n            const data = Object.fromEntries(formData);\n            \n            // Validate form\n            if (!validateContactForm(data)) {\n                return;\n            }\n            \n            // Simulate form submission\n            submitContactForm(data);\n        });\n    }\n}\n\nfunction validateContactForm(data) {\n    const errors = [];\n    \n    if (!data.name || data.name.trim().length < 2) {\n        errors.push('يرجى إدخال اسم صحيح (أكثر من حرفين)');\n    }\n    \n    if (!data.email || !isValidEmail(data.email)) {\n        errors.push('يرجى إدخال بريد إلكتروني صحيح');\n    }\n    \n    if (!data.subject || data.subject.trim().length < 3) {\n        errors.push('يرجى إدخال موضوع الرسالة (أكثر من 3 أحرف)');\n    }\n    \n    if (!data.message || data.message.trim().length < 10) {\n        errors.push('يرجى إدخال رسالة (أكثر من 10 أحرف)');\n    }\n    \n    if (errors.length > 0) {\n        showNotification(errors.join('<br>'), 'danger');\n        return false;\n    }\n    \n    return true;\n}\n\nfunction submitContactForm(data) {\n    // Show loading state\n    const submitBtn = document.querySelector('.contact-form button[type=\"submit\"]');\n    const originalText = submitBtn.innerHTML;\n    \n    submitBtn.innerHTML = '<i class=\"bi bi-hourglass-split me-2\"></i>جارٍ الإرسال...';\n    submitBtn.disabled = true;\n    \n    // Simulate API call\n    setTimeout(() => {\n        // Reset button\n        submitBtn.innerHTML = originalText;\n        submitBtn.disabled = false;\n        \n        // Show success message\n        showNotification('تم إرسال رسالتك بنجاح! سنتواصل معك قريباً.', 'success');\n        \n        // Reset form\n        document.querySelector('.contact-form').reset();\n        \n        // Log submission (in real app, send to server)\n        console.log('Contact form submitted:', data);\n        \n    }, 2000);\n}\n\n// Animations\nfunction initAnimations() {\n    // Add entrance animations to elements\n    const animateElements = document.querySelectorAll('.feature-card, .service-card, .portfolio-item');\n    \n    // Intersection Observer for scroll animations\n    const observerOptions = {\n        threshold: 0.1,\n        rootMargin: '0px 0px -50px 0px'\n    };\n\n    const observer = new IntersectionObserver(function(entries) {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                entry.target.style.opacity = '1';\n                entry.target.style.transform = 'translateY(0)';\n                \n                // Add pulse animation to service icons\n                const serviceIcon = entry.target.querySelector('.service-icon');\n                if (serviceIcon) {\n                    serviceIcon.classList.add('animate-pulse');\n                }\n            }\n        });\n    }, observerOptions);\n\n    // Observe elements if AOS is not available\n    if (typeof AOS === 'undefined') {\n        animateElements.forEach(el => {\n            el.style.opacity = '0';\n            el.style.transform = 'translateY(30px)';\n            el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';\n            observer.observe(el);\n        });\n    }\n}\n\n// Performance Monitoring\nfunction initPerformanceMonitoring() {\n    // Monitor page load performance\n    window.addEventListener('load', function() {\n        const loadTime = performance.now();\n        console.log(`⚡ تم تحميل الصفحة في ${Math.round(loadTime)} مللي ثانية`);\n        \n        // Monitor navigation timing\n        if (performance.getEntriesByType) {\n            const navigationEntries = performance.getEntriesByType('navigation')[0];\n            if (navigationEntries) {\n                const metrics = {\n                    'DNS Lookup': navigationEntries.domainLookupEnd - navigationEntries.domainLookupStart,\n                    'TCP Connection': navigationEntries.connectEnd - navigationEntries.connectStart,\n                    'First Byte': navigationEntries.responseStart - navigationEntries.requestStart,\n                    'DOM Interactive': navigationEntries.domInteractive - navigationEntries.navigationStart,\n                    'Page Complete': navigationEntries.loadEventEnd - navigationEntries.navigationStart\n                };\n                \n                console.table(metrics);\n            }\n        }\n    });\n}\n\n// Utility Functions\nfunction isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n}\n\nfunction showNotification(message, type = 'info') {\n    // Remove existing notifications\n    const existingNotifications = document.querySelectorAll('.custom-notification');\n    existingNotifications.forEach(notification => notification.remove());\n\n    // Create notification element\n    const notification = document.createElement('div');\n    notification.className = `custom-notification alert alert-${type} alert-dismissible fade show`;\n    notification.style.cssText = `\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        z-index: 10000;\n        max-width: 400px;\n        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);\n        border: none;\n        border-radius: 0.5rem;\n    `;\n    \n    notification.innerHTML = `\n        <div class=\"d-flex align-items-center\">\n            <i class=\"bi bi-${getBootstrapIcon(type)} me-2\"></i>\n            <div>${message}</div>\n            <button type=\"button\" class=\"btn-close ms-auto\" data-bs-dismiss=\"alert\"></button>\n        </div>\n    `;\n\n    document.body.appendChild(notification);\n\n    // Auto remove after 5 seconds\n    setTimeout(() => {\n        if (notification.parentNode) {\n            const alert = new bootstrap.Alert(notification);\n            alert.close();\n        }\n    }, 5000);\n}\n\nfunction getBootstrapIcon(type) {\n    const icons = {\n        'success': 'check-circle',\n        'danger': 'exclamation-triangle',\n        'warning': 'exclamation-triangle',\n        'info': 'info-circle',\n        'primary': 'info-circle'\n    };\n    return icons[type] || 'info-circle';\n}\n\n// Theme Management\nfunction initThemeToggle() {\n    const themeToggle = document.getElementById('themeToggle');\n    \n    if (themeToggle) {\n        themeToggle.addEventListener('click', function() {\n            const currentTheme = document.documentElement.getAttribute('data-bs-theme');\n            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n            \n            document.documentElement.setAttribute('data-bs-theme', newTheme);\n            localStorage.setItem('theme', newTheme);\n            \n            // Update icon\n            const icon = themeToggle.querySelector('i');\n            icon.className = newTheme === 'dark' ? 'bi bi-sun' : 'bi bi-moon';\n        });\n        \n        // Load saved theme\n        const savedTheme = localStorage.getItem('theme') || 'light';\n        document.documentElement.setAttribute('data-bs-theme', savedTheme);\n    }\n}\n\n// Newsletter Subscription\nfunction initNewsletterForm() {\n    const newsletterForm = document.querySelector('.newsletter-form');\n    \n    if (newsletterForm) {\n        const emailInput = newsletterForm.querySelector('input[type=\"email\"]');\n        const submitBtn = newsletterForm.querySelector('button');\n        \n        submitBtn.addEventListener('click', function(e) {\n            e.preventDefault();\n            \n            const email = emailInput.value.trim();\n            \n            if (!email || !isValidEmail(email)) {\n                showNotification('يرجى إدخال بريد إلكتروني صحيح', 'danger');\n                return;\n            }\n            \n            // Simulate subscription\n            const originalText = submitBtn.textContent;\n            submitBtn.textContent = 'جارٍ الاشتراك...';\n            submitBtn.disabled = true;\n            \n            setTimeout(() => {\n                submitBtn.textContent = originalText;\n                submitBtn.disabled = false;\n                emailInput.value = '';\n                showNotification('تم الاشتراك في النشرة البريدية بنجاح!', 'success');\n            }, 1500);\n        });\n    }\n}\n\n// Initialize additional features when page is ready\ndocument.addEventListener('DOMContentLoaded', function() {\n    initThemeToggle();\n    initNewsletterForm();\n});\n\n// Handle window resize\nlet resizeTimer;\nwindow.addEventListener('resize', function() {\n    clearTimeout(resizeTimer);\n    resizeTimer = setTimeout(function() {\n        // Reinitialize AOS on resize if needed\n        if (typeof AOS !== 'undefined') {\n            AOS.refresh();\n        }\n    }, 250);\n});\n\n// Service Worker Registration (for PWA capabilities)\nif ('serviceWorker' in navigator) {\n    window.addEventListener('load', function() {\n        navigator.serviceWorker.register('/sw.js')\n            .then(function(registration) {\n                console.log('ServiceWorker registered successfully');\n            })\n            .catch(function(error) {\n                console.log('ServiceWorker registration failed');\n            });\n    });\n}\n\n// Console welcome message\nconsole.log(`\n%c🚀 مرحباً بك في {{ project_name }}!\n%c📱 موقع متجاوب ومتطور\n%c💻 تم إنشاؤه باستخدام Bootstrap 5 و Project Template Generator\n%c🎨 للمزيد من المعلومات، تفضل بزيارة موقعنا\n`, \n'color: #0d6efd; font-size: 16px; font-weight: bold;',\n'color: #198754; font-size: 14px;',\n'color: #6c757d; font-size: 12px;',\n'color: #ffc107; font-size: 12px;'\n);"
      }
    }
  },
  "javascript": {
    "express": {
      "structure": "├── .env.example\n├── .eslintrc.js\n├── .gitignore\n├── README.md\n├── app.js\n├── controllers/\n│   └── userController.js\n├── jest.config.js\n├── middleware/\n│   ├── errorHandler.js\n│   └── notFound.js\n├── package.json\n├── routes/\n│   ├── api.js\n│   └── index.js\n├── server.js\n├── template.yaml\n└── tests/\n    ├── api.test.js\n    └── app.test.js\n",
      "files": {
        ".env.example": "# Server Configuration\nPORT=5000\nNODE_ENV=development\n\n# CORS Configuration\nALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080\n\n# Database Configuration (uncomment and configure as needed)\n# DB_HOST=localhost\n# DB_PORT=5432\n# DB_NAME=your_database_name\n# DB_USER=your_username\n# DB_PASSWORD=your_password\n# DATABASE_URL=postgresql://username:password@localhost:5432/database_name\n\n# JWT Configuration (uncomment if using authentication)\n# JWT_SECRET=your_super_secret_jwt_key\n# JWT_EXPIRE=30d\n\n# Redis Configuration (uncomment if using Redis)\n# REDIS_HOST=localhost\n# REDIS_PORT=6379\n# REDIS_PASSWORD=\n\n# Email Configuration (uncomment if using email)\n# SMTP_HOST=smtp.gmail.com\n# SMTP_PORT=587\n# SMTP_USER=your_email@gmail.com\n# SMTP_PASS=your_app_password\n\n# File Upload Configuration\n# MAX_FILE_SIZE=5mb\n# UPLOAD_PATH=./uploads\n\n# Logging\nLOG_LEVEL=info",
        ".eslintrc.js": "module.exports = {\n  env: {\n    node: true,\n    es2021: true,\n    jest: true\n  },\n  extends: [\n    'eslint:recommended'\n  ],\n  parserOptions: {\n    ecmaVersion: 12,\n    sourceType: 'module'\n  },\n  rules: {\n    'indent': ['error', 2],\n    'linebreak-style': ['error', 'unix'],\n    'quotes': ['error', 'single'],\n    'semi': ['error', 'always'],\n    'no-unused-vars': ['error', { 'argsIgnorePattern': '^_' }],\n    'no-console': 'off',\n    'no-trailing-spaces': 'error',\n    'eol-last': 'error'\n  }\n};",
        ".gitignore": "# Dependencies\nnode_modules/\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n.pnp\n.pnp.js\n\n# Coverage directory used by tools like istanbul\ncoverage/\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage\n.grunt\n\n# Bower dependency directory\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons\nbuild/Release\n\n# Dependency directories\njspm_packages/\n\n# TypeScript v1 declaration files\ntypings/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n.env.test\n.env.production\n.env.local\n\n# parcel-bundler cache\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\npublic\n\n# Storybook build outputs\n.out\n.storybook-out\n\n# Temporary folders\ntmp/\ntemp/\n\n# Logs\nlogs\n*.log\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Uploaded files\nuploads/\n\n# IDE\n.vscode/\n.idea/\n*.swp\n*.swo\n\n# OS\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\n\n# Database\n*.sqlite\n*.sqlite3\n*.db",
        "README.md": "# {{ project_name }}\n\nتطبيق Express.js احترافي تم إنشاؤه باستخدام Project Template Generator.\n\n## الميزات\n\n- ✅ Express.js Framework\n- ✅ أمان متقدم مع Helmet\n- ✅ CORS Support\n- ✅ Rate Limiting\n- ✅ ضغط البيانات\n- ✅ معالجة الأخطاء الشاملة\n- ✅ نظام التسجيل مع Morgan\n- ✅ هيكل منظم للملفات\n- ✅ متغيرات البيئة\n- ✅ Hot Reload للتطوير\n\n## البدء السريع\n\n### المتطلبات\n- Node.js (الإصدار 14 أو أحدث)\n- npm أو yarn\n\n### التثبيت\n```bash\n# نسخ ملف متغيرات البيئة\ncp .env.example .env\n\n# تثبيت التبعيات\nnpm install\n```\n\n### تشغيل التطبيق\n\n#### وضع التطوير (مع Hot Reload)\n```bash\nnpm run dev\n```\n\n#### وضع الإنتاج\n```bash\nnpm start\n```\n\nسيتم تشغيل الخادم على http://localhost:5000\n\n### الاختبار\n```bash\n# تشغيل الاختبارات\nnpm test\n\n# تشغيل الاختبارات مع المراقبة\nnpm run test:watch\n```\n\n### فحص الكود\n```bash\n# فحص الكود\nnpm run lint\n\n# إصلاح مشاكل الكود تلقائياً\nnpm run lint:fix\n```\n\n## هيكل المشروع\n\n```\n├── app.js              # إعداد Express\n├── server.js           # نقطة دخول التطبيق\n├── routes/             # ملفات التوجيه\n│   ├── index.js        # المسارات الرئيسية\n│   └── api.js          # مسارات API\n├── controllers/        # Controllers للمنطق التجاري\n│   └── userController.js\n├── middleware/         # Custom middleware\n│   ├── errorHandler.js\n│   └── notFound.js\n├── models/            # نماذج البيانات (إضافة حسب الحاجة)\n├── config/            # ملفات التكوين\n├── tests/             # ملفات الاختبار\n├── public/            # ملفات ثابتة\n└── .env.example       # مثال متغيرات البيئة\n```\n\n## API Endpoints\n\n### الأساسية\n- `GET /` - صفحة الترحيب\n- `GET /about` - معلومات التطبيق\n- `GET /health` - فحص حالة الخادم\n\n### المستخدمين\n- `GET /api/users` - جلب جميع المستخدمين\n- `GET /api/users/:id` - جلب مستخدم محدد\n- `POST /api/users` - إنشاء مستخدم جديد\n- `PUT /api/users/:id` - تحديث مستخدم\n- `DELETE /api/users/:id` - حذف مستخدم\n\n## متغيرات البيئة\n\nانسخ ملف `.env.example` إلى `.env` وقم بتعديل القيم حسب الحاجة:\n\n```bash\nPORT=5000\nNODE_ENV=development\nALLOWED_ORIGINS=http://localhost:3000\n```\n\n## الأمان\n\nالتطبيق يستخدم عدة طبقات أمان:\n- **Helmet**: حماية من هجمات متعددة\n- **Rate Limiting**: تحديد عدد الطلبات\n- **CORS**: التحكم في الوصول عبر المصادر\n- **Input Validation**: التحقق من البيانات المدخلة\n\n## إضافة المكونات\n\n### إضافة Controller جديد\n```bash\nptg add controller ControllerName\n```\n\n### إضافة Middleware جديد\n```bash\nptg add middleware MiddlewareName\n```\n\n### إضافة Route جديد\n```bash\nptg add route RouteName\n```\n\n## التطوير\n\n### قواعد الكود\n- استخدم ESLint للحفاظ على جودة الكود\n- اكتب اختبارات للميزات الجديدة\n- اتبع naming conventions الموجودة\n- أضف تعليقات للكود المعقد\n\n### Git Hooks\nيمكنك إضافة pre-commit hooks لفحص الكود:\n```bash\nnpm install --save-dev husky\nnpx husky install\nnpx husky add .husky/pre-commit \"npm run lint\"\n```\n\n## الإنتاج\n\n### متطلبات الإنتاج\n1. تأكد من تعيين `NODE_ENV=production`\n2. استخدم قاعدة بيانات إنتاج\n3. فعل HTTPS\n4. استخدم reverse proxy (nginx)\n5. راقب الأداء والأخطاء\n\n### Docker\n```bash\n# بناء الصورة\ndocker build -t {{ project_name }} .\n\n# تشغيل الحاوية\ndocker run -p 5000:5000 {{ project_name }}\n```\n\n## المساهمة\n\nنرحب بمساهماتكم! يرجى:\n1. Fork المشروع\n2. إنشاء branch للميزة الجديدة\n3. Commit التغييرات\n4. Push إلى branch\n5. إنشاء Pull Request\n\n## الترخيص\n\nMIT License\n\n---\n\n**تم إنشاء هذا المشروع باستخدام Project Template Generator**",
        "app.js": "const express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\nconst compression = require('compression');\nconst rateLimit = require('express-rate-limit');\nconst path = require('path');\n\n// Import routes\nconst indexRoutes = require('./routes/index');\nconst apiRoutes = require('./routes/api');\n\n// Import middleware\nconst errorHandler = require('./middleware/errorHandler');\nconst notFound = require('./middleware/notFound');\n\nconst app = express();\n\n// Security middleware\napp.use(helmet());\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: 'Too many requests from this IP, please try again later.'\n});\napp.use(limiter);\n\n// CORS configuration\napp.use(cors({\n  origin: process.env.ALLOWED_ORIGINS?.split(',') || '*',\n  methods: ['GET', 'POST', 'PUT', 'DELETE'],\n  allowedHeaders: ['Content-Type', 'Authorization']\n}));\n\n// Compression middleware\napp.use(compression());\n\n// Logging middleware\napp.use(morgan(process.env.NODE_ENV === 'production' ? 'combined' : 'dev'));\n\n// Body parsing middleware\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// Serve static files\napp.use(express.static(path.join(__dirname, 'public')));\n\n// Routes\napp.use('/', indexRoutes);\napp.use('/api', apiRoutes);\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'OK',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    version: process.env.npm_package_version || '1.0.0'\n  });\n});\n\n// Error handling middleware (must be last)\napp.use(notFound);\napp.use(errorHandler);\n\nmodule.exports = app;",
        "jest.config.js": "module.exports = {\n  testEnvironment: 'node',\n  coverageDirectory: 'coverage',\n  collectCoverageFrom: [\n    '**/*.{js,jsx}',\n    '!**/node_modules/**',\n    '!**/coverage/**',\n    '!jest.config.js',\n    '!server.js'\n  ],\n  testMatch: [\n    '**/tests/**/*.test.js'\n  ],\n  verbose: true,\n  forceExit: true,\n  detectOpenHandles: true\n};",
        "package.json": "{\n  \"name\": \"{{ project_name }}\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Express.js application created with Project Template Generator\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\",\n    \"dev\": \"nodemon server.js\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"lint\": \"eslint .\",\n    \"lint:fix\": \"eslint . --fix\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.18.2\",\n    \"cors\": \"^2.8.5\",\n    \"helmet\": \"^6.0.1\",\n    \"morgan\": \"^1.10.0\",\n    \"dotenv\": \"^16.0.3\",\n    \"body-parser\": \"^1.20.1\",\n    \"compression\": \"^1.7.4\",\n    \"express-rate-limit\": \"^6.7.0\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^2.0.20\",\n    \"jest\": \"^29.3.1\",\n    \"supertest\": \"^6.3.3\",\n    \"eslint\": \"^8.31.0\",\n    \"eslint-config-node\": \"^4.1.0\"\n  },\n  \"keywords\": [\n    \"express\",\n    \"nodejs\",\n    \"api\",\n    \"backend\"\n  ],\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"engines\": {\n    \"node\": \">=14.0.0\",\n    \"npm\": \">=6.0.0\"\n  }\n}",
        "server.js": "require('dotenv').config();\nconst app = require('./app');\n\nconst PORT = process.env.PORT || 5000;\n\n// Start server\nconst server = app.listen(PORT, '0.0.0.0', () => {\n  console.log(`🚀 Server running on port ${PORT}`);\n  console.log(`📍 Environment: ${process.env.NODE_ENV || 'development'}`);\n  console.log(`🌐 Access URL: http://localhost:${PORT}`);\n});\n\n// Graceful shutdown\nprocess.on('SIGTERM', () => {\n  console.log('👋 SIGTERM received');\n  console.log('🔄 Shutting down gracefully');\n  server.close(() => {\n    console.log('✅ Process terminated');\n  });\n});\n\nprocess.on('SIGINT', () => {\n  console.log('👋 SIGINT received');\n  console.log('🔄 Shutting down gracefully');\n  server.close(() => {\n    console.log('✅ Process terminated');\n  });\n});",
        "template.yaml": "name: \"javascript-express\"\nversion: \"1.0.0\"\ndescription: \"قالب شامل لخوادم Express.js الاحترافية\"\nlanguage: \"javascript\"\nframework: \"express\"\n\nstructure:\n  directories:\n    - \"src\"\n    - \"src/controllers\"\n    - \"src/models\"\n    - \"src/routes\" \n    - \"src/middleware\"\n    - \"src/services\"\n    - \"src/utils\"\n    - \"src/config\"\n    - \"tests\"\n    - \"public\"\n    - \"docs\"\n    - \"logs\"\n\n  files:\n    - path: \"server.js\"\n      template: \"javascript/express/server.js\"\n      type: \"template\"\n    \n    - path: \"app.js\"\n      template: \"javascript/express/app.js\"\n      type: \"template\"\n    \n    - path: \"package.json\"\n      template: \"javascript/express/package.json\"\n      type: \"template\"\n    \n    - path: \"README.md\"\n      template: \"javascript/express/README.md\"\n      type: \"template\"\n\ncomponents:\n  route:\n    template: \"javascript/express/components/route.js\"\n    path: \"src/routes/{{component_name|lower}}.js\"\n  \n  controller:\n    template: \"javascript/express/components/controller.js\"\n    path: \"src/controllers/{{component_name|lower}}Controller.js\"",
        "controllers/userController.js": "// Example user controller\n// In a real application, you would connect to a database\n\nlet users = [\n  { id: 1, name: 'أحمد محمد', email: 'ahmed@example.com' },\n  { id: 2, name: 'فاطمة علي', email: 'fatima@example.com' },\n  { id: 3, name: 'محمد حسن', email: 'mohammed@example.com' }\n];\n\n// Get all users\nconst getAllUsers = (req, res) => {\n  try {\n    const { page = 1, limit = 10 } = req.query;\n    const startIndex = (page - 1) * limit;\n    const endIndex = page * limit;\n    \n    const paginatedUsers = users.slice(startIndex, endIndex);\n    \n    res.json({\n      success: true,\n      data: paginatedUsers,\n      pagination: {\n        current: parseInt(page),\n        total: Math.ceil(users.length / limit),\n        count: paginatedUsers.length,\n        totalRecords: users.length\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      message: 'خطأ في جلب المستخدمين',\n      error: error.message\n    });\n  }\n};\n\n// Get user by ID\nconst getUserById = (req, res) => {\n  try {\n    const { id } = req.params;\n    const user = users.find(u => u.id === parseInt(id));\n    \n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        message: 'المستخدم غير موجود'\n      });\n    }\n    \n    res.json({\n      success: true,\n      data: user\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      message: 'خطأ في جلب المستخدم',\n      error: error.message\n    });\n  }\n};\n\n// Create new user\nconst createUser = (req, res) => {\n  try {\n    const { name, email } = req.body;\n    \n    // Validation\n    if (!name || !email) {\n      return res.status(400).json({\n        success: false,\n        message: 'الاسم والإيميل مطلوبان'\n      });\n    }\n    \n    // Check if email already exists\n    const existingUser = users.find(u => u.email === email);\n    if (existingUser) {\n      return res.status(400).json({\n        success: false,\n        message: 'الإيميل موجود مسبقاً'\n      });\n    }\n    \n    // Create new user\n    const newUser = {\n      id: users.length + 1,\n      name,\n      email\n    };\n    \n    users.push(newUser);\n    \n    res.status(201).json({\n      success: true,\n      message: 'تم إنشاء المستخدم بنجاح',\n      data: newUser\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      message: 'خطأ في إنشاء المستخدم',\n      error: error.message\n    });\n  }\n};\n\n// Update user\nconst updateUser = (req, res) => {\n  try {\n    const { id } = req.params;\n    const { name, email } = req.body;\n    \n    const userIndex = users.findIndex(u => u.id === parseInt(id));\n    \n    if (userIndex === -1) {\n      return res.status(404).json({\n        success: false,\n        message: 'المستخدم غير موجود'\n      });\n    }\n    \n    // Update user\n    users[userIndex] = { ...users[userIndex], name, email };\n    \n    res.json({\n      success: true,\n      message: 'تم تحديث المستخدم بنجاح',\n      data: users[userIndex]\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      message: 'خطأ في تحديث المستخدم',\n      error: error.message\n    });\n  }\n};\n\n// Delete user\nconst deleteUser = (req, res) => {\n  try {\n    const { id } = req.params;\n    const userIndex = users.findIndex(u => u.id === parseInt(id));\n    \n    if (userIndex === -1) {\n      return res.status(404).json({\n        success: false,\n        message: 'المستخدم غير موجود'\n      });\n    }\n    \n    users.splice(userIndex, 1);\n    \n    res.json({\n      success: true,\n      message: 'تم حذف المستخدم بنجاح'\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      message: 'خطأ في حذف المستخدم',\n      error: error.message\n    });\n  }\n};\n\nmodule.exports = {\n  getAllUsers,\n  getUserById,\n  createUser,\n  updateUser,\n  deleteUser\n};",
        "middleware/errorHandler.js": "// Global error handling middleware\nconst errorHandler = (err, req, res, next) => {\n  let error = { ...err };\n  error.message = err.message;\n\n  // Log error\n  console.error('Error:', err);\n\n  // Mongoose bad ObjectId\n  if (err.name === 'CastError') {\n    const message = 'المورد غير موجود';\n    error = { message, statusCode: 404 };\n  }\n\n  // Mongoose duplicate key\n  if (err.code === 11000) {\n    const message = 'البيانات موجودة مسبقاً';\n    error = { message, statusCode: 400 };\n  }\n\n  // Mongoose validation error\n  if (err.name === 'ValidationError') {\n    const message = Object.values(err.errors).map(val => val.message).join(', ');\n    error = { message, statusCode: 400 };\n  }\n\n  // JWT errors\n  if (err.name === 'JsonWebTokenError') {\n    const message = 'رمز المصادقة غير صحيح';\n    error = { message, statusCode: 401 };\n  }\n\n  if (err.name === 'TokenExpiredError') {\n    const message = 'رمز المصادقة منتهي الصلاحية';\n    error = { message, statusCode: 401 };\n  }\n\n  res.status(error.statusCode || 500).json({\n    success: false,\n    message: error.message || 'خطأ في الخادم',\n    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })\n  });\n};\n\nmodule.exports = errorHandler;",
        "middleware/notFound.js": "// 404 Not Found middleware\nconst notFound = (req, res, next) => {\n  const error = new Error(`المسار غير موجود - ${req.originalUrl}`);\n  res.status(404);\n  next(error);\n};\n\nmodule.exports = notFound;",
        "routes/api.js": "const express = require('express');\nconst router = express.Router();\n\n// Import controllers\nconst userController = require('../controllers/userController');\n\n// API Info\nrouter.get('/', (req, res) => {\n  res.json({\n    message: 'API v1.0',\n    documentation: '/api/docs',\n    endpoints: {\n      users: '/api/users'\n    }\n  });\n});\n\n// User routes\nrouter.get('/users', userController.getAllUsers);\nrouter.get('/users/:id', userController.getUserById);\nrouter.post('/users', userController.createUser);\nrouter.put('/users/:id', userController.updateUser);\nrouter.delete('/users/:id', userController.deleteUser);\n\n// Example protected route (add authentication middleware as needed)\nrouter.get('/protected', (req, res) => {\n  res.json({\n    message: 'This is a protected route',\n    user: req.user || null\n  });\n});\n\nmodule.exports = router;",
        "routes/index.js": "const express = require('express');\nconst router = express.Router();\n\n// Home route\nrouter.get('/', (req, res) => {\n  res.json({\n    message: 'مرحباً بك في {{ project_name }}',\n    description: 'Express.js API server',\n    version: '1.0.0',\n    endpoints: {\n      health: '/health',\n      api: '/api'\n    }\n  });\n});\n\n// About route\nrouter.get('/about', (req, res) => {\n  res.json({\n    name: '{{ project_name }}',\n    description: 'تطبيق Express.js تم إنشاؤه باستخدام Project Template Generator',\n    version: '1.0.0',\n    features: [\n      'Express.js Framework',\n      'Security Middleware',\n      'Rate Limiting',\n      'CORS Support',\n      'Error Handling',\n      'Logging',\n      'Compression'\n    ]\n  });\n});\n\nmodule.exports = router;",
        "tests/api.test.js": "const request = require('supertest');\nconst app = require('../app');\n\ndescribe('API Routes', () => {\n  describe('GET /api', () => {\n    it('should return API information', async () => {\n      const res = await request(app)\n        .get('/api')\n        .expect(200);\n      \n      expect(res.body).toHaveProperty('message', 'API v1.0');\n      expect(res.body).toHaveProperty('endpoints');\n    });\n  });\n\n  describe('User API', () => {\n    describe('GET /api/users', () => {\n      it('should return list of users', async () => {\n        const res = await request(app)\n          .get('/api/users')\n          .expect(200);\n        \n        expect(res.body).toHaveProperty('success', true);\n        expect(res.body).toHaveProperty('data');\n        expect(Array.isArray(res.body.data)).toBe(true);\n        expect(res.body).toHaveProperty('pagination');\n      });\n\n      it('should support pagination', async () => {\n        const res = await request(app)\n          .get('/api/users?page=1&limit=2')\n          .expect(200);\n        \n        expect(res.body.pagination).toHaveProperty('current', 1);\n        expect(res.body.data.length).toBeLessThanOrEqual(2);\n      });\n    });\n\n    describe('GET /api/users/:id', () => {\n      it('should return user by ID', async () => {\n        const res = await request(app)\n          .get('/api/users/1')\n          .expect(200);\n        \n        expect(res.body).toHaveProperty('success', true);\n        expect(res.body.data).toHaveProperty('id', 1);\n      });\n\n      it('should return 404 for non-existent user', async () => {\n        const res = await request(app)\n          .get('/api/users/999')\n          .expect(404);\n        \n        expect(res.body).toHaveProperty('success', false);\n        expect(res.body.message).toContain('غير موجود');\n      });\n    });\n\n    describe('POST /api/users', () => {\n      it('should create new user', async () => {\n        const newUser = {\n          name: 'مستخدم جديد',\n          email: 'newuser@example.com'\n        };\n\n        const res = await request(app)\n          .post('/api/users')\n          .send(newUser)\n          .expect(201);\n        \n        expect(res.body).toHaveProperty('success', true);\n        expect(res.body.data).toHaveProperty('name', newUser.name);\n        expect(res.body.data).toHaveProperty('email', newUser.email);\n      });\n\n      it('should return 400 for missing required fields', async () => {\n        const res = await request(app)\n          .post('/api/users')\n          .send({})\n          .expect(400);\n        \n        expect(res.body).toHaveProperty('success', false);\n        expect(res.body.message).toContain('مطلوبان');\n      });\n    });\n\n    describe('PUT /api/users/:id', () => {\n      it('should update existing user', async () => {\n        const updatedUser = {\n          name: 'اسم محدث',\n          email: 'updated@example.com'\n        };\n\n        const res = await request(app)\n          .put('/api/users/1')\n          .send(updatedUser)\n          .expect(200);\n        \n        expect(res.body).toHaveProperty('success', true);\n        expect(res.body.data).toHaveProperty('name', updatedUser.name);\n      });\n\n      it('should return 404 for non-existent user', async () => {\n        const res = await request(app)\n          .put('/api/users/999')\n          .send({ name: 'Test', email: 'test@example.com' })\n          .expect(404);\n        \n        expect(res.body).toHaveProperty('success', false);\n      });\n    });\n\n    describe('DELETE /api/users/:id', () => {\n      it('should delete existing user', async () => {\n        const res = await request(app)\n          .delete('/api/users/1')\n          .expect(200);\n        \n        expect(res.body).toHaveProperty('success', true);\n        expect(res.body.message).toContain('تم حذف');\n      });\n\n      it('should return 404 for non-existent user', async () => {\n        const res = await request(app)\n          .delete('/api/users/999')\n          .expect(404);\n        \n        expect(res.body).toHaveProperty('success', false);\n      });\n    });\n  });\n});",
        "tests/app.test.js": "const request = require('supertest');\nconst app = require('../app');\n\ndescribe('Express App', () => {\n  describe('GET /', () => {\n    it('should return welcome message', async () => {\n      const res = await request(app)\n        .get('/')\n        .expect(200);\n      \n      expect(res.body).toHaveProperty('message');\n      expect(res.body.message).toContain('مرحباً بك');\n    });\n  });\n\n  describe('GET /about', () => {\n    it('should return app information', async () => {\n      const res = await request(app)\n        .get('/about')\n        .expect(200);\n      \n      expect(res.body).toHaveProperty('name');\n      expect(res.body).toHaveProperty('description');\n      expect(res.body).toHaveProperty('version');\n    });\n  });\n\n  describe('GET /health', () => {\n    it('should return health status', async () => {\n      const res = await request(app)\n        .get('/health')\n        .expect(200);\n      \n      expect(res.body).toHaveProperty('status', 'OK');\n      expect(res.body).toHaveProperty('timestamp');\n      expect(res.body).toHaveProperty('uptime');\n    });\n  });\n\n  describe('GET /nonexistent', () => {\n    it('should return 404 for non-existent routes', async () => {\n      const res = await request(app)\n        .get('/nonexistent')\n        .expect(404);\n      \n      expect(res.body).toHaveProperty('success', false);\n      expect(res.body.message).toContain('المسار غير موجود');\n    });\n  });\n});"
      }
    },
    "general": {
      "structure": "├── README.md\n├── components/\n│   ├── class.js\n│   └── module.js\n├── gitignore\n├── index.js\n├── package.json\n├── src/\n│   └── main.js\n└── template.yaml\n",
      "files": {
        "README.md": "# {{ project_name }}\n\nمشروع JavaScript عام تم إنشاؤه باستخدام Project Template Generator.\n\n## الميزات\n\n- ✅ ES6+ Modules\n- ✅ Jest للاختبارات\n- ✅ ESLint لجودة الكود\n- ✅ Webpack للتجميع\n- ✅ Hot Reload للتطوير\n- ✅ هيكل منظم للملفات\n\n## البدء السريع\n\n### المتطلبات\n- Node.js (الإصدار 14 أو أحدث)\n- npm أو yarn\n\n### التثبيت\n```bash\nnpm install\n```\n\n### تشغيل التطبيق\n\n#### وضع التطوير\n```bash\nnpm run dev\n```\n\n#### وضع الإنتاج\n```bash\nnpm start\n```\n\n### الاختبار\n```bash\n# تشغيل الاختبارات\nnpm test\n\n# تشغيل الاختبارات مع المراقبة\nnpm run test:watch\n```\n\n### البناء\n```bash\n# بناء للإنتاج\nnpm run build\n\n# بناء للتطوير\nnpm run build:dev\n```\n\n### فحص الكود\n```bash\n# فحص الكود\nnpm run lint\n\n# إصلاح مشاكل الكود\nnpm run lint:fix\n```\n\n## هيكل المشروع\n\n```\n├── index.js           # نقطة دخول التطبيق\n├── src/              # كود المصدر\n│   └── main.js       # الوظيفة الرئيسية\n├── tests/            # ملفات الاختبار\n├── docs/             # التوثيق\n├── assets/           # ملفات ثابتة\n├── package.json      # إعدادات المشروع\n└── README.md         # هذا الملف\n```\n\n## إضافة المكونات\n\n### إضافة وحدة جديدة\n```bash\nptg add module ModuleName\n```\n\n### إضافة فئة جديدة\n```bash\nptg add class ClassName\n```\n\n## التطوير\n\n### قواعد الكود\n- استخدم ES6+ syntax\n- اكتب اختبارات للميزات الجديدة\n- اتبع ESLint rules\n- أضف JSDoc comments للدوال\n\n### مثال الاستخدام\n\n```javascript\nimport { App } from './src/main.js';\n\nconst app = new App();\napp.initialize();\n\nconsole.log(app.getInfo());\n```\n\n## البناء والتوزيع\n\n### Webpack Configuration\nالتطبيق يستخدم Webpack للتجميع. يمكنك تعديل `webpack.config.js` حسب احتياجاتك.\n\n### إضافة مكتبات خارجية\n```bash\nnpm install --save library-name\n```\n\n### Browser Support\nالتطبيق يدعم المتصفحات الحديثة التي تدعم ES6+.\n\n## الاختبار\n\n### كتابة الاختبارات\n```javascript\n// tests/app.test.js\nimport { App } from '../src/main.js';\n\ndescribe('App', () => {\n  test('should initialize correctly', () => {\n    const app = new App();\n    app.initialize();\n    expect(app.getInfo().initialized).toBe(true);\n  });\n});\n```\n\n## المساهمة\n\nنرحب بمساهماتكم! يرجى:\n1. Fork المشروع\n2. إنشاء branch للميزة الجديدة\n3. Commit التغييرات\n4. Push إلى branch\n5. إنشاء Pull Request\n\n## الترخيص\n\nMIT License\n\n---\n\n**تم إنشاء هذا المشروع باستخدام Project Template Generator**",
        "gitignore": "# Dependencies\nnode_modules/\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Build outputs\ndist/\nbuild/\n*.tgz\n\n# Coverage\ncoverage/\n*.lcov\n\n# Environment variables\n.env\n.env.local\n.env.test\n\n# Logs\nlogs/\n*.log\n\n# Runtime data\npids/\n*.pid\n*.seed\n\n# IDE\n.vscode/\n.idea/\n*.swp\n*.swo\n\n# OS\n.DS_Store\nThumbs.db\n\n# Cache\n.cache/\n.parcel-cache/\n.npm/\n.eslintcache\n\n# Optional\n.nyc_output/\njspm_packages/",
        "index.js": "import { main } from './src/main.js';\n\nconsole.log('🚀 بدء تشغيل {{ project_name }}');\n\ntry {\n  main();\n  console.log('✅ تم تشغيل التطبيق بنجاح');\n} catch (error) {\n  console.error('❌ خطأ في تشغيل التطبيق:', error.message);\n  process.exit(1);\n}",
        "package.json": "{\n  \"name\": \"{{ project_name }}\",\n  \"version\": \"1.0.0\",\n  \"description\": \"JavaScript project created with Project Template Generator\",\n  \"main\": \"index.js\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"start\": \"node index.js\",\n    \"dev\": \"nodemon index.js\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"lint\": \"eslint .\",\n    \"lint:fix\": \"eslint . --fix\",\n    \"build\": \"webpack --mode=production\",\n    \"build:dev\": \"webpack --mode=development\"\n  },\n  \"devDependencies\": {\n    \"jest\": \"^29.3.1\",\n    \"nodemon\": \"^2.0.20\",\n    \"eslint\": \"^8.31.0\",\n    \"webpack\": \"^5.75.0\",\n    \"webpack-cli\": \"^5.0.1\",\n    \"@babel/core\": \"^7.20.12\",\n    \"@babel/preset-env\": \"^7.20.2\",\n    \"babel-loader\": \"^9.1.2\"\n  },\n  \"keywords\": [\n    \"javascript\",\n    \"es6\",\n    \"nodejs\"\n  ],\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"engines\": {\n    \"node\": \">=14.0.0\"\n  }\n}",
        "template.yaml": "name: \"javascript-general\"\nversion: \"1.0.0\"\ndescription: \"قالب شامل لمشاريع JavaScript العامة\"\nlanguage: \"javascript\"\nframework: \"general\"\n\nstructure:\n  directories:\n    - \"src\"\n    - \"tests\"\n    - \"docs\"\n    - \"assets\"\n\n  files:\n    - path: \"package.json\"\n      template: \"javascript/general/package.json\"\n      type: \"template\"\n    \n    - path: \"index.js\"\n      template: \"javascript/general/index.js\"\n      type: \"template\"\n      \n    - path: \"src/main.js\"\n      template: \"javascript/general/src/main.js\"\n      type: \"template\"\n    \n    - path: \"README.md\"\n      template: \"javascript/general/README.md\"\n      type: \"template\"\n      \n    - path: \".gitignore\"\n      template: \"javascript/general/gitignore\"\n      type: \"template\"\n\ncomponents:\n  module:\n    template: \"javascript/general/components/module.js\"\n    path: \"src/{{component_name|lower}}.js\"\n  \n  class:\n    template: \"javascript/general/components/class.js\"\n    path: \"src/{{component_name|title}}.js\"",
        "components/class.js": "/**\n * {{component_name|title}} Class\n * \n * وصف الفئة: {{component_name|title}}\n * @author Project Template Generator\n */\n\nexport default class {{component_name|title}} {\n  /**\n   * منشئ الفئة\n   * @param {Object} options - خيارات التكوين\n   */\n  constructor(options = {}) {\n    this.name = '{{component_name|title}}';\n    this.version = '1.0.0';\n    this.options = this._mergeOptions(options);\n    this.state = {\n      initialized: false,\n      active: false\n    };\n\n    // تهيئة تلقائية\n    this._initialize();\n  }\n\n  /**\n   * دمج الخيارات مع الافتراضية\n   * @private\n   */\n  _mergeOptions(userOptions) {\n    const defaultOptions = {\n      autoStart: false,\n      debug: false\n    };\n    \n    return { ...defaultOptions, ...userOptions };\n  }\n\n  /**\n   * تهيئة الفئة\n   * @private\n   */\n  _initialize() {\n    if (this.options.debug) {\n      console.log(`🔧 تهيئة ${this.name}`);\n    }\n\n    // منطق التهيئة هنا\n    this._setupProperties();\n    this._bindEvents();\n\n    this.state.initialized = true;\n\n    if (this.options.autoStart) {\n      this.start();\n    }\n  }\n\n  /**\n   * إعداد الخصائص\n   * @private\n   */\n  _setupProperties() {\n    // إعداد الخصائص الأساسية\n  }\n\n  /**\n   * ربط الأحداث\n   * @private\n   */\n  _bindEvents() {\n    // ربط event listeners\n  }\n\n  /**\n   * بدء تشغيل الفئة\n   * @public\n   */\n  start() {\n    if (!this.state.initialized) {\n      throw new Error('الفئة غير مهيأة');\n    }\n\n    if (this.state.active) {\n      console.warn(`${this.name} نشط بالفعل`);\n      return this;\n    }\n\n    if (this.options.debug) {\n      console.log(`▶️ بدء تشغيل ${this.name}`);\n    }\n\n    // منطق بدء التشغيل\n    this.state.active = true;\n\n    // استدعاء callback إذا كان موجود\n    if (typeof this.options.onStart === 'function') {\n      this.options.onStart(this);\n    }\n\n    return this;\n  }\n\n  /**\n   * إيقاف الفئة\n   * @public\n   */\n  stop() {\n    if (!this.state.active) {\n      console.warn(`${this.name} غير نشط`);\n      return this;\n    }\n\n    if (this.options.debug) {\n      console.log(`⏹️ إيقاف ${this.name}`);\n    }\n\n    // منطق الإيقاف\n    this.state.active = false;\n\n    // استدعاء callback إذا كان موجود\n    if (typeof this.options.onStop === 'function') {\n      this.options.onStop(this);\n    }\n\n    return this;\n  }\n\n  /**\n   * إعادة تشغيل الفئة\n   * @public\n   */\n  restart() {\n    this.stop();\n    this.start();\n    return this;\n  }\n\n  /**\n   * تدمير الفئة وتنظيف الموارد\n   * @public\n   */\n  destroy() {\n    if (this.state.active) {\n      this.stop();\n    }\n\n    // تنظيف الموارد\n    this.state.initialized = false;\n\n    if (this.options.debug) {\n      console.log(`🗑️ تم تدمير ${this.name}`);\n    }\n\n    return this;\n  }\n\n  /**\n   * الحصول على معلومات الفئة\n   * @public\n   */\n  getInfo() {\n    return {\n      name: this.name,\n      version: this.version,\n      state: { ...this.state },\n      options: { ...this.options }\n    };\n  }\n\n  /**\n   * تحديث الخيارات\n   * @public\n   */\n  updateOptions(newOptions) {\n    this.options = { ...this.options, ...newOptions };\n    return this;\n  }\n\n  /**\n   * التحقق من حالة النشاط\n   * @public\n   */\n  isActive() {\n    return this.state.active;\n  }\n\n  /**\n   * التحقق من حالة التهيئة\n   * @public\n   */\n  isInitialized() {\n    return this.state.initialized;\n  }\n}",
        "components/module.js": "/**\n * {{component_name|title}} Module\n * \n * وصف الوحدة: {{component_name|title}}\n * @author Project Template Generator\n */\n\n/**\n * فئة {{component_name|title}}\n */\nexport class {{component_name|title}} {\n  constructor(options = {}) {\n    this.name = '{{component_name|title}}';\n    this.options = { ...this.getDefaultOptions(), ...options };\n    this.initialized = false;\n  }\n\n  /**\n   * الخيارات الافتراضية\n   */\n  getDefaultOptions() {\n    return {\n      // إضافة الخيارات الافتراضية هنا\n    };\n  }\n\n  /**\n   * تهيئة الوحدة\n   */\n  initialize() {\n    console.log(`🚀 تهيئة وحدة ${this.name}`);\n    \n    // منطق التهيئة هنا\n    \n    this.initialized = true;\n    console.log(`✅ تم تهيئة وحدة ${this.name} بنجاح`);\n    \n    return this;\n  }\n\n  /**\n   * تشغيل الوحدة\n   */\n  run() {\n    if (!this.initialized) {\n      this.initialize();\n    }\n\n    console.log(`▶️ تشغيل وحدة ${this.name}`);\n    \n    // منطق التشغيل هنا\n    \n    return this;\n  }\n\n  /**\n   * إيقاف الوحدة\n   */\n  stop() {\n    console.log(`⏹️ إيقاف وحدة ${this.name}`);\n    \n    // منطق الإيقاف هنا\n    \n    return this;\n  }\n\n  /**\n   * الحصول على حالة الوحدة\n   */\n  getStatus() {\n    return {\n      name: this.name,\n      initialized: this.initialized,\n      options: this.options\n    };\n  }\n}\n\n/**\n * دالة مساعدة لإنشاء instance جديد\n */\nexport function create{{component_name|title}}(options) {\n  return new {{component_name|title}}(options);\n}\n\n/**\n * تصدير افتراضي\n */\nexport default {{component_name|title}};",
        "src/main.js": "/**\n * الوظيفة الرئيسية للتطبيق\n */\nexport function main() {\n  console.log('مرحباً من {{ project_name }}!');\n  \n  // إضافة منطق التطبيق هنا\n  const app = new App();\n  app.initialize();\n  \n  return app;\n}\n\n/**\n * فئة التطبيق الرئيسية\n */\nclass App {\n  constructor() {\n    this.name = '{{ project_name }}';\n    this.version = '1.0.0';\n    this.initialized = false;\n  }\n\n  /**\n   * تهيئة التطبيق\n   */\n  initialize() {\n    console.log(`🎉 تهيئة ${this.name} v${this.version}`);\n    \n    // منطق التهيئة هنا\n    this.setupEventListeners();\n    this.loadConfiguration();\n    \n    this.initialized = true;\n    console.log('✅ تم تهيئة التطبيق بنجاح');\n  }\n\n  /**\n   * إعداد مستمعي الأحداث\n   */\n  setupEventListeners() {\n    // إضافة event listeners هنا\n    process.on('SIGINT', () => {\n      console.log('🛑 إيقاف التطبيق...');\n      this.shutdown();\n    });\n  }\n\n  /**\n   * تحميل إعدادات التطبيق\n   */\n  loadConfiguration() {\n    // تحميل الإعدادات من ملفات أو متغيرات البيئة\n    console.log('📝 تحميل الإعدادات...');\n  }\n\n  /**\n   * إيقاف التطبيق بأمان\n   */\n  shutdown() {\n    console.log('👋 إغلاق التطبيق...');\n    process.exit(0);\n  }\n\n  /**\n   * إرجاع معلومات التطبيق\n   */\n  getInfo() {\n    return {\n      name: this.name,\n      version: this.version,\n      initialized: this.initialized\n    };\n  }\n}\n\nexport { App };"
      }
    },
    "react": {
      "structure": "├── .gitignore\n├── README.md\n├── components/\n│   ├── component.jsx\n│   └── page.jsx\n├── package.json\n├── public/\n│   ├── index.html\n│   └── manifest.json\n├── src/\n│   ├── App.css\n│   ├── App.js\n│   ├── components/\n│   │   ├── Footer.css\n│   │   ├── Footer.jsx\n│   │   ├── Navbar.css\n│   │   └── Navbar.jsx\n│   ├── index.css\n│   ├── index.js\n│   ├── pages/\n│   │   ├── About.css\n│   │   ├── About.jsx\n│   │   ├── HomePage.css\n│   │   └── HomePage.jsx\n│   └── reportWebVitals.js\n└── template.yaml\n",
      "files": {
        ".gitignore": "# Dependencies\n/node_modules\n/.pnp\n.pnp.js\n\n# Testing\n/coverage\n\n# Production\n/build\n\n# Misc\n.DS_Store\n.env.local\n.env.development.local\n.env.test.local\n.env.production.local\n\n# Logs\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# IDE\n.vscode/\n.idea/\n\n# Cache\n.cache/",
        "README.md": "# {{ project_name }}\n\nتطبيق React احترافي تم إنشاؤه باستخدام Project Template Generator.\n\n## البدء السريع\n\n### المتطلبات\n- Node.js (الإصدار 14 أو أحدث)\n- npm أو yarn\n\n### التثبيت\n```bash\nnpm install\n```\n\n### تشغيل التطبيق\n```bash\nnpm start\n```\nسيتم فتح التطبيق في المتصفح على http://localhost:3000\n\n### البناء للإنتاج\n```bash\nnpm run build\n```\n\n### تشغيل الاختبارات\n```bash\nnpm test\n```\n\n## هيكل المشروع\n```\nsrc/\n├── components/     # المكونات القابلة لإعادة الاستخدام\n├── pages/         # صفحات التطبيق\n├── hooks/         # Custom hooks\n├── services/      # خدمات API\n├── utils/         # دوال مساعدة\n├── contexts/      # React contexts\n└── assets/        # ملفات ثابتة\n```\n\n## الميزات\n- ✅ React Router للتنقل\n- ✅ هيكل مجلدات منظم\n- ✅ دعم متعدد اللغات\n- ✅ Responsive design\n- ✅ اختبارات جاهزة\n\n## المساهمة\nنرحب بمساهماتكم! يرجى قراءة دليل المساهمة قبل البدء.\n\n## الترخيص\nMIT License",
        "package.json": "{\n  \"name\": \"{{ project_name }}\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@testing-library/jest-dom\": \"^5.16.5\",\n    \"@testing-library/react\": \"^13.4.0\",\n    \"@testing-library/user-event\": \"^13.5.0\",\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-router-dom\": \"^6.8.1\",\n    \"react-scripts\": \"5.0.1\",\n    \"web-vitals\": \"^2.1.4\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\",\n      \"react-app/jest\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  },\n  \"proxy\": \"http://localhost:5000\"\n}",
        "template.yaml": "name: \"javascript-react\"\nversion: \"1.0.0\"\ndescription: \"قالب شامل لتطبيقات React الاحترافية\"\nlanguage: \"javascript\"\nframework: \"react\"\n\nstructure:\n  directories:\n    - \"src\"\n    - \"src/components\"\n    - \"src/pages\"\n    - \"src/hooks\"\n    - \"src/services\"\n    - \"src/utils\"\n    - \"src/contexts\"\n    - \"src/assets\"\n    - \"src/assets/images\"\n    - \"src/assets/styles\"\n    - \"public\"\n    - \"tests\"\n    - \"docs\"\n\n  files:\n    - path: \"package.json\"\n      template: \"javascript/react/package.json\"\n      type: \"template\"\n    \n    - path: \"src/App.js\"\n      template: \"javascript/react/src/App.js\"\n      type: \"template\"\n    \n    - path: \"src/index.js\"\n      template: \"javascript/react/src/index.js\"\n      type: \"template\"\n    \n    - path: \"public/index.html\"\n      template: \"javascript/react/public/index.html\"\n      type: \"template\"\n    \n    - path: \"README.md\"\n      template: \"javascript/react/README.md\"\n      type: \"template\"\n\ncomponents:\n  component:\n    template: \"javascript/react/components/component.jsx\"\n    path: \"src/components/{{component_name|title}}.jsx\"\n  \n  page:\n    template: \"javascript/react/components/page.jsx\"\n    path: \"src/pages/{{component_name|title}}Page.jsx\"",
        "components/component.jsx": "import React from 'react';\nimport './{{component_name|title}}.css';\n\nconst {{component_name|title}} = () => {\n  return (\n    <div className=\"{{component_name|lower}}\">\n      <h2>{{component_name|title}} Component</h2>\n      <p>مكون {{component_name|title}} جاهز للاستخدام.</p>\n    </div>\n  );\n};\n\nexport default {{component_name|title}};",
        "components/page.jsx": "import React from 'react';\nimport './{{component_name|title}}Page.css';\n\nconst {{component_name|title}}Page = () => {\n  return (\n    <div className=\"{{component_name|lower}}-page\">\n      <div className=\"container\">\n        <h1>صفحة {{component_name|title}}</h1>\n        <div className=\"card\">\n          <p>مرحباً بك في صفحة {{component_name|title}}.</p>\n          <p>يمكنك تخصيص هذه الصفحة حسب احتياجاتك.</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default {{component_name|title}}Page;",
        "public/index.html": "<!DOCTYPE html>\n<html lang=\"ar\" dir=\"rtl\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta\n      name=\"description\"\n      content=\"{{ project_name }} - تطبيق React احترافي\"\n    />\n    <link rel=\"apple-touch-icon\" href=\"%PUBLIC_URL%/logo192.png\" />\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n    <title>{{ project_name }}</title>\n  </head>\n  <body>\n    <noscript>يرجى تفعيل JavaScript لاستخدام هذا التطبيق.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>",
        "public/manifest.json": "{\n  \"short_name\": \"{{ project_name }}\",\n  \"name\": \"{{ project_name }} - React App\",\n  \"icons\": [\n    {\n      \"src\": \"favicon.ico\",\n      \"sizes\": \"64x64 32x32 24x24 16x16\",\n      \"type\": \"image/x-icon\"\n    }\n  ],\n  \"start_url\": \".\",\n  \"display\": \"standalone\",\n  \"theme_color\": \"#000000\",\n  \"background_color\": \"#ffffff\"\n}",
        "src/App.css": ".App {\n  text-align: center;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.main-content {\n  flex: 1;\n  padding: 20px;\n}\n\n.App-logo {\n  height: 40vmin;\n  pointer-events: none;\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  .App-logo {\n    animation: App-logo-spin infinite 20s linear;\n  }\n}\n\n.App-header {\n  background-color: #282c34;\n  padding: 20px;\n  color: white;\n}\n\n.App-link {\n  color: #61dafb;\n}\n\n@keyframes App-logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n/* Responsive design */\n@media (max-width: 768px) {\n  .main-content {\n    padding: 10px;\n  }\n}",
        "src/App.js": "import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport './App.css';\n\n// Import components\nimport HomePage from './pages/HomePage';\nimport About from './pages/About';\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar />\n        <main className=\"main-content\">\n          <Routes>\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"/about\" element={<About />} />\n          </Routes>\n        </main>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;",
        "src/index.css": "body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  background-color: #f5f5f5;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 20px;\n}\n\n.btn {\n  padding: 10px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n  transition: all 0.3s ease;\n}\n\n.btn-primary {\n  background-color: #007bff;\n  color: white;\n}\n\n.btn-primary:hover {\n  background-color: #0056b3;\n}\n\n.card {\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n  padding: 20px;\n  margin: 20px 0;\n}",
        "src/index.js": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();",
        "src/reportWebVitals.js": "const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;",
        "src/components/Footer.css": ".footer {\n  background-color: #343a40;\n  color: #fff;\n  padding: 2rem 0;\n  margin-top: auto;\n}\n\n.footer .container {\n  text-align: center;\n}\n\n.footer p {\n  margin: 0;\n  opacity: 0.8;\n}",
        "src/components/Footer.jsx": "import React from 'react';\nimport './Footer.css';\n\nconst Footer = () => {\n  return (\n    <footer className=\"footer\">\n      <div className=\"container\">\n        <p>&copy; 2025 {{ project_name }}. جميع الحقوق محفوظة.</p>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;",
        "src/components/Navbar.css": ".navbar {\n  background-color: #343a40;\n  padding: 1rem 0;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.navbar-brand a {\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: #fff;\n  text-decoration: none;\n}\n\n.navbar .container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.navbar-nav {\n  display: flex;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  gap: 2rem;\n}\n\n.nav-link {\n  color: #fff;\n  text-decoration: none;\n  padding: 0.5rem 1rem;\n  border-radius: 4px;\n  transition: background-color 0.3s ease;\n}\n\n.nav-link:hover {\n  background-color: #495057;\n}\n\n@media (max-width: 768px) {\n  .navbar .container {\n    flex-direction: column;\n    gap: 1rem;\n  }\n  \n  .navbar-nav {\n    gap: 1rem;\n  }\n}",
        "src/components/Navbar.jsx": "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Navbar.css';\n\nconst Navbar = () => {\n  return (\n    <nav className=\"navbar\">\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <Link to=\"/\">{{ project_name }}</Link>\n        </div>\n        <ul className=\"navbar-nav\">\n          <li>\n            <Link to=\"/\" className=\"nav-link\">الرئيسية</Link>\n          </li>\n          <li>\n            <Link to=\"/about\" className=\"nav-link\">حول</Link>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;",
        "src/pages/About.css": ".about-page {\n  padding: 2rem 0;\n}\n\n.about-content h1 {\n  text-align: center;\n  color: #343a40;\n  margin-bottom: 2rem;\n}\n\n.about-content .card {\n  margin-bottom: 2rem;\n}\n\n.about-content p {\n  line-height: 1.6;\n  margin-bottom: 1rem;\n}\n\n.tech-stack {\n  margin-top: 2rem;\n}\n\n.tech-stack h2 {\n  color: #007bff;\n  margin-bottom: 1rem;\n}\n\n.tech-stack ul {\n  list-style: none;\n  padding: 0;\n}\n\n.tech-stack li {\n  background: #f8f9fa;\n  padding: 0.5rem 1rem;\n  margin: 0.5rem 0;\n  border-radius: 5px;\n  border-left: 4px solid #007bff;\n}",
        "src/pages/About.jsx": "import React from 'react';\nimport './About.css';\n\nconst About = () => {\n  return (\n    <div className=\"about-page\">\n      <div className=\"container\">\n        <div className=\"about-content\">\n          <h1>حول {{ project_name }}</h1>\n          <div className=\"card\">\n            <p>\n              هذا التطبيق تم إنشاؤه باستخدام Project Template Generator،\n              أداة شاملة لإنشاء قوالب مشاريع احترافية.\n            </p>\n            <p>\n              يستخدم التطبيق أحدث تقنيات React لتوفير تجربة مستخدم ممتازة\n              وأداء عالي.\n            </p>\n          </div>\n          \n          <div className=\"tech-stack\">\n            <h2>التقنيات المستخدمة</h2>\n            <ul>\n              <li>React 18</li>\n              <li>React Router</li>\n              <li>CSS3</li>\n              <li>Modern JavaScript</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default About;",
        "src/pages/HomePage.css": ".home-page {\n  padding: 2rem 0;\n}\n\n.hero-section {\n  text-align: center;\n  padding: 4rem 0;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  border-radius: 10px;\n  margin-bottom: 3rem;\n}\n\n.hero-section h1 {\n  font-size: 3rem;\n  margin-bottom: 1rem;\n}\n\n.hero-section p {\n  font-size: 1.2rem;\n  margin-bottom: 2rem;\n  opacity: 0.9;\n}\n\n.features-section h2 {\n  text-align: center;\n  margin-bottom: 2rem;\n  color: #343a40;\n}\n\n.features-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 2rem;\n  margin-top: 2rem;\n}\n\n.feature-card {\n  text-align: center;\n  transition: transform 0.3s ease;\n}\n\n.feature-card:hover {\n  transform: translateY(-5px);\n}\n\n.feature-card h3 {\n  color: #007bff;\n  margin-bottom: 1rem;\n}\n\n@media (max-width: 768px) {\n  .hero-section h1 {\n    font-size: 2rem;\n  }\n  \n  .hero-section {\n    padding: 2rem 1rem;\n  }\n}",
        "src/pages/HomePage.jsx": "import React from 'react';\nimport './HomePage.css';\n\nconst HomePage = () => {\n  return (\n    <div className=\"home-page\">\n      <div className=\"container\">\n        <div className=\"hero-section\">\n          <h1>مرحباً بك في {{ project_name }}</h1>\n          <p>تطبيق React احترافي تم إنشاؤه باستخدام أحدث التقنيات</p>\n          <button className=\"btn btn-primary\">ابدأ الآن</button>\n        </div>\n        \n        <div className=\"features-section\">\n          <h2>الميزات</h2>\n          <div className=\"features-grid\">\n            <div className=\"feature-card card\">\n              <h3>سريع</h3>\n              <p>تطبيق محسن للأداء العالي</p>\n            </div>\n            <div className=\"feature-card card\">\n              <h3>مرن</h3>\n              <p>قابل للتخصيص حسب احتياجاتك</p>\n            </div>\n            <div className=\"feature-card card\">\n              <h3>حديث</h3>\n              <p>يستخدم أحدث تقنيات React</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HomePage;"
      }
    },
    "vue": {
      "structure": "├── .gitignore\n├── README.md\n├── babel.config.js\n├── components/\n│   ├── component.vue\n│   └── page.vue\n├── jest.config.js\n├── package.json\n├── public/\n│   └── index.html\n├── src/\n│   ├── App.vue\n│   ├── main.js\n│   ├── router/\n│   │   └── index.js\n│   ├── store/\n│   │   └── index.js\n│   └── views/\n│       ├── AboutView.vue\n│       └── HomeView.vue\n├── template.yaml\n├── tests/\n│   └── unit/\n│       └── example.spec.js\n└── vue.config.js\n",
      "files": {
        ".gitignore": "# Logs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\npnpm-debug.log*\nlerna-debug.log*\n\n# Dependencies\nnode_modules\n.pnp\n.pnp.js\n\n# Build outputs\ndist\ndist-ssr\n*.local\n\n# Environment variables\n.env.local\n.env.*.local\n\n# IDE\n.vscode/\n.idea/\n*.suo\n*.ntvs*\n*.njsproj\n*.sln\n*.sw?\n\n# OS\n.DS_Store\nThumbs.db\n\n# Testing\ncoverage\n*.lcov\n\n# Cache\n.npm\n.eslintcache",
        "README.md": "# {{ project_name }}\n\nتطبيق Vue.js احترافي تم إنشاؤه باستخدام Project Template Generator.\n\n## البدء السريع\n\n### المتطلبات\n- Node.js (الإصدار 14 أو أحدث)\n- npm أو yarn\n\n### التثبيت\n```bash\nnpm install\n```\n\n### تشغيل التطبيق للتطوير\n```bash\nnpm run serve\n```\nسيتم فتح التطبيق في المتصفح على http://localhost:8080\n\n### البناء للإنتاج\n```bash\nnpm run build\n```\n\n### تشغيل الاختبارات\n```bash\nnpm run test:unit\n```\n\n### فحص الكود وإصلاحه\n```bash\nnpm run lint\n```\n\n## هيكل المشروع\n```\nsrc/\n├── components/     # المكونات القابلة لإعادة الاستخدام\n├── views/         # صفحات التطبيق\n├── router/        # إعدادات التوجيه\n├── store/         # إدارة الحالة العامة (Vuex)\n└── assets/        # ملفات ثابتة\n```\n\n## الميزات\n- ✅ Vue.js 3 مع Composition API\n- ✅ Vue Router للتنقل\n- ✅ Vuex لإدارة الحالة\n- ✅ هيكل مجلدات منظم\n- ✅ دعم متعدد اللغات\n- ✅ Responsive design\n- ✅ اختبارات جاهزة\n\n## التخصيص\n\n### إضافة مكونات جديدة\n```bash\n# إنشاء مكون جديد\nptg add component ComponentName\n```\n\n### إضافة صفحات جديدة  \n```bash\n# إنشاء صفحة جديدة\nptg add page PageName\n```\n\n## المساهمة\nنرحب بمساهماتكم! يرجى قراءة دليل المساهمة قبل البدء.\n\n## الترخيص\nMIT License",
        "babel.config.js": "module.exports = {\n  presets: [\n    '@vue/cli-plugin-babel/preset'\n  ]\n}",
        "jest.config.js": "module.exports = {\n  preset: '@vue/cli-plugin-unit-jest',\n  testMatch: [\n    '**/tests/unit/**/*.spec.(js|jsx|ts|tsx)|**/__tests__/*.(js|jsx|ts|tsx)'\n  ],\n  collectCoverageFrom: [\n    'src/**/*.{js,vue}',\n    '!src/main.js',\n    '!src/router/index.js',\n    '!**/node_modules/**'\n  ]\n}",
        "package.json": "{\n  \"name\": \"{{ project_name }}\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\",\n    \"test:unit\": \"vue-cli-service test:unit\",\n    \"lint\": \"vue-cli-service lint\"\n  },\n  \"dependencies\": {\n    \"vue\": \"^3.2.13\",\n    \"vue-router\": \"^4.0.3\",\n    \"vuex\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.12.16\",\n    \"@babel/eslint-parser\": \"^7.12.16\",\n    \"@vue/cli-plugin-babel\": \"~5.0.0\",\n    \"@vue/cli-plugin-eslint\": \"~5.0.0\",\n    \"@vue/cli-plugin-router\": \"~5.0.0\",\n    \"@vue/cli-plugin-unit-jest\": \"~5.0.0\",\n    \"@vue/cli-plugin-vuex\": \"~5.0.0\",\n    \"@vue/cli-service\": \"~5.0.0\",\n    \"@vue/test-utils\": \"^2.0.0-0\",\n    \"@vue/vue3-jest\": \"^27.0.0-alpha.1\",\n    \"babel-jest\": \"^27.0.6\",\n    \"eslint\": \"^7.32.0\",\n    \"eslint-plugin-vue\": \"^8.0.3\",\n    \"jest\": \"^27.0.5\"\n  },\n  \"browserslist\": [\n    \"> 1%\",\n    \"last 2 versions\",\n    \"not dead\",\n    \"not ie 11\"\n  ]\n}",
        "template.yaml": "name: \"javascript-vue\"\nversion: \"1.0.0\"\ndescription: \"قالب شامل لتطبيقات Vue.js الاحترافية\"\nlanguage: \"javascript\"\nframework: \"vue\"\n\nstructure:\n  directories:\n    - \"src\"\n    - \"src/components\"\n    - \"src/views\"\n    - \"src/router\"\n    - \"src/store\"\n    - \"src/services\"\n    - \"src/utils\"\n    - \"src/assets\"\n    - \"src/assets/css\"\n    - \"src/assets/images\"\n    - \"public\"\n    - \"tests\"\n    - \"docs\"\n\n  files:\n    - path: \"package.json\"\n      template: \"javascript/vue/package.json\"\n      type: \"template\"\n    \n    - path: \"src/main.js\"\n      template: \"javascript/vue/src/main.js\"\n      type: \"template\"\n    \n    - path: \"src/App.vue\"\n      template: \"javascript/vue/src/App.vue\"\n      type: \"template\"\n    \n    - path: \"README.md\"\n      template: \"javascript/vue/README.md\"\n      type: \"template\"\n\ncomponents:\n  component:\n    template: \"javascript/vue/components/component.vue\"\n    path: \"src/components/{{component_name|title}}.vue\"",
        "vue.config.js": "const { defineConfig } = require('@vue/cli-service')\nmodule.exports = defineConfig({\n  transpileDependencies: true,\n  \n  // Development server configuration\n  devServer: {\n    port: 8080,\n    open: true,\n    hot: true\n  },\n  \n  // Build configuration\n  outputDir: 'dist',\n  assetsDir: 'static',\n  \n  // CSS configuration\n  css: {\n    extract: process.env.NODE_ENV === 'production',\n    sourceMap: false\n  }\n})",
        "components/component.vue": "<template>\n  <div class=\"{{component_name|lower}}-component\">\n    <h3>مكون {{component_name|title}}</h3>\n    <p>مكون {{component_name|title}} جاهز للاستخدام.</p>\n    <slot></slot>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: '{{component_name|title}}',\n  props: {\n    // Add your props here\n  },\n  data() {\n    return {\n      // Add your data here\n    }\n  },\n  methods: {\n    // Add your methods here\n  }\n}\n</script>\n\n<style scoped>\n.{{component_name|lower}}-component {\n  padding: 1rem;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  margin: 1rem 0;\n}\n\n.{{component_name|lower}}-component h3 {\n  color: #2c3e50;\n  margin-bottom: 0.5rem;\n}\n</style>",
        "components/page.vue": "<template>\n  <div class=\"{{component_name|lower}}-page\">\n    <div class=\"container\">\n      <h1>صفحة {{component_name|title}}</h1>\n      <div class=\"card\">\n        <p>مرحباً بك في صفحة {{component_name|title}}.</p>\n        <p>يمكنك تخصيص هذه الصفحة حسب احتياجاتك.</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: '{{component_name|title}}Page',\n  data() {\n    return {\n      // Add your data here\n    }\n  },\n  created() {\n    // Component initialization\n  },\n  methods: {\n    // Add your methods here\n  }\n}\n</script>\n\n<style scoped>\n.{{component_name|lower}}-page {\n  padding: 2rem 0;\n}\n\n.{{component_name|lower}}-page h1 {\n  text-align: center;\n  color: #2c3e50;\n  margin-bottom: 2rem;\n}\n</style>",
        "public/index.html": "<!DOCTYPE html>\n<html lang=\"ar\" dir=\"rtl\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\n    <title>{{ project_name }} - Vue App</title>\n  </head>\n  <body>\n    <noscript>\n      <strong>يرجى تفعيل JavaScript لاستخدام هذا التطبيق.</strong>\n    </noscript>\n    <div id=\"app\"></div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>",
        "src/App.vue": "<template>\n  <div id=\"app\">\n    <nav class=\"navbar\">\n      <div class=\"container\">\n        <router-link to=\"/\" class=\"navbar-brand\">{{ project_name }}</router-link>\n        <div class=\"navbar-nav\">\n          <router-link to=\"/\" class=\"nav-link\">الرئيسية</router-link>\n          <router-link to=\"/about\" class=\"nav-link\">حول</router-link>\n        </div>\n      </div>\n    </nav>\n    \n    <main class=\"main-content\">\n      <router-view />\n    </main>\n    \n    <footer class=\"footer\">\n      <div class=\"container\">\n        <p>&copy; 2025 {{ project_name }}. جميع الحقوق محفوظة.</p>\n      </div>\n    </footer>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'App'\n}\n</script>\n\n<style>\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 20px;\n}\n\n.navbar {\n  background-color: #343a40;\n  padding: 1rem 0;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.navbar .container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.navbar-brand {\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: #fff;\n  text-decoration: none;\n}\n\n.navbar-nav {\n  display: flex;\n  gap: 2rem;\n}\n\n.nav-link {\n  color: #fff;\n  text-decoration: none;\n  padding: 0.5rem 1rem;\n  border-radius: 4px;\n  transition: background-color 0.3s ease;\n}\n\n.nav-link:hover,\n.nav-link.router-link-active {\n  background-color: #495057;\n}\n\n.main-content {\n  flex: 1;\n  padding: 2rem 0;\n}\n\n.footer {\n  background-color: #343a40;\n  color: #fff;\n  padding: 2rem 0;\n  text-align: center;\n}\n\n.btn {\n  padding: 10px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n  transition: all 0.3s ease;\n  display: inline-block;\n  text-decoration: none;\n}\n\n.btn-primary {\n  background-color: #007bff;\n  color: white;\n}\n\n.btn-primary:hover {\n  background-color: #0056b3;\n}\n\n.card {\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n  padding: 20px;\n  margin: 20px 0;\n}\n\n@media (max-width: 768px) {\n  .navbar .container {\n    flex-direction: column;\n    gap: 1rem;\n  }\n  \n  .navbar-nav {\n    gap: 1rem;\n  }\n}\n</style>",
        "src/main.js": "import { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n\ncreateApp(App).use(store).use(router).mount('#app')",
        "src/router/index.js": "import { createRouter, createWebHistory } from 'vue-router'\nimport HomeView from '../views/HomeView.vue'\n\nconst routes = [\n  {\n    path: '/',\n    name: 'Home',\n    component: HomeView\n  },\n  {\n    path: '/about',\n    name: 'About',\n    // route level code-splitting\n    // this generates a separate chunk (about.[hash].js) for this route\n    // which is lazy-loaded when the route is visited.\n    component: () => import(/* webpackChunkName: \"about\" */ '../views/AboutView.vue')\n  }\n]\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n})\n\nexport default router",
        "src/store/index.js": "import { createStore } from 'vuex'\n\nexport default createStore({\n  state: {\n    // Global state\n    appName: '{{ project_name }}',\n    user: null,\n    loading: false\n  },\n  getters: {\n    isLoggedIn: state => !!state.user,\n    appName: state => state.appName\n  },\n  mutations: {\n    SET_USER(state, user) {\n      state.user = user\n    },\n    SET_LOADING(state, loading) {\n      state.loading = loading\n    }\n  },\n  actions: {\n    login({ commit }, user) {\n      commit('SET_LOADING', true)\n      // Simulate API call\n      setTimeout(() => {\n        commit('SET_USER', user)\n        commit('SET_LOADING', false)\n      }, 1000)\n    },\n    logout({ commit }) {\n      commit('SET_USER', null)\n    }\n  },\n  modules: {\n    // Add modules here\n  }\n})",
        "src/views/AboutView.vue": "<template>\n  <div class=\"about\">\n    <div class=\"container\">\n      <h1>حول {{ $store.state.appName }}</h1>\n      <div class=\"about-content card\">\n        <p>\n          هذا التطبيق تم إنشاؤه باستخدام Project Template Generator،\n          أداة شاملة لإنشاء قوالب مشاريع احترافية.\n        </p>\n        <p>\n          يستخدم التطبيق أحدث تقنيات Vue.js لتوفير تجربة مستخدم ممتازة\n          وأداء عالي.\n        </p>\n      </div>\n      \n      <div class=\"tech-stack\">\n        <h2>التقنيات المستخدمة</h2>\n        <div class=\"tech-list\">\n          <div class=\"tech-item\" v-for=\"tech in technologies\" :key=\"tech\">\n            {{ tech }}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'AboutView',\n  data() {\n    return {\n      technologies: [\n        'Vue.js 3',\n        'Vue Router',\n        'Vuex',\n        'CSS3',\n        'Modern JavaScript'\n      ]\n    }\n  }\n}\n</script>\n\n<style scoped>\n.about h1 {\n  text-align: center;\n  color: #343a40;\n  margin-bottom: 2rem;\n}\n\n.about-content {\n  margin-bottom: 2rem;\n}\n\n.about-content p {\n  line-height: 1.6;\n  margin-bottom: 1rem;\n}\n\n.tech-stack h2 {\n  color: #007bff;\n  margin-bottom: 1rem;\n}\n\n.tech-list {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n}\n\n.tech-item {\n  background: #f8f9fa;\n  padding: 0.5rem 1rem;\n  border-radius: 5px;\n  border-left: 4px solid #007bff;\n}\n</style>",
        "src/views/HomeView.vue": "<template>\n  <div class=\"home\">\n    <div class=\"container\">\n      <div class=\"hero-section\">\n        <h1>مرحباً بك في {{ $store.state.appName }}</h1>\n        <p>تطبيق Vue.js احترافي تم إنشاؤه باستخدام أحدث التقنيات</p>\n        <button class=\"btn btn-primary\" @click=\"handleStart\">ابدأ الآن</button>\n      </div>\n      \n      <div class=\"features-section\">\n        <h2>الميزات</h2>\n        <div class=\"features-grid\">\n          <div class=\"feature-card card\" v-for=\"feature in features\" :key=\"feature.id\">\n            <h3>{{ feature.title }}</h3>\n            <p>{{ feature.description }}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HomeView',\n  data() {\n    return {\n      features: [\n        {\n          id: 1,\n          title: 'سريع',\n          description: 'تطبيق محسن للأداء العالي'\n        },\n        {\n          id: 2,\n          title: 'مرن',\n          description: 'قابل للتخصيص حسب احتياجاتك'\n        },\n        {\n          id: 3,\n          title: 'حديث',\n          description: 'يستخدم أحدث تقنيات Vue.js'\n        }\n      ]\n    }\n  },\n  methods: {\n    handleStart() {\n      alert('مرحباً! ابدأ في تطوير تطبيقك الآن.')\n    }\n  }\n}\n</script>\n\n<style scoped>\n.hero-section {\n  text-align: center;\n  padding: 4rem 2rem;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  border-radius: 10px;\n  margin-bottom: 3rem;\n}\n\n.hero-section h1 {\n  font-size: 3rem;\n  margin-bottom: 1rem;\n}\n\n.hero-section p {\n  font-size: 1.2rem;\n  margin-bottom: 2rem;\n  opacity: 0.9;\n}\n\n.features-section h2 {\n  text-align: center;\n  margin-bottom: 2rem;\n  color: #343a40;\n}\n\n.features-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 2rem;\n  margin-top: 2rem;\n}\n\n.feature-card {\n  text-align: center;\n  transition: transform 0.3s ease;\n}\n\n.feature-card:hover {\n  transform: translateY(-5px);\n}\n\n.feature-card h3 {\n  color: #007bff;\n  margin-bottom: 1rem;\n}\n\n@media (max-width: 768px) {\n  .hero-section h1 {\n    font-size: 2rem;\n  }\n  \n  .hero-section {\n    padding: 2rem 1rem;\n  }\n}\n</style>",
        "tests/unit/example.spec.js": "import { shallowMount } from '@vue/test-utils'\nimport HomeView from '@/views/HomeView.vue'\n\ndescribe('HomeView.vue', () => {\n  it('renders home page', () => {\n    const wrapper = shallowMount(HomeView)\n    expect(wrapper.exists()).toBe(true)\n  })\n  \n  it('displays welcome message', () => {\n    const wrapper = shallowMount(HomeView)\n    expect(wrapper.text()).toMatch('مرحباً بك')\n  })\n})"
      }
    }
  },
  "php": {
    "general": {
      "structure": "├── README.md\n├── components/\n│   ├── class.php\n│   └── interface.php\n├── composer.json\n├── gitignore\n├── index.php\n├── src/\n│   └── App.php\n└── template.yaml\n",
      "files": {
        "README.md": "# {{ project_name }}\n\nمشروع PHP عام تم إنشاؤه باستخدام Project Template Generator.\n\n## الميزات\n\n- ✅ **PHP 8+ Support** - دعم كامل لأحدث إصدارات PHP\n- ✅ **PSR-4 Autoloading** - تحميل تلقائي للفئات\n- ✅ **Composer Integration** - إدارة التبعيات\n- ✅ **Error Handling** - معالجة شاملة للأخطاء\n- ✅ **Code Quality Tools** - أدوات فحص وتحليل الكود\n- ✅ **Unit Testing** - اختبارات الوحدة مع PHPUnit\n- ✅ **Logging** - نظام تسجيل متقدم\n\n## متطلبات النظام\n\n- PHP 8.0 أو أحدث\n- Composer\n- ext-json\n\n## التثبيت\n\n### 1. تحميل التبعيات\n```bash\ncomposer install\n```\n\n### 2. تشغيل التطبيق\n```bash\n# تشغيل مباشر\nphp index.php\n\n# أو باستخدام Composer\ncomposer start\n```\n\n## هيكل المشروع\n\n```\n├── src/                   # الكود المصدري\n│   └── App.php           # فئة التطبيق الرئيسية\n├── tests/                # الاختبارات\n├── docs/                 # التوثيق\n├── config/               # ملفات الإعدادات\n├── index.php             # نقطة دخول التطبيق\n├── composer.json         # إعدادات Composer\n└── README.md             # هذا الملف\n```\n\n## الاستخدام\n\n### مثال أساسي\n```php\n<?php\n\nrequire_once 'vendor/autoload.php';\n\nuse App\\App;\n\n$app = new App();\n$app->run();\n```\n\n### إضافة فئة جديدة\n```php\n<?php\n\nnamespace App;\n\nclass NewClass\n{\n    public function doSomething(): string\n    {\n        return 'مرحباً من الفئة الجديدة!';\n    }\n}\n```\n\n## الاختبار\n\n### تشغيل الاختبارات\n```bash\n# تشغيل جميع الاختبارات\ncomposer test\n\n# تشغيل مع تقرير التغطية\ncomposer test:coverage\n```\n\n### إضافة اختبار جديد\n```php\n<?php\n\nuse PHPUnit\\Framework\\TestCase;\nuse App\\App;\n\nclass AppTest extends TestCase\n{\n    public function testAppCanBeInstantiated(): void\n    {\n        $app = new App();\n        $this->assertInstanceOf(App::class, $app);\n    }\n}\n```\n\n## فحص جودة الكود\n\n### فحص معايير الكود\n```bash\n# فحص الكود\ncomposer lint\n\n# إصلاح مشاكل الكود\ncomposer lint:fix\n```\n\n### تحليل ثابت للكود\n```bash\ncomposer analyze\n```\n\n## إضافة المكونات\n\n### إضافة فئة جديدة\n```bash\nptg add class ClassName\n```\n\n### إضافة interface جديد\n```bash\nptg add interface InterfaceName\n```\n\n## التطوير\n\n### قواعد الكود\n- اتبع معايير PSR-12\n- استخدم Type Declarations\n- أضف PHPDoc comments\n- اكتب اختبارات للميزات الجديدة\n\n### مثال فئة كاملة\n```php\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App;\n\n/**\n * فئة مثال تُظهر أفضل الممارسات\n */\nclass ExampleClass\n{\n    private string $name;\n    private array $data;\n\n    public function __construct(string $name)\n    {\n        $this->name = $name;\n        $this->data = [];\n    }\n\n    /**\n     * إضافة بيانات\n     */\n    public function addData(string $key, mixed $value): self\n    {\n        $this->data[$key] = $value;\n        return $this;\n    }\n\n    /**\n     * الحصول على البيانات\n     */\n    public function getData(): array\n    {\n        return $this->data;\n    }\n\n    /**\n     * الحصول على الاسم\n     */\n    public function getName(): string\n    {\n        return $this->name;\n    }\n}\n```\n\n## سطر الأوامر\n\n### تشغيل مع معاملات\n```bash\nphp index.php --help\nphp index.php --version\nphp index.php --config=production\n```\n\n### معالجة المعاملات\n```php\n// في App.php\nprivate function processArguments(): void\n{\n    global $argv;\n    \n    if (isset($argv[1])) {\n        switch ($argv[1]) {\n            case '--help':\n                $this->showHelp();\n                break;\n            case '--version':\n                $this->showVersion();\n                break;\n            default:\n                echo \"معامل غير معروف: {$argv[1]}\\n\";\n        }\n    }\n}\n```\n\n## إدارة الأخطاء\n\n### تسجيل الأخطاء\n```php\nuse Monolog\\Logger;\nuse Monolog\\Handler\\StreamHandler;\n\n$logger = new Logger('app');\n$logger->pushHandler(new StreamHandler('app.log', Logger::WARNING));\n\n$logger->warning('هذا تحذير');\n$logger->error('هذا خطأ');\n```\n\n### معالجة الاستثناءات\n```php\ntry {\n    // كود قد ينتج استثناء\n    throw new Exception('خطأ مثال');\n} catch (Exception $e) {\n    echo \"تم اكتشاف خطأ: \" . $e->getMessage();\n}\n```\n\n## التحسين\n\n### تحسين Autoloader\n```bash\ncomposer dump-autoload --optimize\n```\n\n### تحسين للإنتاج\n```bash\ncomposer install --no-dev --optimize-autoloader\n```\n\n## المساهمة\n\nنرحب بمساهماتكم! يرجى:\n1. Fork المشروع\n2. إنشاء branch للميزة الجديدة\n3. Commit التغييرات\n4. Push إلى branch\n5. إنشاء Pull Request\n\n## الترخيص\n\nMIT License\n\n---\n\n**تم إنشاء هذا المشروع باستخدام Project Template Generator**",
        "composer.json": "{\n    \"name\": \"{{ project_name|lower|replace(' ', '-') }}/php-project\",\n    \"description\": \"PHP project created with Project Template Generator\",\n    \"type\": \"project\",\n    \"license\": \"MIT\",\n    \"autoload\": {\n        \"psr-4\": {\n            \"App\\\\\": \"src/\"\n        }\n    },\n    \"require\": {\n        \"php\": \">=8.0\",\n        \"ext-json\": \"*\",\n        \"monolog/monolog\": \"^3.0\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^10.0\",\n        \"squizlabs/php_codesniffer\": \"^3.7\",\n        \"phpstan/phpstan\": \"^1.9\"\n    },\n    \"scripts\": {\n        \"start\": \"php index.php\",\n        \"test\": \"phpunit\",\n        \"test:coverage\": \"phpunit --coverage-html coverage\",\n        \"lint\": \"phpcs --standard=PSR12 src/\",\n        \"lint:fix\": \"phpcbf --standard=PSR12 src/\",\n        \"analyze\": \"phpstan analyse src/ --level=8\"\n    },\n    \"config\": {\n        \"optimize-autoloader\": true,\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true\n    }\n}",
        "gitignore": "# Composer\n/vendor/\ncomposer.phar\ncomposer.lock\n\n# Logs\n*.log\nlogs/\n\n# Runtime data\n*.pid\n*.seed\n\n# Coverage\ncoverage/\n.phpunit.result.cache\n\n# IDE\n.vscode/\n.idea/\n*.sublime-project\n*.sublime-workspace\n\n# OS\n.DS_Store\nThumbs.db\n*.tmp\n*.bak\n\n# Application specific\nconfig/local.php\nconfig/production.php\n.env\n.env.local\n\n# Cache\ncache/\ntemp/\n\n# Build\nbuild/\ndist/",
        "index.php": "<?php\n/**\n * {{ project_name }} - Entry Point\n * \n * نقطة دخول التطبيق الرئيسية\n */\n\ndeclare(strict_types=1);\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse App\\App;\n\ntry {\n    echo \"🚀 بدء تشغيل {{ project_name }}\\n\";\n    \n    $app = new App();\n    $app->run();\n    \n    echo \"✅ تم تشغيل التطبيق بنجاح\\n\";\n    \n} catch (Throwable $e) {\n    echo \"❌ خطأ: \" . $e->getMessage() . \"\\n\";\n    echo \"📍 الملف: \" . $e->getFile() . \" (السطر \" . $e->getLine() . \")\\n\";\n    \n    if (php_sapi_name() === 'cli') {\n        exit(1);\n    }\n}",
        "template.yaml": "name: \"php-general\"\nversion: \"1.0.0\"\ndescription: \"قالب شامل لمشاريع PHP العامة\"\nlanguage: \"php\"\nframework: \"general\"\n\nstructure:\n  directories:\n    - \"src\"\n    - \"tests\"\n    - \"docs\"\n    - \"config\"\n\n  files:\n    - path: \"composer.json\"\n      template: \"php/general/composer.json\"\n      type: \"template\"\n    \n    - path: \"index.php\"\n      template: \"php/general/index.php\"\n      type: \"template\"\n      \n    - path: \"src/App.php\"\n      template: \"php/general/src/App.php\"\n      type: \"template\"\n    \n    - path: \"README.md\"\n      template: \"php/general/README.md\"\n      type: \"template\"\n      \n    - path: \".gitignore\"\n      template: \"php/general/gitignore\"\n      type: \"template\"\n\ncomponents:\n  class:\n    template: \"php/general/components/class.php\"\n    path: \"src/{{component_name|title}}.php\"\n  \n  interface:\n    template: \"php/general/components/interface.php\"\n    path: \"src/Interfaces/{{component_name|title}}Interface.php\"",
        "components/class.php": "<?php\n\ndeclare(strict_types=1);\n\nnamespace App;\n\n/**\n * فئة {{component_name|title}}\n * \n * وصف الفئة: {{component_name|title}}\n */\nclass {{component_name|title}}\n{\n    private string $name;\n    private array $properties;\n    private bool $initialized;\n\n    /**\n     * منشئ الفئة\n     */\n    public function __construct(string $name = '{{component_name|title}}')\n    {\n        $this->name = $name;\n        $this->properties = [];\n        $this->initialized = false;\n        \n        $this->initialize();\n    }\n\n    /**\n     * تهيئة الفئة\n     */\n    private function initialize(): void\n    {\n        // منطق التهيئة هنا\n        $this->properties = [\n            'created_at' => date('Y-m-d H:i:s'),\n            'version' => '1.0.0'\n        ];\n        \n        $this->initialized = true;\n    }\n\n    /**\n     * الحصول على الاسم\n     */\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    /**\n     * تعيين الاسم\n     */\n    public function setName(string $name): self\n    {\n        $this->name = $name;\n        return $this;\n    }\n\n    /**\n     * إضافة خاصية\n     */\n    public function setProperty(string $key, mixed $value): self\n    {\n        $this->properties[$key] = $value;\n        return $this;\n    }\n\n    /**\n     * الحصول على خاصية\n     */\n    public function getProperty(string $key): mixed\n    {\n        return $this->properties[$key] ?? null;\n    }\n\n    /**\n     * الحصول على جميع الخصائص\n     */\n    public function getProperties(): array\n    {\n        return $this->properties;\n    }\n\n    /**\n     * التحقق من التهيئة\n     */\n    public function isInitialized(): bool\n    {\n        return $this->initialized;\n    }\n\n    /**\n     * تنفيذ عملية\n     */\n    public function execute(): string\n    {\n        if (!$this->initialized) {\n            throw new \\RuntimeException('الفئة غير مهيأة');\n        }\n\n        // منطق العملية هنا\n        return \"تم تنفيذ {$this->name} بنجاح\";\n    }\n\n    /**\n     * الحصول على معلومات الفئة\n     */\n    public function getInfo(): array\n    {\n        return [\n            'name' => $this->name,\n            'initialized' => $this->initialized,\n            'properties' => $this->properties\n        ];\n    }\n\n    /**\n     * تحويل إلى نص\n     */\n    public function __toString(): string\n    {\n        return $this->name . ' (مهيأة: ' . ($this->initialized ? 'نعم' : 'لا') . ')';\n    }\n}",
        "components/interface.php": "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Interfaces;\n\n/**\n * واجهة {{component_name|title}}\n * \n * تعريف العمليات الأساسية للـ {{component_name|title}}\n */\ninterface {{component_name|title}}Interface\n{\n    /**\n     * تهيئة المكون\n     */\n    public function initialize(): void;\n\n    /**\n     * تنفيذ العملية الرئيسية\n     */\n    public function execute(): mixed;\n\n    /**\n     * الحصول على حالة المكون\n     */\n    public function getStatus(): array;\n\n    /**\n     * التحقق من صحة البيانات\n     */\n    public function validate(array $data): bool;\n\n    /**\n     * تنظيف الموارد\n     */\n    public function cleanup(): void;\n}",
        "src/App.php": "<?php\n\ndeclare(strict_types=1);\n\nnamespace App;\n\n/**\n * فئة التطبيق الرئيسية\n */\nclass App\n{\n    private string $name;\n    private string $version;\n    private array $config;\n\n    public function __construct()\n    {\n        $this->name = '{{ project_name }}';\n        $this->version = '1.0.0';\n        $this->config = [];\n        \n        $this->initialize();\n    }\n\n    /**\n     * تشغيل التطبيق\n     */\n    public function run(): void\n    {\n        echo \"مرحباً من {$this->name} v{$this->version}!\\n\";\n        \n        // منطق التطبيق الرئيسي هنا\n        $this->processArguments();\n        $this->execute();\n    }\n\n    /**\n     * تهيئة التطبيق\n     */\n    private function initialize(): void\n    {\n        // تحميل الإعدادات الافتراضية\n        $this->config = [\n            'debug' => true,\n            'timezone' => 'UTC',\n            'locale' => 'ar'\n        ];\n\n        // تعيين المنطقة الزمنية\n        date_default_timezone_set($this->config['timezone']);\n        \n        // تعيين معالج الأخطاء\n        set_error_handler([$this, 'handleError']);\n        set_exception_handler([$this, 'handleException']);\n    }\n\n    /**\n     * معالجة arguments سطر الأوامر\n     */\n    private function processArguments(): void\n    {\n        global $argv;\n        \n        if (php_sapi_name() === 'cli' && isset($argv)) {\n            echo \"📝 معاملات سطر الأوامر: \" . implode(' ', array_slice($argv, 1)) . \"\\n\";\n        }\n    }\n\n    /**\n     * تنفيذ منطق التطبيق\n     */\n    private function execute(): void\n    {\n        echo \"🔄 تنفيذ منطق التطبيق...\\n\";\n        \n        // إضافة منطق التطبيق هنا\n        $this->displayStatus();\n        $this->performTasks();\n    }\n\n    /**\n     * عرض حالة التطبيق\n     */\n    private function displayStatus(): void\n    {\n        echo \"📊 حالة التطبيق:\\n\";\n        echo \"  - الاسم: {$this->name}\\n\";\n        echo \"  - الإصدار: {$this->version}\\n\";\n        echo \"  - الوقت: \" . date('Y-m-d H:i:s') . \"\\n\";\n        echo \"  - الذاكرة: \" . $this->formatBytes(memory_get_usage()) . \"\\n\";\n    }\n\n    /**\n     * تنفيذ المهام\n     */\n    private function performTasks(): void\n    {\n        $tasks = [\n            'التحقق من النظام',\n            'تحميل البيانات',\n            'معالجة الطلبات',\n            'حفظ النتائج'\n        ];\n\n        foreach ($tasks as $i => $task) {\n            echo \"⏳ \" . ($i + 1) . \". {$task}...\\n\";\n            \n            // محاكاة عمل\n            usleep(500000); // 0.5 ثانية\n            \n            echo \"✅ تم إنجاز: {$task}\\n\";\n        }\n    }\n\n    /**\n     * تنسيق حجم البايتات\n     */\n    private function formatBytes(int $bytes, int $precision = 2): string\n    {\n        $units = ['B', 'KB', 'MB', 'GB'];\n        $bytes = max($bytes, 0);\n        $pow = floor(($bytes ? log($bytes) : 0) / log(1024));\n        $pow = min($pow, count($units) - 1);\n        \n        $bytes /= pow(1024, $pow);\n        \n        return round($bytes, $precision) . ' ' . $units[$pow];\n    }\n\n    /**\n     * معالج الأخطاء\n     */\n    public function handleError(int $severity, string $message, string $file, int $line): bool\n    {\n        if (!(error_reporting() & $severity)) {\n            return false;\n        }\n\n        echo \"⚠️ خطأ PHP: {$message} في {$file} السطر {$line}\\n\";\n        return true;\n    }\n\n    /**\n     * معالج الاستثناءات\n     */\n    public function handleException(Throwable $exception): void\n    {\n        echo \"💥 استثناء غير معالج: \" . $exception->getMessage() . \"\\n\";\n        echo \"📍 الملف: \" . $exception->getFile() . \" السطر: \" . $exception->getLine() . \"\\n\";\n        \n        if ($this->config['debug']) {\n            echo \"📚 التتبع:\\n\" . $exception->getTraceAsString() . \"\\n\";\n        }\n    }\n\n    /**\n     * الحصول على معلومات التطبيق\n     */\n    public function getInfo(): array\n    {\n        return [\n            'name' => $this->name,\n            'version' => $this->version,\n            'config' => $this->config\n        ];\n    }\n\n    /**\n     * تحديث الإعدادات\n     */\n    public function setConfig(array $config): void\n    {\n        $this->config = array_merge($this->config, $config);\n    }\n}"
      }
    },
    "mvc": {
      "structure": "├── .env.example\n├── README.md\n├── composer.json\n├── public/\n│   ├── .htaccess\n│   └── index.php\n├── src/\n│   ├── Controllers/\n│   │   ├── BaseController.php\n│   │   ├── HomeController.php\n│   │   └── UserController.php\n│   ├── Core/\n│   │   ├── Application.php\n│   │   ├── Config.php\n│   │   ├── Database.php\n│   │   └── Router.php\n│   ├── Models/\n│   │   ├── BaseModel.php\n│   │   └── User.php\n│   └── Views/\n│       ├── home/\n│       │   └── index.php\n│       └── layout.php\n└── template.yaml\n",
      "files": {
        ".env.example": "# Application Configuration\nAPP_NAME=\"{{ project_name }}\"\nAPP_ENV=development\nAPP_DEBUG=true\nAPP_TIMEZONE=UTC\nAPP_LOCALE=ar\n\n# Database Configuration\nDB_HOST=localhost\nDB_PORT=3306\nDB_DATABASE={{ project_name|lower|replace(' ', '_') }}_db\nDB_USERNAME=root\nDB_PASSWORD=\n\n# Database Connection Settings\nDB_CHARSET=utf8mb4\nDB_COLLATION=utf8mb4_unicode_ci\n\n# Session Configuration\nSESSION_NAME={{ project_name|lower|replace(' ', '_') }}_session\nSESSION_LIFETIME=7200\nSESSION_PATH=/\nSESSION_DOMAIN=\nSESSION_SECURE=false\nSESSION_HTTPONLY=true\n\n# Cache Configuration\nCACHE_DRIVER=file\nCACHE_PATH=storage/cache\nCACHE_TTL=3600\n\n# Logging Configuration\nLOG_LEVEL=info\nLOG_PATH=storage/logs\nLOG_MAX_FILES=30\n\n# Mail Configuration (Optional)\nMAIL_DRIVER=smtp\nMAIL_HOST=localhost\nMAIL_PORT=587\nMAIL_USERNAME=\nMAIL_PASSWORD=\nMAIL_ENCRYPTION=tls\nMAIL_FROM_ADDRESS=noreply@{{ project_name|lower|replace(' ', '') }}.com\nMAIL_FROM_NAME=\"{{ project_name }}\"\n\n# Security Settings\nHASH_ALGO=bcrypt\nHASH_COST=12\n\n# File Upload Settings\nUPLOAD_MAX_SIZE=10485760\nUPLOAD_ALLOWED_TYPES=jpg,jpeg,png,gif,pdf,doc,docx\nUPLOAD_PATH=storage/uploads\n\n# API Settings (if applicable)\nAPI_RATE_LIMIT=60\nAPI_RATE_WINDOW=3600\n\n# Third-party Services (Optional)\n# GOOGLE_ANALYTICS_ID=\n# FACEBOOK_PIXEL_ID=\n# RECAPTCHA_SITE_KEY=\n# RECAPTCHA_SECRET_KEY=",
        "README.md": "# {{ project_name }}\n\nتطبيق PHP MVC احترافي تم إنشاؤه باستخدام Project Template Generator.\n\n## الميزات\n\n- ✅ **PHP 8+ Support** - دعم كامل لأحدث إصدارات PHP\n- ✅ **MVC Architecture** - تصميم معماري منظم وقابل للصيانة\n- ✅ **PSR-4 Autoloading** - تحميل تلقائي للفئات\n- ✅ **Database Integration** - اتصال آمن ومحسن مع قواعد البيانات\n- ✅ **Router System** - نظام توجيه مرن وقوي\n- ✅ **Template Engine** - محرك قوالب سهل الاستخدام\n- ✅ **Error Handling** - معالجة شاملة للأخطاء\n- ✅ **Security Headers** - حماية متقدمة للتطبيق\n- ✅ **Environment Configuration** - إدارة إعدادات البيئة\n- ✅ **Database Migrations** - إدارة هيكل قاعدة البيانات\n\n## متطلبات النظام\n\n- PHP 8.0 أو أحدث\n- MySQL 5.7+ أو MariaDB 10.3+\n- Apache أو Nginx\n- Composer\n- mod_rewrite (للـ Apache)\n\n## التثبيت\n\n### 1. تحميل التبعيات\n```bash\ncomposer install\n```\n\n### 2. إعداد البيئة\n```bash\n# نسخ ملف البيئة\ncp .env.example .env\n\n# تعديل إعدادات قاعدة البيانات\nnano .env\n```\n\n### 3. إعداد قاعدة البيانات\n```sql\n-- إنشاء قاعدة البيانات\nCREATE DATABASE {{ project_name|lower|replace(' ', '_') }}_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- إنشاء مستخدم (اختياري)\nCREATE USER '{{ project_name|lower|replace(' ', '_') }}_user'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON {{ project_name|lower|replace(' ', '_') }}_db.* TO '{{ project_name|lower|replace(' ', '_') }}_user'@'localhost';\nFLUSH PRIVILEGES;\n```\n\n### 4. إعداد صلاحيات الملفات\n```bash\n# إنشاء مجلدات التخزين\nmkdir -p storage/logs storage/cache storage/uploads\n\n# تعيين الصلاحيات\nchmod -R 755 storage/\nchmod -R 755 public/\n```\n\n### 5. إعداد Virtual Host\n\n#### Apache (.htaccess موجود بالفعل)\n```apache\n<VirtualHost *:80>\n    ServerName {{ project_name|lower|replace(' ', '-') }}.local\n    DocumentRoot /path/to/project/public\n    \n    <Directory /path/to/project/public>\n        AllowOverride All\n        Require all granted\n    </Directory>\n</VirtualHost>\n```\n\n#### Nginx\n```nginx\nserver {\n    listen 80;\n    server_name {{ project_name|lower|replace(' ', '-') }}.local;\n    root /path/to/project/public;\n    index index.php;\n\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_pass unix:/var/run/php/php8.0-fpm.sock;\n        fastcgi_index index.php;\n        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\n        include fastcgi_params;\n    }\n}\n```\n\n## هيكل المشروع\n\n```\n├── public/                 # الملفات العامة\n│   ├── index.php          # نقطة دخول التطبيق\n│   ├── .htaccess          # إعدادات Apache\n│   └── assets/            # CSS, JS, Images\n├── src/                   # الكود المصدري\n│   ├── Controllers/       # Controllers\n│   ├── Models/           # Models\n│   ├── Views/            # Templates\n│   └── Core/             # فئات النظام الأساسية\n├── storage/              # التخزين المحلي\n│   ├── logs/            # ملفات السجلات\n│   ├── cache/           # الكاش\n│   └── uploads/         # الملفات المرفوعة\n├── tests/               # الاختبارات\n├── composer.json        # تبعيات Composer\n├── .env.example        # مثال إعدادات البيئة\n└── README.md           # هذا الملف\n```\n\n## الاستخدام\n\n### تشغيل الخادم المحلي\n```bash\n# باستخدام PHP Built-in Server\ncomposer serve\n\n# أو مباشرة\nphp -S localhost:8000 -t public/\n```\n\n### إضافة المسارات\n```php\n// في src/Core/Application.php\n$this->router->get('/new-route', 'NewController@method');\n$this->router->post('/api/data', 'ApiController@store');\n```\n\n### إنشاء Controller جديد\n```php\n<?php\n\nnamespace App\\Controllers;\n\nclass NewController extends BaseController\n{\n    public function index(): void\n    {\n        $data = ['title' => 'صفحة جديدة'];\n        $this->view('new/index', $data);\n    }\n}\n```\n\n### إنشاء Model جديد\n```php\n<?php\n\nnamespace App\\Models;\n\nclass Product extends BaseModel\n{\n    protected string $table = 'products';\n    \n    protected array $fillable = [\n        'name', 'description', 'price'\n    ];\n}\n```\n\n## قاعدة البيانات\n\n### إنشاء جدول المستخدمين\n```php\n// في أي controller أو script\n$userModel = new App\\Models\\User($database);\n$userModel->createTable();\n```\n\n### استخدام Model\n```php\n// في Controller\n$users = $this->userModel->getAll();\n$user = $this->userModel->findById(1);\n$userId = $this->userModel->create($data);\n$this->userModel->update($id, $data);\n$this->userModel->delete($id);\n```\n\n## API Endpoints\n\n### الأساسية\n- `GET /` - الصفحة الرئيسية\n- `GET /about` - صفحة حول\n- `GET /contact` - صفحة الاتصال\n\n### المستخدمين\n- `GET /users` - قائمة المستخدمين\n- `GET /users/show/{id}` - عرض مستخدم محدد\n- `POST /users` - إنشاء مستخدم جديد\n- `PUT /users/{id}` - تحديث مستخدم\n- `DELETE /users/{id}` - حذف مستخدم\n\n## الاختبار\n\n### إعداد PHPUnit\n```bash\n# تشغيل الاختبارات\ncomposer test\n\n# تشغيل مع تقرير التغطية\ncomposer test:coverage\n```\n\n### فحص الكود\n```bash\n# فحص معايير الكود\ncomposer lint\n\n# إصلاح مشاكل الكود\ncomposer lint:fix\n\n# تحليل ثابت للكود\ncomposer analyze\n```\n\n## الأمان\n\n### Headers الأمان\nالتطبيق يستخدم headers أمان متقدمة:\n- `X-Content-Type-Options: nosniff`\n- `X-Frame-Options: DENY`\n- `X-XSS-Protection: 1; mode=block`\n- `Strict-Transport-Security`\n\n### حماية قاعدة البيانات\n- استخدام Prepared Statements\n- التحقق من صحة البيانات\n- تشفير كلمات المرور\n\n### حماية الملفات\n- حماية الملفات الحساسة (.env, composer.json)\n- صلاحيات ملفات محددة\n- منع الوصول المباشر للملفات\n\n## إضافة المكونات\n\n### إضافة Controller جديد\n```bash\nptg add controller ControllerName\n```\n\n### إضافة Model جديد\n```bash\nptg add model ModelName\n```\n\n### إضافة View جديد\n```bash\nptg add view ViewName\n```\n\n## التطوير\n\n### قواعد الكود\n- اتبع معايير PSR-12\n- استخدم Type Declarations\n- أضف PHPDoc comments\n- اكتب اختبارات للميزات الجديدة\n\n### البيئات\n\n#### بيئة التطوير\n```bash\nAPP_ENV=development\nAPP_DEBUG=true\n```\n\n#### بيئة الإنتاج\n```bash\nAPP_ENV=production\nAPP_DEBUG=false\n```\n\n## النشر\n\n### متطلبات الإنتاج\n1. تعيين `APP_DEBUG=false`\n2. استخدام HTTPS\n3. إعداد Caching\n4. ضغط الملفات\n5. مراقبة الأداء\n\n### تحسين الأداء\n```bash\n# تحسين Composer للإنتاج\ncomposer install --no-dev --optimize-autoloader\n\n# تفعيل OPcache في php.ini\nopcache.enable=1\nopcache.memory_consumption=128\nopcache.max_accelerated_files=4000\n```\n\n## المساهمة\n\nنرحب بمساهماتكم! يرجى:\n1. Fork المشروع\n2. إنشاء branch للميزة الجديدة\n3. Commit التغييرات\n4. Push إلى branch\n5. إنشاء Pull Request\n\n## الدعم\n\n### مشاكل شائعة\n\n#### خطأ 500\n- تحقق من ملفات السجل في `storage/logs/`\n- تأكد من صلاحيات الملفات\n- تحقق من إعدادات قاعدة البيانات\n\n#### خطأ 404\n- تأكد من إعداد URL Rewriting\n- تحقق من ملف `.htaccess`\n- تأكد من إعداد Virtual Host\n\n## الترخيص\n\nMIT License\n\n---\n\n**تم إنشاء هذا المشروع باستخدام Project Template Generator**",
        "composer.json": "{\n    \"name\": \"{{ project_name|lower|replace(' ', '-') }}/mvc-app\",\n    \"description\": \"PHP MVC application created with Project Template Generator\",\n    \"type\": \"project\",\n    \"license\": \"MIT\",\n    \"autoload\": {\n        \"psr-4\": {\n            \"App\\\\\": \"src/\"\n        }\n    },\n    \"require\": {\n        \"php\": \">=8.0\",\n        \"ext-pdo\": \"*\",\n        \"ext-json\": \"*\",\n        \"vlucas/phpdotenv\": \"^5.4\",\n        \"monolog/monolog\": \"^3.0\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^10.0\",\n        \"squizlabs/php_codesniffer\": \"^3.7\",\n        \"phpstan/phpstan\": \"^1.9\"\n    },\n    \"scripts\": {\n        \"test\": \"phpunit\",\n        \"test:coverage\": \"phpunit --coverage-html coverage\",\n        \"lint\": \"phpcs --standard=PSR12 src/\",\n        \"lint:fix\": \"phpcbf --standard=PSR12 src/\",\n        \"analyze\": \"phpstan analyse src/ --level=8\",\n        \"serve\": \"php -S localhost:8000 -t public/\"\n    },\n    \"config\": {\n        \"optimize-autoloader\": true,\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true\n    }\n}",
        "template.yaml": "name: \"php-mvc\"\nversion: \"1.0.0\"\ndescription: \"قالب شامل لتطبيقات PHP بنمط MVC\"\nlanguage: \"php\"\nframework: \"mvc\"\n\nstructure:\n  directories:\n    - \"src\"\n    - \"src/Controllers\"\n    - \"src/Models\"\n    - \"src/Views\"\n    - \"src/Core\"\n    - \"src/Middleware\"\n    - \"src/Services\"\n    - \"src/Utils\"\n    - \"public\"\n    - \"config\"\n    - \"storage\"\n    - \"storage/logs\"\n    - \"storage/cache\"\n    - \"tests\"\n    - \"docs\"\n\n  files:\n    - path: \"public/index.php\"\n      template: \"php/mvc/public/index.php\"\n      type: \"template\"\n    \n    - path: \"composer.json\"\n      template: \"php/mvc/composer.json\"\n      type: \"template\"\n    \n    - path: \"README.md\"\n      template: \"php/mvc/README.md\"\n      type: \"template\"\n\ncomponents:\n  controller:\n    template: \"php/mvc/components/controller.php\"\n    path: \"src/Controllers/{{component_name|title}}Controller.php\"\n  \n  model:\n    template: \"php/mvc/components/model.php\"\n    path: \"src/Models/{{component_name|title}}.php\"\n  \n  view:\n    template: \"php/mvc/components/view.php\"\n    path: \"src/Views/{{component_name|lower}}/index.php\"",
        "public/.htaccess": "# تفعيل Rewrite Engine\nRewriteEngine On\n\n# منع الوصول للملفات الحساسة\nRewriteRule ^(.*/)?\\.env$ - [F,L]\nRewriteRule ^(.*/)?composer\\.(json|lock)$ - [F,L]\nRewriteRule ^(.*/)?package\\.json$ - [F,L]\n\n# توجيه جميع الطلبات لـ index.php\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^(.*)$ index.php [QSA,L]\n\n# إعدادات الأمان\n<IfModule mod_headers.c>\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options DENY\n    Header always set X-XSS-Protection \"1; mode=block\"\n    Header always set Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\"\n    Header always set Referrer-Policy \"strict-origin-when-cross-origin\"\n</IfModule>\n\n# ضغط الملفات\n<IfModule mod_deflate.c>\n    AddOutputFilterByType DEFLATE text/plain\n    AddOutputFilterByType DEFLATE text/html\n    AddOutputFilterByType DEFLATE text/xml\n    AddOutputFilterByType DEFLATE text/css\n    AddOutputFilterByType DEFLATE application/xml\n    AddOutputFilterByType DEFLATE application/xhtml+xml\n    AddOutputFilterByType DEFLATE application/rss+xml\n    AddOutputFilterByType DEFLATE application/javascript\n    AddOutputFilterByType DEFLATE application/x-javascript\n</IfModule>\n\n# إعدادات الكاش\n<IfModule mod_expires.c>\n    ExpiresActive on\n    ExpiresByType text/css \"access plus 1 year\"\n    ExpiresByType application/javascript \"access plus 1 year\"\n    ExpiresByType image/png \"access plus 1 year\"\n    ExpiresByType image/jpg \"access plus 1 year\"\n    ExpiresByType image/jpeg \"access plus 1 year\"\n    ExpiresByType image/gif \"access plus 1 year\"\n    ExpiresByType image/ico \"access plus 1 year\"\n    ExpiresByType image/icon \"access plus 1 year\"\n    ExpiresByType image/x-icon \"access plus 1 year\"\n</IfModule>",
        "public/index.php": "<?php\n/**\n * {{ project_name }} - Front Controller\n * \n * نقطة دخول التطبيق الرئيسية\n */\n\ndeclare(strict_types=1);\n\n// تحديد الوقت وإعدادات الخطأ\nini_set('display_errors', '1');\nini_set('display_startup_errors', '1');\nerror_reporting(E_ALL);\n\n// تحديد المسارات\ndefine('ROOT_PATH', dirname(__DIR__));\ndefine('APP_PATH', ROOT_PATH . '/src');\ndefine('PUBLIC_PATH', __DIR__);\ndefine('STORAGE_PATH', ROOT_PATH . '/storage');\n\n// تحميل Composer autoloader\nrequire_once ROOT_PATH . '/vendor/autoload.php';\n\n// تحميل متغيرات البيئة\n$dotenv = Dotenv\\Dotenv::createImmutable(ROOT_PATH);\n$dotenv->safeLoad();\n\n// تحديد البيئة\ndefine('APP_ENV', $_ENV['APP_ENV'] ?? 'development');\ndefine('APP_DEBUG', filter_var($_ENV['APP_DEBUG'] ?? true, FILTER_VALIDATE_BOOLEAN));\n\n// إعداد معالجة الأخطاء\nif (APP_DEBUG) {\n    ini_set('display_errors', '1');\n    error_reporting(E_ALL);\n} else {\n    ini_set('display_errors', '0');\n    error_reporting(0);\n}\n\n// تشغيل التطبيق\ntry {\n    $app = new App\\Core\\Application();\n    $app->run();\n} catch (Throwable $e) {\n    // معالجة الأخطاء العامة\n    if (APP_DEBUG) {\n        echo '<pre>';\n        echo \"خطأ: \" . $e->getMessage() . \"\\n\";\n        echo \"الملف: \" . $e->getFile() . \" السطر: \" . $e->getLine() . \"\\n\";\n        echo \"التتبع:\\n\" . $e->getTraceAsString();\n        echo '</pre>';\n    } else {\n        http_response_code(500);\n        echo '<!DOCTYPE html>\n<html>\n<head>\n    <title>خطأ في الخادم</title>\n    <meta charset=\"utf-8\">\n</head>\n<body>\n    <h1>عذراً، حدث خطأ</h1>\n    <p>يرجى المحاولة مرة أخرى لاحقاً.</p>\n</body>\n</html>';\n    }\n}",
        "src/Controllers/BaseController.php": "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controllers;\n\nuse App\\Core\\Database;\nuse App\\Core\\Config;\n\n/**\n * Controller الأساسي\n */\nabstract class BaseController\n{\n    protected Database $database;\n    protected Config $config;\n\n    public function __construct()\n    {\n        $this->config = new Config();\n        $this->database = new Database($this->config);\n    }\n\n    /**\n     * عرض template\n     */\n    protected function view(string $template, array $data = []): void\n    {\n        // جعل البيانات متاحة في template\n        extract($data);\n        \n        // تحديد مسار template\n        $templatePath = APP_PATH . \"/Views/{$template}.php\";\n        \n        if (!file_exists($templatePath)) {\n            throw new \\Exception(\"Template غير موجود: {$template}\");\n        }\n\n        // تحميل layout إذا كان موجود\n        $layout = $data['layout'] ?? 'layout';\n        $layoutPath = APP_PATH . \"/Views/{$layout}.php\";\n        \n        if (file_exists($layoutPath)) {\n            // تمرير محتوى الصفحة للـ layout\n            ob_start();\n            include $templatePath;\n            $content = ob_get_clean();\n            \n            include $layoutPath;\n        } else {\n            // عرض template مباشرة\n            include $templatePath;\n        }\n    }\n\n    /**\n     * إرجاع JSON response\n     */\n    protected function json(array $data, int $status = 200): void\n    {\n        http_response_code($status);\n        header('Content-Type: application/json; charset=utf-8');\n        echo json_encode($data, JSON_UNESCAPED_UNICODE);\n        exit;\n    }\n\n    /**\n     * إعادة توجيه\n     */\n    protected function redirect(string $url, int $status = 302): void\n    {\n        http_response_code($status);\n        header(\"Location: {$url}\");\n        exit;\n    }\n\n    /**\n     * الحصول على بيانات POST\n     */\n    protected function getPostData(): array\n    {\n        $input = file_get_contents('php://input');\n        $data = json_decode($input, true);\n        \n        if (json_last_error() === JSON_ERROR_NONE) {\n            return $data;\n        }\n        \n        return $_POST;\n    }\n\n    /**\n     * الحصول على بيانات GET\n     */\n    protected function getQueryData(): array\n    {\n        return $_GET;\n    }\n\n    /**\n     * التحقق من صحة البيانات\n     */\n    protected function validate(array $data, array $rules): array\n    {\n        $errors = [];\n        \n        foreach ($rules as $field => $rule) {\n            $value = $data[$field] ?? null;\n            \n            if (strpos($rule, 'required') !== false && empty($value)) {\n                $errors[$field] = \"الحقل {$field} مطلوب\";\n                continue;\n            }\n            \n            if (strpos($rule, 'email') !== false && !filter_var($value, FILTER_VALIDATE_EMAIL)) {\n                $errors[$field] = \"الحقل {$field} يجب أن يكون إيميل صحيح\";\n            }\n            \n            if (preg_match('/min:(\\d+)/', $rule, $matches)) {\n                $min = (int)$matches[1];\n                if (strlen($value) < $min) {\n                    $errors[$field] = \"الحقل {$field} يجب أن يكون {$min} أحرف على الأقل\";\n                }\n            }\n            \n            if (preg_match('/max:(\\d+)/', $rule, $matches)) {\n                $max = (int)$matches[1];\n                if (strlen($value) > $max) {\n                    $errors[$field] = \"الحقل {$field} يجب أن يكون {$max} أحرف على الأكثر\";\n                }\n            }\n        }\n        \n        return $errors;\n    }\n\n    /**\n     * الحصول على IP address\n     */\n    protected function getClientIp(): string\n    {\n        $keys = ['HTTP_CLIENT_IP', 'HTTP_X_FORWARDED_FOR', 'REMOTE_ADDR'];\n        \n        foreach ($keys as $key) {\n            if (!empty($_SERVER[$key])) {\n                $ips = explode(',', $_SERVER[$key]);\n                return trim($ips[0]);\n            }\n        }\n        \n        return 'unknown';\n    }\n\n    /**\n     * تسجيل رسالة خطأ\n     */\n    protected function logError(string $message, array $context = []): void\n    {\n        $logMessage = date('Y-m-d H:i:s') . \" - ERROR: {$message}\";\n        if (!empty($context)) {\n            $logMessage .= \" - Context: \" . json_encode($context, JSON_UNESCAPED_UNICODE);\n        }\n        $logMessage .= PHP_EOL;\n        \n        $logPath = STORAGE_PATH . '/logs';\n        if (!is_dir($logPath)) {\n            mkdir($logPath, 0755, true);\n        }\n        \n        file_put_contents($logPath . '/app.log', $logMessage, FILE_APPEND | LOCK_EX);\n    }\n}",
        "src/Controllers/HomeController.php": "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controllers;\n\n/**\n * Controller الصفحة الرئيسية\n */\nclass HomeController extends BaseController\n{\n    /**\n     * الصفحة الرئيسية\n     */\n    public function index(): void\n    {\n        $data = [\n            'title' => 'الصفحة الرئيسية',\n            'message' => 'مرحباً بك في {{ project_name }}',\n            'description' => 'تطبيق PHP MVC تم إنشاؤه باستخدام Project Template Generator',\n            'features' => [\n                'PHP 8+ Support',\n                'MVC Architecture',\n                'PSR-4 Autoloading',\n                'Database Integration',\n                'Router System',\n                'Template Engine',\n                'Error Handling',\n                'Security Headers'\n            ]\n        ];\n\n        $this->view('home/index', $data);\n    }\n\n    /**\n     * صفحة حول\n     */\n    public function about(): void\n    {\n        $data = [\n            'title' => 'حول التطبيق',\n            'appInfo' => [\n                'name' => '{{ project_name }}',\n                'version' => '1.0.0',\n                'description' => 'تطبيق PHP MVC احترافي',\n                'technologies' => [\n                    'PHP 8+',\n                    'MySQL/MariaDB',\n                    'Apache/Nginx',\n                    'Composer',\n                    'PSR Standards'\n                ]\n            ]\n        ];\n\n        $this->view('home/about', $data);\n    }\n\n    /**\n     * صفحة الاتصال\n     */\n    public function contact(): void\n    {\n        if ($_SERVER['REQUEST_METHOD'] === 'POST') {\n            $this->handleContactForm();\n            return;\n        }\n\n        $data = [\n            'title' => 'اتصل بنا',\n            'form_action' => '/contact'\n        ];\n\n        $this->view('home/contact', $data);\n    }\n\n    /**\n     * معالجة نموذج الاتصال\n     */\n    private function handleContactForm(): void\n    {\n        $data = $this->getPostData();\n        \n        $errors = $this->validate($data, [\n            'name' => 'required|min:2|max:100',\n            'email' => 'required|email',\n            'message' => 'required|min:10|max:1000'\n        ]);\n\n        if (!empty($errors)) {\n            $this->view('home/contact', [\n                'title' => 'اتصل بنا',\n                'errors' => $errors,\n                'old_data' => $data\n            ]);\n            return;\n        }\n\n        // حفظ الرسالة (يمكن إرسالها بالإيميل أو حفظها في قاعدة البيانات)\n        $this->saveContactMessage($data);\n\n        $this->view('home/contact', [\n            'title' => 'اتصل بنا',\n            'success' => 'تم إرسال رسالتك بنجاح!'\n        ]);\n    }\n\n    /**\n     * حفظ رسالة الاتصال\n     */\n    private function saveContactMessage(array $data): void\n    {\n        // يمكن تنفيذ حفظ الرسالة هنا\n        $this->logError(\"New contact message from {$data['email']}\", $data);\n    }\n}",
        "src/Controllers/UserController.php": "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controllers;\n\nuse App\\Models\\User;\n\n/**\n * Controller المستخدمين\n */\nclass UserController extends BaseController\n{\n    private User $userModel;\n\n    public function __construct()\n    {\n        parent::__construct();\n        $this->userModel = new User($this->database);\n    }\n\n    /**\n     * عرض قائمة المستخدمين\n     */\n    public function index(): void\n    {\n        try {\n            $users = $this->userModel->getAll();\n            \n            $data = [\n                'title' => 'المستخدمين',\n                'users' => $users\n            ];\n\n            $this->view('users/index', $data);\n            \n        } catch (\\Exception $e) {\n            $this->logError(\"Error fetching users: \" . $e->getMessage());\n            $this->view('errors/500', ['title' => 'خطأ في الخادم']);\n        }\n    }\n\n    /**\n     * عرض مستخدم محدد\n     */\n    public function show(string $id): void\n    {\n        try {\n            $user = $this->userModel->findById((int)$id);\n            \n            if (!$user) {\n                $this->view('errors/404', ['title' => 'المستخدم غير موجود']);\n                return;\n            }\n\n            $data = [\n                'title' => 'عرض المستخدم',\n                'user' => $user\n            ];\n\n            $this->view('users/show', $data);\n            \n        } catch (\\Exception $e) {\n            $this->logError(\"Error fetching user {$id}: \" . $e->getMessage());\n            $this->view('errors/500', ['title' => 'خطأ في الخادم']);\n        }\n    }\n\n    /**\n     * إنشاء مستخدم جديد\n     */\n    public function store(): void\n    {\n        try {\n            $data = $this->getPostData();\n            \n            $errors = $this->validate($data, [\n                'name' => 'required|min:2|max:100',\n                'email' => 'required|email',\n                'password' => 'required|min:6'\n            ]);\n\n            if (!empty($errors)) {\n                $this->json(['success' => false, 'errors' => $errors], 400);\n                return;\n            }\n\n            // التحقق من عدم وجود الإيميل مسبقاً\n            if ($this->userModel->findByEmail($data['email'])) {\n                $this->json([\n                    'success' => false, \n                    'message' => 'الإيميل موجود مسبقاً'\n                ], 400);\n                return;\n            }\n\n            // تشفير كلمة المرور\n            $data['password'] = password_hash($data['password'], PASSWORD_DEFAULT);\n\n            $userId = $this->userModel->create($data);\n\n            $this->json([\n                'success' => true,\n                'message' => 'تم إنشاء المستخدم بنجاح',\n                'user_id' => $userId\n            ], 201);\n            \n        } catch (\\Exception $e) {\n            $this->logError(\"Error creating user: \" . $e->getMessage());\n            $this->json(['success' => false, 'message' => 'خطأ في إنشاء المستخدم'], 500);\n        }\n    }\n\n    /**\n     * تحديث مستخدم\n     */\n    public function update(string $id): void\n    {\n        try {\n            $user = $this->userModel->findById((int)$id);\n            \n            if (!$user) {\n                $this->json(['success' => false, 'message' => 'المستخدم غير موجود'], 404);\n                return;\n            }\n\n            $data = $this->getPostData();\n            \n            $errors = $this->validate($data, [\n                'name' => 'required|min:2|max:100',\n                'email' => 'required|email'\n            ]);\n\n            if (!empty($errors)) {\n                $this->json(['success' => false, 'errors' => $errors], 400);\n                return;\n            }\n\n            // التحقق من عدم وجود الإيميل لمستخدم آخر\n            $existingUser = $this->userModel->findByEmail($data['email']);\n            if ($existingUser && $existingUser['id'] != $id) {\n                $this->json([\n                    'success' => false, \n                    'message' => 'الإيميل موجود مسبقاً'\n                ], 400);\n                return;\n            }\n\n            // تشفير كلمة المرور إذا تم تقديمها\n            if (!empty($data['password'])) {\n                $data['password'] = password_hash($data['password'], PASSWORD_DEFAULT);\n            } else {\n                unset($data['password']);\n            }\n\n            $this->userModel->update((int)$id, $data);\n\n            $this->json([\n                'success' => true,\n                'message' => 'تم تحديث المستخدم بنجاح'\n            ]);\n            \n        } catch (\\Exception $e) {\n            $this->logError(\"Error updating user {$id}: \" . $e->getMessage());\n            $this->json(['success' => false, 'message' => 'خطأ في تحديث المستخدم'], 500);\n        }\n    }\n\n    /**\n     * حذف مستخدم\n     */\n    public function destroy(string $id): void\n    {\n        try {\n            $user = $this->userModel->findById((int)$id);\n            \n            if (!$user) {\n                $this->json(['success' => false, 'message' => 'المستخدم غير موجود'], 404);\n                return;\n            }\n\n            $this->userModel->delete((int)$id);\n\n            $this->json([\n                'success' => true,\n                'message' => 'تم حذف المستخدم بنجاح'\n            ]);\n            \n        } catch (\\Exception $e) {\n            $this->logError(\"Error deleting user {$id}: \" . $e->getMessage());\n            $this->json(['success' => false, 'message' => 'خطأ في حذف المستخدم'], 500);\n        }\n    }\n}",
        "src/Core/Application.php": "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Core;\n\nuse App\\Core\\Router;\nuse App\\Core\\Database;\nuse App\\Core\\Config;\nuse Exception;\n\n/**\n * فئة التطبيق الرئيسية\n */\nclass Application\n{\n    private Router $router;\n    private Database $database;\n    private Config $config;\n\n    public function __construct()\n    {\n        $this->config = new Config();\n        $this->database = new Database($this->config);\n        $this->router = new Router();\n        \n        $this->initializeRoutes();\n    }\n\n    /**\n     * تشغيل التطبيق\n     */\n    public function run(): void\n    {\n        try {\n            $this->router->dispatch();\n        } catch (Exception $e) {\n            $this->handleException($e);\n        }\n    }\n\n    /**\n     * تهيئة المسارات\n     */\n    private function initializeRoutes(): void\n    {\n        // المسار الرئيسي\n        $this->router->get('/', 'HomeController@index');\n        $this->router->get('/home', 'HomeController@index');\n        \n        // مسارات المستخدمين\n        $this->router->get('/users', 'UserController@index');\n        $this->router->get('/users/show/{id}', 'UserController@show');\n        $this->router->post('/users', 'UserController@store');\n        $this->router->put('/users/{id}', 'UserController@update');\n        $this->router->delete('/users/{id}', 'UserController@destroy');\n        \n        // مسارات API\n        $this->router->group('/api', function($router) {\n            $router->get('/status', 'ApiController@status');\n            $router->get('/users', 'ApiController@users');\n        });\n    }\n\n    /**\n     * معالجة الاستثناءات\n     */\n    private function handleException(Exception $e): void\n    {\n        http_response_code(500);\n        \n        if (APP_DEBUG) {\n            echo \"<h1>خطأ في التطبيق</h1>\";\n            echo \"<p><strong>الرسالة:</strong> \" . htmlspecialchars($e->getMessage()) . \"</p>\";\n            echo \"<p><strong>الملف:</strong> \" . $e->getFile() . \" (السطر \" . $e->getLine() . \")</p>\";\n            echo \"<pre>\" . htmlspecialchars($e->getTraceAsString()) . \"</pre>\";\n        } else {\n            include APP_PATH . '/Views/errors/500.php';\n        }\n    }\n\n    /**\n     * الحصول على مثيل الراوتر\n     */\n    public function getRouter(): Router\n    {\n        return $this->router;\n    }\n\n    /**\n     * الحصول على مثيل قاعدة البيانات\n     */\n    public function getDatabase(): Database\n    {\n        return $this->database;\n    }\n\n    /**\n     * الحصول على مثيل الإعدادات\n     */\n    public function getConfig(): Config\n    {\n        return $this->config;\n    }\n}",
        "src/Core/Config.php": "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Core;\n\n/**\n * فئة إدارة الإعدادات\n */\nclass Config\n{\n    private array $config = [];\n\n    public function __construct()\n    {\n        $this->loadConfig();\n    }\n\n    /**\n     * تحميل ملفات الإعدادات\n     */\n    private function loadConfig(): void\n    {\n        // تحميل الإعدادات الافتراضية\n        $this->config = [\n            'app' => [\n                'name' => '{{ project_name }}',\n                'version' => '1.0.0',\n                'env' => $_ENV['APP_ENV'] ?? 'development',\n                'debug' => filter_var($_ENV['APP_DEBUG'] ?? true, FILTER_VALIDATE_BOOLEAN),\n                'timezone' => $_ENV['APP_TIMEZONE'] ?? 'UTC',\n                'locale' => $_ENV['APP_LOCALE'] ?? 'ar',\n            ],\n            'database' => [\n                'host' => $_ENV['DB_HOST'] ?? 'localhost',\n                'port' => $_ENV['DB_PORT'] ?? '3306',\n                'name' => $_ENV['DB_DATABASE'] ?? '{{ project_name|lower|replace(\\' \\', \\'_\\') }}_db',\n                'username' => $_ENV['DB_USERNAME'] ?? 'root',\n                'password' => $_ENV['DB_PASSWORD'] ?? '',\n                'charset' => $_ENV['DB_CHARSET'] ?? 'utf8mb4',\n            ],\n            'session' => [\n                'name' => $_ENV['SESSION_NAME'] ?? '{{ project_name|lower|replace(\\' \\', \\'_\\') }}_session',\n                'lifetime' => (int)($_ENV['SESSION_LIFETIME'] ?? 7200),\n                'path' => $_ENV['SESSION_PATH'] ?? '/',\n                'domain' => $_ENV['SESSION_DOMAIN'] ?? '',\n                'secure' => filter_var($_ENV['SESSION_SECURE'] ?? false, FILTER_VALIDATE_BOOLEAN),\n                'httponly' => filter_var($_ENV['SESSION_HTTPONLY'] ?? true, FILTER_VALIDATE_BOOLEAN),\n            ],\n            'cache' => [\n                'driver' => $_ENV['CACHE_DRIVER'] ?? 'file',\n                'path' => $_ENV['CACHE_PATH'] ?? ROOT_PATH . '/storage/cache',\n                'ttl' => (int)($_ENV['CACHE_TTL'] ?? 3600),\n            ],\n            'log' => [\n                'level' => $_ENV['LOG_LEVEL'] ?? 'info',\n                'path' => $_ENV['LOG_PATH'] ?? ROOT_PATH . '/storage/logs',\n                'max_files' => (int)($_ENV['LOG_MAX_FILES'] ?? 30),\n            ],\n        ];\n    }\n\n    /**\n     * الحصول على قيمة إعداد\n     */\n    public function get(string $key, $default = null)\n    {\n        $keys = explode('.', $key);\n        $value = $this->config;\n\n        foreach ($keys as $k) {\n            if (!isset($value[$k])) {\n                return $default;\n            }\n            $value = $value[$k];\n        }\n\n        return $value;\n    }\n\n    /**\n     * تعيين قيمة إعداد\n     */\n    public function set(string $key, $value): void\n    {\n        $keys = explode('.', $key);\n        $config = &$this->config;\n\n        foreach ($keys as $k) {\n            if (!isset($config[$k]) || !is_array($config[$k])) {\n                $config[$k] = [];\n            }\n            $config = &$config[$k];\n        }\n\n        $config = $value;\n    }\n\n    /**\n     * التحقق من وجود إعداد\n     */\n    public function has(string $key): bool\n    {\n        $keys = explode('.', $key);\n        $value = $this->config;\n\n        foreach ($keys as $k) {\n            if (!isset($value[$k])) {\n                return false;\n            }\n            $value = $value[$k];\n        }\n\n        return true;\n    }\n\n    /**\n     * الحصول على جميع الإعدادات\n     */\n    public function all(): array\n    {\n        return $this->config;\n    }\n\n    /**\n     * دمج إعدادات إضافية\n     */\n    public function merge(array $config): void\n    {\n        $this->config = array_merge_recursive($this->config, $config);\n    }\n}",
        "src/Core/Database.php": "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Core;\n\nuse PDO;\nuse PDOException;\nuse Exception;\n\n/**\n * فئة قاعدة البيانات\n */\nclass Database\n{\n    private ?PDO $connection = null;\n    private Config $config;\n\n    public function __construct(Config $config)\n    {\n        $this->config = $config;\n    }\n\n    /**\n     * الحصول على اتصال قاعدة البيانات\n     */\n    public function getConnection(): PDO\n    {\n        if ($this->connection === null) {\n            $this->connect();\n        }\n\n        return $this->connection;\n    }\n\n    /**\n     * الاتصال بقاعدة البيانات\n     */\n    private function connect(): void\n    {\n        try {\n            $host = $this->config->get('database.host', 'localhost');\n            $port = $this->config->get('database.port', '3306');\n            $database = $this->config->get('database.name', '{{ project_name|lower|replace(\\' \\', \\'_\\') }}_db');\n            $username = $this->config->get('database.username', 'root');\n            $password = $this->config->get('database.password', '');\n            $charset = $this->config->get('database.charset', 'utf8mb4');\n\n            $dsn = \"mysql:host={$host};port={$port};dbname={$database};charset={$charset}\";\n\n            $options = [\n                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,\n                PDO::ATTR_EMULATE_PREPARES => false,\n                PDO::MYSQL_ATTR_INIT_COMMAND => \"SET NAMES {$charset}\"\n            ];\n\n            $this->connection = new PDO($dsn, $username, $password, $options);\n            \n        } catch (PDOException $e) {\n            throw new Exception(\"فشل في الاتصال بقاعدة البيانات: \" . $e->getMessage());\n        }\n    }\n\n    /**\n     * تنفيذ استعلام SELECT\n     */\n    public function select(string $sql, array $params = []): array\n    {\n        try {\n            $stmt = $this->getConnection()->prepare($sql);\n            $stmt->execute($params);\n            return $stmt->fetchAll();\n        } catch (PDOException $e) {\n            throw new Exception(\"خطأ في استعلام SELECT: \" . $e->getMessage());\n        }\n    }\n\n    /**\n     * تنفيذ استعلام INSERT\n     */\n    public function insert(string $sql, array $params = []): int\n    {\n        try {\n            $stmt = $this->getConnection()->prepare($sql);\n            $stmt->execute($params);\n            return (int) $this->getConnection()->lastInsertId();\n        } catch (PDOException $e) {\n            throw new Exception(\"خطأ في استعلام INSERT: \" . $e->getMessage());\n        }\n    }\n\n    /**\n     * تنفيذ استعلام UPDATE\n     */\n    public function update(string $sql, array $params = []): int\n    {\n        try {\n            $stmt = $this->getConnection()->prepare($sql);\n            $stmt->execute($params);\n            return $stmt->rowCount();\n        } catch (PDOException $e) {\n            throw new Exception(\"خطأ في استعلام UPDATE: \" . $e->getMessage());\n        }\n    }\n\n    /**\n     * تنفيذ استعلام DELETE\n     */\n    public function delete(string $sql, array $params = []): int\n    {\n        try {\n            $stmt = $this->getConnection()->prepare($sql);\n            $stmt->execute($params);\n            return $stmt->rowCount();\n        } catch (PDOException $e) {\n            throw new Exception(\"خطأ في استعلام DELETE: \" . $e->getMessage());\n        }\n    }\n\n    /**\n     * تنفيذ استعلام عام\n     */\n    public function execute(string $sql, array $params = []): bool\n    {\n        try {\n            $stmt = $this->getConnection()->prepare($sql);\n            return $stmt->execute($params);\n        } catch (PDOException $e) {\n            throw new Exception(\"خطأ في تنفيذ الاستعلام: \" . $e->getMessage());\n        }\n    }\n\n    /**\n     * بدء transaction\n     */\n    public function beginTransaction(): bool\n    {\n        return $this->getConnection()->beginTransaction();\n    }\n\n    /**\n     * تأكيد transaction\n     */\n    public function commit(): bool\n    {\n        return $this->getConnection()->commit();\n    }\n\n    /**\n     * إلغاء transaction\n     */\n    public function rollback(): bool\n    {\n        return $this->getConnection()->rollback();\n    }\n\n    /**\n     * الحصول على آخر ID مُدرج\n     */\n    public function lastInsertId(): string\n    {\n        return $this->getConnection()->lastInsertId();\n    }\n}",
        "src/Core/Router.php": "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Core;\n\nuse Exception;\n\n/**\n * فئة التوجيه (Router)\n */\nclass Router\n{\n    private array $routes = [];\n    private string $currentGroup = '';\n\n    /**\n     * إضافة مسار GET\n     */\n    public function get(string $path, string $handler): void\n    {\n        $this->addRoute('GET', $path, $handler);\n    }\n\n    /**\n     * إضافة مسار POST\n     */\n    public function post(string $path, string $handler): void\n    {\n        $this->addRoute('POST', $path, $handler);\n    }\n\n    /**\n     * إضافة مسار PUT\n     */\n    public function put(string $path, string $handler): void\n    {\n        $this->addRoute('PUT', $path, $handler);\n    }\n\n    /**\n     * إضافة مسار DELETE\n     */\n    public function delete(string $path, string $handler): void\n    {\n        $this->addRoute('DELETE', $path, $handler);\n    }\n\n    /**\n     * تجميع المسارات\n     */\n    public function group(string $prefix, callable $callback): void\n    {\n        $oldGroup = $this->currentGroup;\n        $this->currentGroup = $prefix;\n        \n        $callback($this);\n        \n        $this->currentGroup = $oldGroup;\n    }\n\n    /**\n     * إضافة مسار جديد\n     */\n    private function addRoute(string $method, string $path, string $handler): void\n    {\n        $fullPath = $this->currentGroup . $path;\n        $this->routes[$method][$fullPath] = $handler;\n    }\n\n    /**\n     * توجيه الطلب\n     */\n    public function dispatch(): void\n    {\n        $method = $_SERVER['REQUEST_METHOD'];\n        $path = $this->getCurrentPath();\n\n        // البحث عن المسار المطابق\n        $handler = $this->matchRoute($method, $path);\n        \n        if ($handler === null) {\n            $this->handleNotFound();\n            return;\n        }\n\n        // تنفيذ المعالج\n        $this->executeHandler($handler, $path);\n    }\n\n    /**\n     * الحصول على المسار الحالي\n     */\n    private function getCurrentPath(): string\n    {\n        $path = $_SERVER['REQUEST_URI'] ?? '/';\n        \n        // إزالة query string\n        if (($pos = strpos($path, '?')) !== false) {\n            $path = substr($path, 0, $pos);\n        }\n        \n        return $path === '' ? '/' : $path;\n    }\n\n    /**\n     * البحث عن مسار مطابق\n     */\n    private function matchRoute(string $method, string $path): ?array\n    {\n        if (!isset($this->routes[$method])) {\n            return null;\n        }\n\n        foreach ($this->routes[$method] as $routePath => $handler) {\n            $params = $this->matchPath($routePath, $path);\n            if ($params !== null) {\n                return [\n                    'handler' => $handler,\n                    'params' => $params\n                ];\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * مطابقة المسار مع البارامترات\n     */\n    private function matchPath(string $routePath, string $requestPath): ?array\n    {\n        $params = [];\n        \n        // تحويل مسار الراوت إلى regex\n        $pattern = preg_replace('/\\{(\\w+)\\}/', '(?P<$1>[^/]+)', $routePath);\n        $pattern = '#^' . $pattern . '$#';\n        \n        if (preg_match($pattern, $requestPath, $matches)) {\n            // استخراج البارامترات المسماة\n            foreach ($matches as $key => $value) {\n                if (is_string($key)) {\n                    $params[$key] = $value;\n                }\n            }\n            return $params;\n        }\n        \n        return null;\n    }\n\n    /**\n     * تنفيذ المعالج\n     */\n    private function executeHandler(array $routeData, string $path): void\n    {\n        $handler = $routeData['handler'];\n        $params = $routeData['params'];\n\n        if (strpos($handler, '@') !== false) {\n            [$controllerName, $methodName] = explode('@', $handler);\n            $this->executeController($controllerName, $methodName, $params);\n        } else {\n            throw new Exception(\"تنسيق معالج غير صحيح: {$handler}\");\n        }\n    }\n\n    /**\n     * تنفيذ controller\n     */\n    private function executeController(string $controllerName, string $methodName, array $params): void\n    {\n        $controllerClass = \"App\\\\Controllers\\\\{$controllerName}\";\n        \n        if (!class_exists($controllerClass)) {\n            throw new Exception(\"Controller غير موجود: {$controllerClass}\");\n        }\n\n        $controller = new $controllerClass();\n        \n        if (!method_exists($controller, $methodName)) {\n            throw new Exception(\"Method غير موجود: {$methodName} في {$controllerClass}\");\n        }\n\n        // تمرير البارامترات كمعاملات منفصلة\n        call_user_func_array([$controller, $methodName], $params);\n    }\n\n    /**\n     * معالجة 404\n     */\n    private function handleNotFound(): void\n    {\n        http_response_code(404);\n        include APP_PATH . '/Views/errors/404.php';\n    }\n\n    /**\n     * الحصول على جميع المسارات\n     */\n    public function getRoutes(): array\n    {\n        return $this->routes;\n    }\n}",
        "src/Models/BaseModel.php": "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\nuse App\\Core\\Database;\nuse Exception;\n\n/**\n * Model الأساسي\n */\nabstract class BaseModel\n{\n    protected Database $database;\n    protected string $table;\n    protected array $fillable = [];\n    protected array $hidden = [];\n\n    public function __construct(Database $database)\n    {\n        $this->database = $database;\n    }\n\n    /**\n     * جلب جميع السجلات\n     */\n    public function getAll(array $columns = ['*']): array\n    {\n        $columnsStr = implode(', ', $columns);\n        $sql = \"SELECT {$columnsStr} FROM {$this->table}\";\n        return $this->database->select($sql);\n    }\n\n    /**\n     * البحث عن سجل بواسطة ID\n     */\n    public function findById(int $id, array $columns = ['*']): ?array\n    {\n        $columnsStr = implode(', ', $columns);\n        $sql = \"SELECT {$columnsStr} FROM {$this->table} WHERE id = :id\";\n        $result = $this->database->select($sql, ['id' => $id]);\n        \n        return $result[0] ?? null;\n    }\n\n    /**\n     * إنشاء سجل جديد\n     */\n    public function create(array $data): int\n    {\n        $data = $this->filterFillable($data);\n        $data = $this->hideFields($data);\n        \n        $columns = implode(', ', array_keys($data));\n        $placeholders = ':' . implode(', :', array_keys($data));\n        \n        $sql = \"INSERT INTO {$this->table} ({$columns}) VALUES ({$placeholders})\";\n        \n        return $this->database->insert($sql, $data);\n    }\n\n    /**\n     * تحديث سجل\n     */\n    public function update(int $id, array $data): int\n    {\n        $data = $this->filterFillable($data);\n        $data = $this->hideFields($data);\n        \n        $setParts = [];\n        foreach ($data as $column => $value) {\n            $setParts[] = \"{$column} = :{$column}\";\n        }\n        $setClause = implode(', ', $setParts);\n        \n        $sql = \"UPDATE {$this->table} SET {$setClause} WHERE id = :id\";\n        $data['id'] = $id;\n        \n        return $this->database->update($sql, $data);\n    }\n\n    /**\n     * حذف سجل\n     */\n    public function delete(int $id): int\n    {\n        $sql = \"DELETE FROM {$this->table} WHERE id = :id\";\n        return $this->database->delete($sql, ['id' => $id]);\n    }\n\n    /**\n     * البحث بشروط مخصصة\n     */\n    public function where(string $column, $operator, $value = null, array $columns = ['*']): array\n    {\n        if ($value === null) {\n            $value = $operator;\n            $operator = '=';\n        }\n        \n        $columnsStr = implode(', ', $columns);\n        $sql = \"SELECT {$columnsStr} FROM {$this->table} WHERE {$column} {$operator} :{$column}\";\n        \n        return $this->database->select($sql, [$column => $value]);\n    }\n\n    /**\n     * عد السجلات\n     */\n    public function count(array $conditions = []): int\n    {\n        $sql = \"SELECT COUNT(*) as count FROM {$this->table}\";\n        \n        if (!empty($conditions)) {\n            $whereParts = [];\n            foreach ($conditions as $column => $value) {\n                $whereParts[] = \"{$column} = :{$column}\";\n            }\n            $sql .= \" WHERE \" . implode(' AND ', $whereParts);\n        }\n        \n        $result = $this->database->select($sql, $conditions);\n        return (int)($result[0]['count'] ?? 0);\n    }\n\n    /**\n     * ترقيم الصفحات\n     */\n    public function paginate(int $page = 1, int $perPage = 15, array $columns = ['*']): array\n    {\n        $offset = ($page - 1) * $perPage;\n        $columnsStr = implode(', ', $columns);\n        \n        $sql = \"SELECT {$columnsStr} FROM {$this->table} LIMIT :limit OFFSET :offset\";\n        $data = $this->database->select($sql, [\n            'limit' => $perPage,\n            'offset' => $offset\n        ]);\n        \n        $total = $this->count();\n        $totalPages = ceil($total / $perPage);\n        \n        return [\n            'data' => $data,\n            'current_page' => $page,\n            'per_page' => $perPage,\n            'total' => $total,\n            'total_pages' => $totalPages,\n            'has_more' => $page < $totalPages\n        ];\n    }\n\n    /**\n     * تنفيذ استعلام مخصص\n     */\n    protected function query(string $sql, array $params = []): array\n    {\n        return $this->database->select($sql, $params);\n    }\n\n    /**\n     * تصفية الحقول المسموحة\n     */\n    protected function filterFillable(array $data): array\n    {\n        if (empty($this->fillable)) {\n            return $data;\n        }\n        \n        return array_intersect_key($data, array_flip($this->fillable));\n    }\n\n    /**\n     * إخفاء الحقول الحساسة\n     */\n    protected function hideFields(array $data): array\n    {\n        foreach ($this->hidden as $field) {\n            unset($data[$field]);\n        }\n        \n        return $data;\n    }\n\n    /**\n     * التحقق من وجود سجل\n     */\n    public function exists(int $id): bool\n    {\n        $sql = \"SELECT 1 FROM {$this->table} WHERE id = :id\";\n        $result = $this->database->select($sql, ['id' => $id]);\n        \n        return !empty($result);\n    }\n\n    /**\n     * الحصول على أول سجل\n     */\n    public function first(array $conditions = [], array $columns = ['*']): ?array\n    {\n        $columnsStr = implode(', ', $columns);\n        $sql = \"SELECT {$columnsStr} FROM {$this->table}\";\n        \n        if (!empty($conditions)) {\n            $whereParts = [];\n            foreach ($conditions as $column => $value) {\n                $whereParts[] = \"{$column} = :{$column}\";\n            }\n            $sql .= \" WHERE \" . implode(' AND ', $whereParts);\n        }\n        \n        $sql .= \" LIMIT 1\";\n        \n        $result = $this->database->select($sql, $conditions);\n        return $result[0] ?? null;\n    }\n}",
        "src/Models/User.php": "<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Models;\n\n/**\n * نموذج المستخدم\n */\nclass User extends BaseModel\n{\n    protected string $table = 'users';\n    \n    protected array $fillable = [\n        'name',\n        'email',\n        'password',\n        'phone',\n        'status',\n        'role'\n    ];\n    \n    protected array $hidden = [\n        'password'\n    ];\n\n    /**\n     * البحث عن مستخدم بواسطة الإيميل\n     */\n    public function findByEmail(string $email): ?array\n    {\n        $sql = \"SELECT * FROM {$this->table} WHERE email = :email\";\n        $result = $this->database->select($sql, ['email' => $email]);\n        \n        return $result[0] ?? null;\n    }\n\n    /**\n     * التحقق من كلمة المرور\n     */\n    public function verifyPassword(string $email, string $password): ?array\n    {\n        $user = $this->findByEmail($email);\n        \n        if (!$user) {\n            return null;\n        }\n        \n        if (password_verify($password, $user['password'])) {\n            // إزالة كلمة المرور من النتيجة\n            unset($user['password']);\n            return $user;\n        }\n        \n        return null;\n    }\n\n    /**\n     * تحديث كلمة المرور\n     */\n    public function updatePassword(int $userId, string $newPassword): bool\n    {\n        $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);\n        \n        $sql = \"UPDATE {$this->table} SET password = :password WHERE id = :id\";\n        $affected = $this->database->update($sql, [\n            'password' => $hashedPassword,\n            'id' => $userId\n        ]);\n        \n        return $affected > 0;\n    }\n\n    /**\n     * تحديث آخر دخول\n     */\n    public function updateLastLogin(int $userId): bool\n    {\n        $sql = \"UPDATE {$this->table} SET last_login = NOW() WHERE id = :id\";\n        $affected = $this->database->update($sql, ['id' => $userId]);\n        \n        return $affected > 0;\n    }\n\n    /**\n     * الحصول على المستخدمين النشطين\n     */\n    public function getActiveUsers(): array\n    {\n        $sql = \"SELECT id, name, email, created_at, last_login \n                FROM {$this->table} \n                WHERE status = 'active' \n                ORDER BY created_at DESC\";\n        \n        return $this->database->select($sql);\n    }\n\n    /**\n     * البحث في المستخدمين\n     */\n    public function search(string $term): array\n    {\n        $sql = \"SELECT id, name, email, created_at \n                FROM {$this->table} \n                WHERE name LIKE :term OR email LIKE :term \n                ORDER BY name ASC\";\n        \n        return $this->database->select($sql, ['term' => \"%{$term}%\"]);\n    }\n\n    /**\n     * الحصول على إحصائيات المستخدمين\n     */\n    public function getStats(): array\n    {\n        $stats = [];\n        \n        // العدد الإجمالي\n        $stats['total'] = $this->count();\n        \n        // المستخدمين النشطين\n        $sql = \"SELECT COUNT(*) as count FROM {$this->table} WHERE status = 'active'\";\n        $result = $this->database->select($sql);\n        $stats['active'] = (int)($result[0]['count'] ?? 0);\n        \n        // المستخدمين الجدد هذا الشهر\n        $sql = \"SELECT COUNT(*) as count FROM {$this->table} \n                WHERE created_at >= DATE_SUB(NOW(), INTERVAL 1 MONTH)\";\n        $result = $this->database->select($sql);\n        $stats['new_this_month'] = (int)($result[0]['count'] ?? 0);\n        \n        // المستخدمين الذين دخلوا مؤخراً\n        $sql = \"SELECT COUNT(*) as count FROM {$this->table} \n                WHERE last_login >= DATE_SUB(NOW(), INTERVAL 1 WEEK)\";\n        $result = $this->database->select($sql);\n        $stats['active_this_week'] = (int)($result[0]['count'] ?? 0);\n        \n        return $stats;\n    }\n\n    /**\n     * تفعيل/إلغاء تفعيل مستخدم\n     */\n    public function toggleStatus(int $userId): bool\n    {\n        $user = $this->findById($userId);\n        \n        if (!$user) {\n            return false;\n        }\n        \n        $newStatus = $user['status'] === 'active' ? 'inactive' : 'active';\n        \n        $sql = \"UPDATE {$this->table} SET status = :status WHERE id = :id\";\n        $affected = $this->database->update($sql, [\n            'status' => $newStatus,\n            'id' => $userId\n        ]);\n        \n        return $affected > 0;\n    }\n\n    /**\n     * إنشاء جدول المستخدمين (للاستخدام في migrations)\n     */\n    public function createTable(): bool\n    {\n        $sql = \"\n            CREATE TABLE IF NOT EXISTS {$this->table} (\n                id INT AUTO_INCREMENT PRIMARY KEY,\n                name VARCHAR(100) NOT NULL,\n                email VARCHAR(150) UNIQUE NOT NULL,\n                password VARCHAR(255) NOT NULL,\n                phone VARCHAR(20) NULL,\n                status ENUM('active', 'inactive') DEFAULT 'active',\n                role ENUM('user', 'admin') DEFAULT 'user',\n                email_verified_at TIMESTAMP NULL,\n                last_login TIMESTAMP NULL,\n                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n                INDEX idx_email (email),\n                INDEX idx_status (status),\n                INDEX idx_created_at (created_at)\n            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci\n        \";\n        \n        return $this->database->execute($sql);\n    }\n}",
        "src/Views/layout.php": "<!DOCTYPE html>\n<html lang=\"ar\" dir=\"rtl\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title><?= htmlspecialchars($title ?? '{{ project_name }}') ?></title>\n    \n    <!-- Bootstrap CSS -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <!-- Bootstrap Icons -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css\" rel=\"stylesheet\">\n    \n    <style>\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background-color: #f8f9fa;\n        }\n        .navbar-brand {\n            font-weight: bold;\n            font-size: 1.5rem;\n        }\n        .footer {\n            background-color: #343a40;\n            color: white;\n            margin-top: auto;\n        }\n        .main-content {\n            min-height: calc(100vh - 200px);\n        }\n        .card {\n            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\n            border: 1px solid rgba(0, 0, 0, 0.125);\n        }\n        .feature-card {\n            transition: transform 0.2s;\n        }\n        .feature-card:hover {\n            transform: translateY(-5px);\n        }\n    </style>\n</head>\n<body class=\"d-flex flex-column min-vh-100\">\n    <!-- Navigation -->\n    <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <div class=\"container\">\n            <a class=\"navbar-brand\" href=\"/\">\n                <i class=\"bi bi-code-square\"></i>\n                {{ project_name }}\n            </a>\n            \n            <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\">\n                <span class=\"navbar-toggler-icon\"></span>\n            </button>\n            \n            <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n                <ul class=\"navbar-nav me-auto\">\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"/\">\n                            <i class=\"bi bi-house\"></i>\n                            الرئيسية\n                        </a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"/users\">\n                            <i class=\"bi bi-people\"></i>\n                            المستخدمين\n                        </a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"/about\">\n                            <i class=\"bi bi-info-circle\"></i>\n                            حول\n                        </a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"/contact\">\n                            <i class=\"bi bi-envelope\"></i>\n                            اتصل بنا\n                        </a>\n                    </li>\n                </ul>\n                \n                <ul class=\"navbar-nav\">\n                    <li class=\"nav-item dropdown\">\n                        <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\">\n                            <i class=\"bi bi-person-circle\"></i>\n                            الحساب\n                        </a>\n                        <ul class=\"dropdown-menu\">\n                            <li><a class=\"dropdown-item\" href=\"/profile\">الملف الشخصي</a></li>\n                            <li><a class=\"dropdown-item\" href=\"/settings\">الإعدادات</a></li>\n                            <li><hr class=\"dropdown-divider\"></li>\n                            <li><a class=\"dropdown-item\" href=\"/logout\">تسجيل الخروج</a></li>\n                        </ul>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    <!-- Main Content -->\n    <main class=\"main-content\">\n        <?php if (isset($content)): ?>\n            <?= $content ?>\n        <?php endif; ?>\n    </main>\n\n    <!-- Footer -->\n    <footer class=\"footer py-4 mt-5\">\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-md-6\">\n                    <h5>{{ project_name }}</h5>\n                    <p class=\"text-muted\">تطبيق PHP MVC احترافي تم إنشاؤه باستخدام Project Template Generator.</p>\n                </div>\n                <div class=\"col-md-3\">\n                    <h6>روابط سريعة</h6>\n                    <ul class=\"list-unstyled\">\n                        <li><a href=\"/\" class=\"text-muted text-decoration-none\">الرئيسية</a></li>\n                        <li><a href=\"/about\" class=\"text-muted text-decoration-none\">حول</a></li>\n                        <li><a href=\"/contact\" class=\"text-muted text-decoration-none\">اتصل بنا</a></li>\n                    </ul>\n                </div>\n                <div class=\"col-md-3\">\n                    <h6>التقنيات</h6>\n                    <ul class=\"list-unstyled\">\n                        <li><span class=\"text-muted\">PHP 8+</span></li>\n                        <li><span class=\"text-muted\">MVC Pattern</span></li>\n                        <li><span class=\"text-muted\">Bootstrap 5</span></li>\n                    </ul>\n                </div>\n            </div>\n            <hr class=\"my-4\">\n            <div class=\"row align-items-center\">\n                <div class=\"col-md-6\">\n                    <p class=\"text-muted mb-0\">&copy; 2025 {{ project_name }}. جميع الحقوق محفوظة.</p>\n                </div>\n                <div class=\"col-md-6 text-md-end\">\n                    <span class=\"text-muted\">تم إنشاؤه بواسطة Project Template Generator</span>\n                </div>\n            </div>\n        </div>\n    </footer>\n\n    <!-- Bootstrap JS -->\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n    \n    <!-- Custom JS -->\n    <script>\n        // إضافة أي JavaScript مخصص هنا\n        console.log('مرحباً من {{ project_name }}!');\n    </script>\n</body>\n</html>",
        "src/Views/home/index.php": "<div class=\"container my-5\">\n    <!-- Hero Section -->\n    <div class=\"row mb-5\">\n        <div class=\"col-12\">\n            <div class=\"card bg-primary text-white\">\n                <div class=\"card-body text-center py-5\">\n                    <h1 class=\"display-4 mb-3\">\n                        <i class=\"bi bi-rocket-takeoff\"></i>\n                        <?= htmlspecialchars($message) ?>\n                    </h1>\n                    <p class=\"lead mb-4\"><?= htmlspecialchars($description) ?></p>\n                    <a href=\"/about\" class=\"btn btn-light btn-lg\">\n                        <i class=\"bi bi-info-circle\"></i>\n                        اكتشف المزيد\n                    </a>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <!-- Features Section -->\n    <div class=\"row mb-5\">\n        <div class=\"col-12 text-center mb-4\">\n            <h2 class=\"display-6\">الميزات الرئيسية</h2>\n            <p class=\"text-muted\">تطبيق متقدم مبني على أحدث التقنيات</p>\n        </div>\n    </div>\n\n    <div class=\"row\">\n        <?php foreach ($features as $index => $feature): ?>\n            <div class=\"col-md-6 col-lg-4 mb-4\">\n                <div class=\"card h-100 feature-card\">\n                    <div class=\"card-body text-center\">\n                        <div class=\"mb-3\">\n                            <?php\n                            $icons = [\n                                'bi-code-slash', 'bi-diagram-3', 'bi-gear', 'bi-database',\n                                'bi-signpost', 'bi-file-earmark-code', 'bi-shield-check', 'bi-speedometer2'\n                            ];\n                            $icon = $icons[$index % count($icons)];\n                            ?>\n                            <i class=\"bi <?= $icon ?> text-primary\" style=\"font-size: 2.5rem;\"></i>\n                        </div>\n                        <h5 class=\"card-title\"><?= htmlspecialchars($feature) ?></h5>\n                        <p class=\"card-text text-muted\">\n                            <?php\n                            $descriptions = [\n                                'دعم كامل لأحدث إصدارات PHP مع جميع الميزات الحديثة',\n                                'تصميم معماري منظم وقابل للصيانة',\n                                'تحميل تلقائي للفئات حسب معايير PSR-4',\n                                'اتصال آمن ومحسن مع قواعد البيانات',\n                                'نظام توجيه مرن وقوي لإدارة المسارات',\n                                'محرك قوالب سهل الاستخدام',\n                                'معالجة شاملة للأخطاء والاستثناءات',\n                                'headers أمان لحماية التطبيق'\n                            ];\n                            echo htmlspecialchars($descriptions[$index % count($descriptions)]);\n                            ?>\n                        </p>\n                    </div>\n                </div>\n            </div>\n        <?php endforeach; ?>\n    </div>\n\n    <!-- CTA Section -->\n    <div class=\"row mt-5\">\n        <div class=\"col-12\">\n            <div class=\"card bg-light\">\n                <div class=\"card-body text-center py-4\">\n                    <h3 class=\"mb-3\">ابدأ رحلتك الآن</h3>\n                    <p class=\"text-muted mb-4\">استكشف جميع ميزات التطبيق وابدأ في بناء مشروعك القادم</p>\n                    <div class=\"d-grid gap-2 d-md-flex justify-content-md-center\">\n                        <a href=\"/users\" class=\"btn btn-primary btn-lg\">\n                            <i class=\"bi bi-people\"></i>\n                            إدارة المستخدمين\n                        </a>\n                        <a href=\"/contact\" class=\"btn btn-outline-primary btn-lg\">\n                            <i class=\"bi bi-envelope\"></i>\n                            تواصل معنا\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"
      }
    }
  },
  "python": {
    "common": {
      "structure": "├── README.md\n├── gitignore\n└── requirements.txt\n",
      "files": {
        "README.md": "# {{ project_name }}\n\n## الوصف\nمشروع {{ framework }} باستخدام Python تم إنشاؤه باستخدام Project Template Generator.\n\n## التثبيت\n```bash\npip install -r requirements.txt\n```\n\n## الاستخدام\n```bash\npython main.py\n```\n\n## المتطلبات\n- Python 3.8+\n- pip\n\n## الهيكل\n```\n{{ project_name }}/\n├── main.py              # الملف الرئيسي\n├── requirements.txt     # متطلبات المشروع\n├── README.md           # هذا الملف\n├── .gitignore          # ملفات Git المتجاهلة\n├── config.py           # إعدادات المشروع\n├── src/                # كود المصدر\n│   ├── __init__.py\n│   └── utils/          # الأدوات المساعدة\n└── tests/              # الاختبارات\n    └── __init__.py\n```\n\n## المؤلف\nتم إنشاؤه باستخدام Project Template Generator v1.0.0",
        "gitignore": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# IDE\n.vscode/\n.idea/\n*.swp\n*.swo\n*~\n\n# OS generated files\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\n\n# Project specific\nlogs/\n*.log\ndata/temp/\n.ptg/",
        "requirements.txt": "# متطلبات {{ project_name }}\n# تم إنشاؤه باستخدام Project Template Generator\n# التاريخ: {{ timestamp }}\n\n# المكتبات الأساسية\nrequests>=2.31.0\npython-dotenv>=1.0.0\nclick>=8.1.0\ncolorama>=0.4.6\n\n# أدوات التطوير والاختبار\npytest>=7.4.0\npytest-cov>=4.1.0\nblack>=23.7.0\nisort>=5.12.0\nflake8>=6.0.0\nmypy>=1.5.0\n\n# التوثيق\nsphinx>=7.1.0\n\n{% if framework == 'flask' %}\n# Flask والمكتبات المرتبطة\nflask>=2.3.3\nflask-sqlalchemy>=3.0.5\nflask-migrate>=4.0.5\nflask-wtf>=1.1.1\nflask-login>=0.6.2\nflask-mail>=0.9.1\nwerkzeug>=2.3.7\njinja2>=3.1.2\nwtforms>=3.0.1\nsqlalchemy>=2.0.20\n\n# قواعد البيانات\npsycopg2-binary>=2.9.7  # PostgreSQL\npymongo>=4.5.0          # MongoDB\nredis>=4.6.0            # Redis\n\n# الأمان\nbcrypt>=4.0.1\npyjwt>=2.8.0\nflask-security-too>=5.3.0\n{% elif framework == 'fastapi' %}\n# FastAPI والمكتبات المرتبطة\nfastapi>=0.103.0\nuvicorn[standard]>=0.23.2\npydantic>=2.3.0\nsqlalchemy>=2.0.20\nalembic>=1.12.0\npython-multipart>=0.0.6\npython-jose[cryptography]>=3.3.0\npasslib[bcrypt]>=1.7.4\n\n# قواعد البيانات\npsycopg2-binary>=2.9.7  # PostgreSQL\naiopg>=1.4.0           # Async PostgreSQL\naiomysql>=0.2.0        # Async MySQL\nmotor>=3.3.1           # Async MongoDB\naioredis>=2.0.1        # Async Redis\n\n# HTTP والشبكات\nhttpx>=0.24.1\naiofiles>=23.2.1\n{% elif framework == 'ml' %}\n# مكتبات تعلم الآلة والذكاء الاصطناعي\nnumpy>=1.24.4\npandas>=2.1.0\nscikit-learn>=1.3.0\nmatplotlib>=3.7.2\nseaborn>=0.12.2\nplotly>=5.15.0\njupyter>=1.0.0\nipython>=8.14.0\n\n# التعلم العميق\ntensorflow>=2.13.0\ntorch>=2.0.1\ntorchvision>=0.15.2\nkeras>=2.13.1\n\n# معالجة البيانات\nopenpyxl>=3.1.2\nxlrd>=2.0.1\nbeautifulsoup4>=4.12.2\n\n# التصور المتقدم\nbokeh>=3.2.2\naltair>=5.1.0\n{% elif framework == 'data-mining' %}\n# مكتبات تنقيب البيانات والتحليل\nnumpy>=1.24.4\npandas>=2.1.0\nscipy>=1.11.2\nmatplotlib>=3.7.2\nseaborn>=0.12.2\nplotly>=5.15.0\n\n# تنقيب البيانات\nscikit-learn>=1.3.0\nxgboost>=1.7.6\nlightgbm>=4.0.0\ncatboost>=1.2\n\n# معالجة النصوص\nnltk>=3.8.1\nspacy>=3.6.1\ntextblob>=0.17.1\ngensim>=4.3.2\n\n# قواعد البيانات والتخزين\nsqlalchemy>=2.0.20\npymongo>=4.5.0\nredis>=4.6.0\n\n# أدوات إضافية\njupyter>=1.0.0\nipython>=8.14.0\nbeautifulsoup4>=4.12.2\nselenium>=4.11.2\n{% else %}\n# مكتبات عامة مفيدة\nurllib3>=2.0.4\npython-dateutil>=2.8.2\npsutil>=5.9.5\ntqdm>=4.66.1\n{% endif %}\n\n# أدوات إنتاجية إضافية\nrich>=13.5.2           # واجهة طرفية جميلة\ntabulate>=0.9.0        # تنسيق الجداول\npython-magic>=0.4.27   # تحديد أنواع الملفات\nchardet>=5.2.0         # كشف ترميز النصوص\nwatchdog>=3.0.0        # مراقبة تغييرات الملفات\ngitpython>=3.1.32      # التكامل مع Git\n\n# أدوات التشفير والأمان\ncryptography>=41.0.3\nkeyring>=24.2.0\n\n# متطلبات إضافية للبيئات المختلفة\n# للإضافة حسب الحاجة"
      }
    },
    "data-mining": {
      "structure": "├── main.py\n├── mine.py\n├── requirements.txt\n├── src/\n│   ├── config.py\n│   └── mining/\n│       ├── association_rules.py\n│       ├── clustering.py\n│       └── pattern_finder.py\n└── template.yaml\n",
      "files": {
        "main.py": "#!/usr/bin/env python3\n\"\"\"\n{{ project_name }} - Data Mining Project\nCreated by {{ generator }} at {{ timestamp }}\n\nThis is the main entry point for the data mining project.\n\"\"\"\n\nimport os\nimport sys\nimport logging\nfrom pathlib import Path\n\n# Add src to Python path\nsys.path.append(str(Path(__file__).parent / \"src\"))\n\nfrom src.config import Config\nfrom src.data.data_loader import DataLoader\nfrom src.mining.pattern_finder import PatternFinder\nfrom src.mining.association_rules import AssociationRules\nfrom src.mining.clustering import ClusterAnalyzer\nfrom src.mining.classification import DataClassifier\nfrom src.visualization.plotter import DataPlotter\nfrom src.utils.logger import setup_logging\nfrom src.utils.metrics import MiningMetrics\n\ndef main():\n    \"\"\"Main function for data mining pipeline\"\"\"\n    # Setup logging\n    setup_logging()\n    logger = logging.getLogger(__name__)\n    \n    try:\n        # Load configuration\n        config = Config()\n        logger.info(\"🔍 Starting Data Mining pipeline for {{ project_name }}\")\n        \n        # Initialize metrics tracker\n        metrics = MiningMetrics()\n        \n        # Load and explore data\n        logger.info(\"📊 Loading and exploring data...\")\n        data_loader = DataLoader(config)\n        data = data_loader.load_and_explore()\n        \n        # Initialize components\n        pattern_finder = PatternFinder(config)\n        association_rules = AssociationRules(config)\n        cluster_analyzer = ClusterAnalyzer(config)\n        classifier = DataClassifier(config)\n        plotter = DataPlotter(config)\n        \n        # Data exploration and visualization\n        logger.info(\"📈 Creating data visualizations...\")\n        plotter.create_exploration_plots(data)\n        \n        # Pattern Mining\n        logger.info(\"🔍 Mining frequent patterns...\")\n        frequent_patterns = pattern_finder.find_frequent_patterns(data)\n        metrics.update({\"frequent_patterns_count\": len(frequent_patterns)})\n        \n        # Association Rules Mining\n        logger.info(\"🔗 Mining association rules...\")\n        rules = association_rules.mine_rules(frequent_patterns)\n        metrics.update({\"association_rules_count\": len(rules)})\n        \n        # Clustering Analysis\n        logger.info(\"🎯 Performing clustering analysis...\")\n        clusters = cluster_analyzer.perform_clustering(data)\n        metrics.update({\"clusters_found\": clusters.get('n_clusters', 0)})\n        \n        # Classification (if target available)\n        if hasattr(data, 'target') and data.target is not None:\n            logger.info(\"🤖 Training classification models...\")\n            classification_results = classifier.train_and_evaluate(data)\n            metrics.update(classification_results.get('metrics', {}))\n        \n        # Generate comprehensive report\n        logger.info(\"📋 Generating mining report...\")\n        report = generate_mining_report(\n            data, frequent_patterns, rules, clusters, \n            classification_results if 'classification_results' in locals() else None,\n            metrics\n        )\n        \n        # Save results\n        logger.info(\"💾 Saving results...\")\n        save_results(config, report, frequent_patterns, rules, clusters)\n        \n        logger.info(\"✅ Data Mining pipeline completed successfully!\")\n        logger.info(f\"📊 Final metrics: {metrics.get_summary()}\")\n        \n    except Exception as e:\n        logger.error(f\"❌ Error in Data Mining pipeline: {str(e)}\")\n        sys.exit(1)\n\ndef generate_mining_report(data, patterns, rules, clusters, classification, metrics):\n    \"\"\"Generate comprehensive mining report\"\"\"\n    report = {\n        \"project_name\": \"{{ project_name }}\",\n        \"timestamp\": str(metrics.start_time),\n        \"data_summary\": {\n            \"shape\": data.shape if hasattr(data, 'shape') else \"Unknown\",\n            \"columns\": list(data.columns) if hasattr(data, 'columns') else [],\n        },\n        \"mining_results\": {\n            \"frequent_patterns\": len(patterns),\n            \"association_rules\": len(rules),\n            \"clusters\": clusters.get('n_clusters', 0) if clusters else 0,\n        },\n        \"performance_metrics\": metrics.get_all_metrics()\n    }\n    \n    if classification:\n        report[\"classification_results\"] = classification\n    \n    return report\n\ndef save_results(config, report, patterns, rules, clusters):\n    \"\"\"Save all mining results\"\"\"\n    import json\n    \n    # Create results directory\n    results_dir = Path(config.output_path)\n    results_dir.mkdir(parents=True, exist_ok=True)\n    \n    # Save main report\n    with open(results_dir / \"mining_report.json\", 'w') as f:\n        json.dump(report, f, indent=2, default=str)\n    \n    # Save patterns\n    with open(results_dir / \"frequent_patterns.json\", 'w') as f:\n        json.dump(patterns, f, indent=2, default=str)\n    \n    # Save rules\n    with open(results_dir / \"association_rules.json\", 'w') as f:\n        json.dump(rules, f, indent=2, default=str)\n    \n    # Save clusters\n    if clusters:\n        with open(results_dir / \"clusters.json\", 'w') as f:\n            json.dump(clusters, f, indent=2, default=str)\n\nif __name__ == \"__main__\":\n    main()",
        "mine.py": "#!/usr/bin/env python3\n\"\"\"\nData Mining script for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\nDedicated script for running specific data mining algorithms.\n\"\"\"\n\nimport argparse\nimport logging\nimport sys\nfrom pathlib import Path\n\nsys.path.append(str(Path(__file__).parent / \"src\"))\n\nfrom src.config import Config\nfrom src.data.data_loader import DataLoader\nfrom src.mining.pattern_finder import PatternFinder\nfrom src.mining.association_rules import AssociationRules\nfrom src.mining.clustering import ClusterAnalyzer\nfrom src.utils.logger import setup_logging\n\ndef parse_args():\n    \"\"\"Parse command line arguments\"\"\"\n    parser = argparse.ArgumentParser(description=\"Data Mining for {{ project_name }}\")\n    \n    parser.add_argument(\n        \"--algorithm\", \n        choices=[\"patterns\", \"rules\", \"clustering\", \"all\"],\n        default=\"all\",\n        help=\"Mining algorithm to run\"\n    )\n    parser.add_argument(\n        \"--data\", \n        type=str, \n        required=True,\n        help=\"Path to data file\"\n    )\n    parser.add_argument(\n        \"--min-support\", \n        type=float, \n        default=0.1,\n        help=\"Minimum support for pattern mining\"\n    )\n    parser.add_argument(\n        \"--min-confidence\", \n        type=float, \n        default=0.5,\n        help=\"Minimum confidence for association rules\"\n    )\n    parser.add_argument(\n        \"--n-clusters\", \n        type=int, \n        default=3,\n        help=\"Number of clusters for clustering\"\n    )\n    parser.add_argument(\n        \"--output\", \n        type=str, \n        default=\"results/\",\n        help=\"Output directory for results\"\n    )\n    parser.add_argument(\n        \"--verbose\", \n        action=\"store_true\",\n        help=\"Verbose output\"\n    )\n    \n    return parser.parse_args()\n\ndef main():\n    \"\"\"Main mining function\"\"\"\n    args = parse_args()\n    \n    # Setup logging\n    setup_logging()\n    logger = logging.getLogger(__name__)\n    \n    try:\n        logger.info(\"🔍 Starting Data Mining for {{ project_name }}\")\n        logger.info(f\"📋 Arguments: {args}\")\n        \n        # Load configuration\n        config = Config()\n        config.data_path = args.data\n        config.output_path = args.output\n        config.min_support = args.min_support\n        config.min_confidence = args.min_confidence\n        config.n_clusters = args.n_clusters\n        \n        # Load data\n        logger.info(\"📊 Loading data...\")\n        data_loader = DataLoader(config)\n        data = data_loader.load_and_explore()\n        \n        # Run selected algorithms\n        if args.algorithm in [\"patterns\", \"all\"]:\n            logger.info(\"🔍 Mining frequent patterns...\")\n            pattern_finder = PatternFinder(config)\n            patterns = pattern_finder.find_frequent_patterns(data)\n            logger.info(f\"Found {len(patterns)} frequent patterns\")\n        \n        if args.algorithm in [\"rules\", \"all\"]:\n            logger.info(\"🔗 Mining association rules...\")\n            if 'patterns' not in locals():\n                pattern_finder = PatternFinder(config)\n                patterns = pattern_finder.find_frequent_patterns(data)\n            \n            association_rules = AssociationRules(config)\n            rules = association_rules.mine_rules(patterns)\n            logger.info(f\"Found {len(rules)} association rules\")\n        \n        if args.algorithm in [\"clustering\", \"all\"]:\n            logger.info(\"🎯 Performing clustering...\")\n            cluster_analyzer = ClusterAnalyzer(config)\n            clusters = cluster_analyzer.perform_clustering(data)\n            logger.info(f\"Created {clusters.get('n_clusters', 0)} clusters\")\n        \n        logger.info(\"✅ Data Mining completed successfully!\")\n        \n    except Exception as e:\n        logger.error(f\"❌ Mining failed: {str(e)}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()",
        "requirements.txt": "# {{ project_name }} - Data Mining Dependencies\n# Generated by {{ generator }} at {{ timestamp }}\n\n# Core data processing\nnumpy>=1.24.0\npandas>=2.0.0\nscipy>=1.10.0\n\n# Data mining libraries\nscikit-learn>=1.3.0\nmlxtend>=0.22.0\napyori>=1.1.2\n\n# Pattern mining and association rules\napyori>=1.1.2\nefficient-apriori>=2.0.0\nmlxtend>=0.22.0\n\n# Clustering algorithms\nscikit-learn>=1.3.0\nhdbscan>=0.8.29\numap-learn>=0.5.3\n\n# Advanced algorithms\nnetworkx>=3.1\npyclustering>=0.10.1\n\n# Data visualization\nmatplotlib>=3.7.0\nseaborn>=0.12.0\nplotly>=5.15.0\nbokeh>=3.2.0\n\n# Interactive visualization\ndash>=2.11.0\nstreamlit>=1.25.0\n\n# Statistical analysis\nstatsmodels>=0.14.0\npingouin>=0.5.3\n\n# Text mining (optional)\nnltk>=3.8.1\ntextblob>=0.17.1\ngensim>=4.3.0\n\n# Time series mining\nstumpy>=1.12.0\ntslearn>=0.6.0\n\n# Graph mining\nnetworkx>=3.1\npython-igraph>=0.10.6\n\n# Utilities\ntqdm>=4.65.0\npython-dotenv>=1.0.0\nclick>=8.1.0\npyyaml>=6.0.0\njoblib>=1.3.0\n\n# Jupyter and notebooks\njupyter>=1.0.0\njupyterlab>=4.0.0\nipykernel>=6.25.0\n\n# Data validation\ngreat-expectations>=0.17.0\npydantic>=2.0.0\n\n# Performance optimization\nnumba>=0.57.0\ncython>=3.0.0\n\n# Testing\npytest>=7.4.0\npytest-cov>=4.1.0\n\n# Code quality\nblack>=23.7.0\nflake8>=6.0.0\nisort>=5.12.0\n\n# Development\npre-commit>=3.3.0",
        "template.yaml": "name: \"python-data-mining\"\nversion: \"1.0.0\"\ndescription: \"قالب شامل لمشاريع تنقيب البيانات والتحليل\"\nlanguage: \"python\"\nframework: \"data-mining\"\n\nstructure:\n  directories:\n    - \"src\"\n    - \"src/data_collection\"\n    - \"src/data_cleaning\"\n    - \"src/data_analysis\"\n    - \"src/data_mining\"\n    - \"src/visualization\"\n    - \"src/utils\"\n    - \"notebooks\"\n    - \"data\"\n    - \"data/raw\"\n    - \"data/processed\"\n    - \"data/cleaned\"\n    - \"reports\"\n    - \"reports/html\"\n    - \"reports/pdf\"\n    - \"configs\"\n    - \"tests\"\n    - \"scripts\"\n\n  files:\n    - path: \"main.py\"\n      template: \"python/data-mining/main.py\"\n      type: \"template\"\n    \n    - path: \"requirements.txt\"\n      template: \"python/data-mining/requirements.txt\"\n      type: \"template\"\n    \n    - path: \"README.md\"\n      template: \"python/data-mining/README.md\"\n      type: \"template\"\n\ncomponents:\n  analyzer:\n    template: \"python/data-mining/components/analyzer.py\"\n    path: \"src/data_analysis/{{component_name|lower}}_analyzer.py\"",
        "src/config.py": "#!/usr/bin/env python3\n\"\"\"\nConfiguration module for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\"\"\"\n\nimport os\nimport yaml\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional\nfrom dataclasses import dataclass, field\n\n@dataclass\nclass Config:\n    \"\"\"Configuration class for data mining project\"\"\"\n    \n    # Project info\n    project_name: str = \"{{ project_name }}\"\n    version: str = \"1.0.0\"\n    \n    # Paths\n    data_path: str = \"data/\"\n    raw_data_path: str = \"data/raw/\"\n    processed_data_path: str = \"data/processed/\"\n    output_path: Path = field(default_factory=lambda: Path(\"results/\"))\n    \n    # Pattern mining parameters\n    min_support: float = 0.1\n    min_confidence: float = 0.5\n    min_lift: float = 1.0\n    pattern_algorithm: str = \"apriori\"  # apriori, fpgrowth\n    max_pattern_length: Optional[int] = None\n    \n    # Clustering parameters\n    n_clusters: int = 3\n    clustering_algorithm: str = \"kmeans\"  # kmeans, dbscan, hierarchical\n    eps: float = 0.5  # for DBSCAN\n    min_samples: int = 5  # for DBSCAN\n    linkage: str = \"ward\"  # for hierarchical\n    \n    # Classification parameters\n    classification_algorithm: str = \"random_forest\"\n    test_size: float = 0.2\n    cv_folds: int = 5\n    \n    # General parameters\n    random_state: int = 42\n    verbose: bool = True\n    \n    def __init__(self, config_path: Optional[str] = None):\n        \"\"\"Initialize configuration from file or defaults\"\"\"\n        if config_path and Path(config_path).exists():\n            self.load_from_file(config_path)\n        else:\n            self.setup_defaults()\n    \n    def setup_defaults(self):\n        \"\"\"Setup default configuration values\"\"\"\n        # Ensure paths exist\n        for path_attr in [\"data_path\", \"raw_data_path\", \"processed_data_path\"]:\n            path = Path(getattr(self, path_attr))\n            path.mkdir(parents=True, exist_ok=True)\n        \n        self.output_path.mkdir(parents=True, exist_ok=True)\n    \n    def load_from_file(self, config_path: str):\n        \"\"\"Load configuration from YAML file\"\"\"\n        with open(config_path, 'r') as f:\n            config_data = yaml.safe_load(f)\n        \n        # Update attributes from config file\n        if 'project' in config_data:\n            project_config = config_data['project']\n            self.project_name = project_config.get('name', self.project_name)\n            self.version = project_config.get('version', self.version)\n        \n        if 'paths' in config_data:\n            paths_config = config_data['paths']\n            self.data_path = paths_config.get('data', self.data_path)\n            self.raw_data_path = paths_config.get('raw_data', self.raw_data_path)\n            self.processed_data_path = paths_config.get('processed_data', self.processed_data_path)\n            self.output_path = Path(paths_config.get('output', self.output_path))\n        \n        if 'pattern_mining' in config_data:\n            pm_config = config_data['pattern_mining']\n            self.min_support = pm_config.get('min_support', self.min_support)\n            self.min_confidence = pm_config.get('min_confidence', self.min_confidence)\n            self.min_lift = pm_config.get('min_lift', self.min_lift)\n            self.pattern_algorithm = pm_config.get('algorithm', self.pattern_algorithm)\n            self.max_pattern_length = pm_config.get('max_length', self.max_pattern_length)\n        \n        if 'clustering' in config_data:\n            cluster_config = config_data['clustering']\n            self.n_clusters = cluster_config.get('n_clusters', self.n_clusters)\n            self.clustering_algorithm = cluster_config.get('algorithm', self.clustering_algorithm)\n            self.eps = cluster_config.get('eps', self.eps)\n            self.min_samples = cluster_config.get('min_samples', self.min_samples)\n            self.linkage = cluster_config.get('linkage', self.linkage)\n        \n        if 'classification' in config_data:\n            class_config = config_data['classification']\n            self.classification_algorithm = class_config.get('algorithm', self.classification_algorithm)\n            self.test_size = class_config.get('test_size', self.test_size)\n            self.cv_folds = class_config.get('cv_folds', self.cv_folds)\n        \n        if 'general' in config_data:\n            general_config = config_data['general']\n            self.random_state = general_config.get('random_state', self.random_state)\n            self.verbose = general_config.get('verbose', self.verbose)",
        "src/mining/association_rules.py": "#!/usr/bin/env python3\n\"\"\"\nAssociation rules mining module for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\"\"\"\n\nimport pandas as pd\nimport numpy as np\nfrom typing import List, Dict, Any, Optional\nfrom mlxtend.frequent_patterns import association_rules\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass AssociationRules:\n    \"\"\"\n    Association rules mining class for {{ project_name }}\n    \n    Generates association rules from frequent patterns with\n    support, confidence, and lift metrics.\n    \"\"\"\n    \n    def __init__(self, config=None):\n        \"\"\"Initialize association rules miner\"\"\"\n        self.config = config or {}\n        self.min_confidence = self.config.get('min_confidence', 0.5)\n        self.min_lift = self.config.get('min_lift', 1.0)\n        self.metric = self.config.get('rule_metric', 'confidence')\n        \n        # Rules storage\n        self.rules = []\n        self.frequent_patterns = None\n        \n        logger.info(f\"Initialized AssociationRules with min_confidence={self.min_confidence}\")\n    \n    def mine_rules(self, frequent_patterns: List[Dict[str, Any]]) -> List[Dict[str, Any]]:\n        \"\"\"\n        Mine association rules from frequent patterns\n        \n        Args:\n            frequent_patterns: List of frequent patterns from PatternFinder\n            \n        Returns:\n            List of association rules with metrics\n        \"\"\"\n        logger.info(\"Mining association rules...\")\n        \n        if not frequent_patterns:\n            logger.warning(\"No frequent patterns provided\")\n            return []\n        \n        # Convert patterns to mlxtend format\n        patterns_df = self._convert_patterns_to_df(frequent_patterns)\n        \n        # Generate association rules\n        rules_df = association_rules(\n            patterns_df,\n            metric=self.metric,\n            min_threshold=self.min_confidence,\n            num_itemsets=len(patterns_df)\n        )\n        \n        # Filter by lift if specified\n        if self.min_lift > 0:\n            rules_df = rules_df[rules_df['lift'] >= self.min_lift]\n        \n        # Convert to standard format\n        self.rules = self._format_rules(rules_df)\n        \n        logger.info(f\"Found {len(self.rules)} association rules\")\n        return self.rules\n    \n    def _convert_patterns_to_df(self, patterns: List[Dict[str, Any]]) -> pd.DataFrame:\n        \"\"\"Convert pattern list to DataFrame for mlxtend\"\"\"\n        \n        # Create DataFrame with itemsets and support\n        patterns_data = []\n        for pattern in patterns:\n            patterns_data.append({\n                'itemsets': frozenset(pattern['itemset']),\n                'support': pattern['support']\n            })\n        \n        return pd.DataFrame(patterns_data)\n    \n    def _format_rules(self, rules_df: pd.DataFrame) -> List[Dict[str, Any]]:\n        \"\"\"Format rules DataFrame to standard format\"\"\"\n        formatted_rules = []\n        \n        for _, row in rules_df.iterrows():\n            rule = {\n                'antecedents': list(row['antecedents']),\n                'consequents': list(row['consequents']),\n                'support': float(row['support']),\n                'confidence': float(row['confidence']),\n                'lift': float(row['lift']),\n                'conviction': float(row.get('conviction', 0)),\n                'leverage': float(row.get('leverage', 0)),\n                'zhang_metric': float(row.get('zhangs_metric', 0)),\n                'rule_strength': self._calculate_rule_strength(row)\n            }\n            formatted_rules.append(rule)\n        \n        # Sort by confidence (descending)\n        formatted_rules.sort(key=lambda x: x['confidence'], reverse=True)\n        \n        return formatted_rules\n    \n    def _calculate_rule_strength(self, rule_row) -> float:\n        \"\"\"Calculate overall rule strength\"\"\"\n        # Combine multiple metrics for rule strength\n        confidence = rule_row['confidence']\n        lift = rule_row['lift']\n        support = rule_row['support']\n        \n        # Weighted combination\n        strength = (0.4 * confidence + 0.4 * (lift / 10) + 0.2 * support)\n        return min(strength, 1.0)  # Cap at 1.0\n    \n    def filter_rules_by_confidence(self, min_confidence: float) -> List[Dict[str, Any]]:\n        \"\"\"Filter rules by confidence threshold\"\"\"\n        filtered = [rule for rule in self.rules if rule['confidence'] >= min_confidence]\n        logger.info(f\"Filtered to {len(filtered)} rules with confidence >= {min_confidence}\")\n        return filtered\n    \n    def filter_rules_by_lift(self, min_lift: float) -> List[Dict[str, Any]]:\n        \"\"\"Filter rules by lift threshold\"\"\"\n        filtered = [rule for rule in self.rules if rule['lift'] >= min_lift]\n        logger.info(f\"Filtered to {len(filtered)} rules with lift >= {min_lift}\")\n        return filtered\n    \n    def get_top_rules(self, n: int = 10, metric: str = 'confidence') -> List[Dict[str, Any]]:\n        \"\"\"Get top N rules by specified metric\"\"\"\n        if metric not in ['confidence', 'lift', 'support', 'rule_strength']:\n            logger.warning(f\"Unknown metric: {metric}, using confidence\")\n            metric = 'confidence'\n        \n        sorted_rules = sorted(self.rules, key=lambda x: x[metric], reverse=True)\n        return sorted_rules[:n]\n    \n    def find_rules_with_item(self, item: str, position: str = 'both') -> List[Dict[str, Any]]:\n        \"\"\"\n        Find rules containing specific item\n        \n        Args:\n            item: Item to search for\n            position: 'antecedent', 'consequent', or 'both'\n        \"\"\"\n        matching_rules = []\n        \n        for rule in self.rules:\n            if position in ['antecedent', 'both']:\n                if item in rule['antecedents']:\n                    matching_rules.append(rule)\n                    continue\n            \n            if position in ['consequent', 'both']:\n                if item in rule['consequents']:\n                    matching_rules.append(rule)\n        \n        logger.info(f\"Found {len(matching_rules)} rules containing '{item}' in {position}\")\n        return matching_rules\n    \n    def get_rule_statistics(self) -> Dict[str, Any]:\n        \"\"\"Get statistics about mined rules\"\"\"\n        if not self.rules:\n            return {\"error\": \"No rules found\"}\n        \n        confidences = [r['confidence'] for r in self.rules]\n        lifts = [r['lift'] for r in self.rules]\n        supports = [r['support'] for r in self.rules]\n        \n        stats = {\n            'total_rules': len(self.rules),\n            'confidence_stats': {\n                'min': min(confidences),\n                'max': max(confidences),\n                'mean': np.mean(confidences),\n                'std': np.std(confidences)\n            },\n            'lift_stats': {\n                'min': min(lifts),\n                'max': max(lifts),\n                'mean': np.mean(lifts),\n                'std': np.std(lifts)\n            },\n            'support_stats': {\n                'min': min(supports),\n                'max': max(supports),\n                'mean': np.mean(supports),\n                'std': np.std(supports)\n            },\n            'strong_rules_count': len([r for r in self.rules if r['lift'] > 1 and r['confidence'] > 0.7])\n        }\n        \n        return stats",
        "src/mining/clustering.py": "#!/usr/bin/env python3\n\"\"\"\nClustering analysis module for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\"\"\"\n\nimport numpy as np\nimport pandas as pd\nfrom typing import Dict, Any, Optional, List, Tuple\nfrom sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import silhouette_score, calinski_harabasz_score\nfrom sklearn.decomposition import PCA\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass ClusterAnalyzer:\n    \"\"\"\n    Clustering analysis class for {{ project_name }}\n    \n    Supports multiple clustering algorithms and evaluation metrics.\n    \"\"\"\n    \n    def __init__(self, config=None):\n        \"\"\"Initialize cluster analyzer\"\"\"\n        self.config = config or {}\n        self.n_clusters = self.config.get('n_clusters', 3)\n        self.algorithm = self.config.get('clustering_algorithm', 'kmeans')\n        self.random_state = self.config.get('random_state', 42)\n        \n        # Results storage\n        self.cluster_model = None\n        self.cluster_labels = None\n        self.cluster_centers = None\n        self.scaled_data = None\n        self.scaler = StandardScaler()\n        \n        logger.info(f\"Initialized ClusterAnalyzer with {self.algorithm} algorithm\")\n    \n    def perform_clustering(self, data: pd.DataFrame) -> Dict[str, Any]:\n        \"\"\"\n        Perform clustering analysis\n        \n        Args:\n            data: Input dataset\n            \n        Returns:\n            Dictionary with clustering results and metrics\n        \"\"\"\n        logger.info(f\"Starting clustering analysis with {self.algorithm}...\")\n        \n        # Prepare data\n        prepared_data = self._prepare_data(data)\n        \n        # Apply clustering algorithm\n        if self.algorithm == 'kmeans':\n            results = self._kmeans_clustering(prepared_data)\n        elif self.algorithm == 'dbscan':\n            results = self._dbscan_clustering(prepared_data)\n        elif self.algorithm == 'hierarchical':\n            results = self._hierarchical_clustering(prepared_data)\n        else:\n            logger.warning(f\"Unknown algorithm: {self.algorithm}, using KMeans\")\n            results = self._kmeans_clustering(prepared_data)\n        \n        # Evaluate clustering\n        evaluation = self._evaluate_clustering(prepared_data, self.cluster_labels)\n        results.update(evaluation)\n        \n        # Add cluster analysis\n        cluster_analysis = self._analyze_clusters(data, self.cluster_labels)\n        results['cluster_analysis'] = cluster_analysis\n        \n        logger.info(f\"Clustering completed with {results.get('n_clusters', 0)} clusters\")\n        return results\n    \n    def _prepare_data(self, data: pd.DataFrame) -> np.ndarray:\n        \"\"\"Prepare data for clustering\"\"\"\n        \n        # Select numeric columns only\n        numeric_data = data.select_dtypes(include=[np.number])\n        \n        if numeric_data.empty:\n            raise ValueError(\"No numeric columns found for clustering\")\n        \n        # Handle missing values\n        numeric_data = numeric_data.fillna(numeric_data.mean())\n        \n        # Scale the data\n        self.scaled_data = self.scaler.fit_transform(numeric_data)\n        \n        logger.info(f\"Prepared data shape: {self.scaled_data.shape}\")\n        return self.scaled_data\n    \n    def _kmeans_clustering(self, data: np.ndarray) -> Dict[str, Any]:\n        \"\"\"Perform K-Means clustering\"\"\"\n        \n        self.cluster_model = KMeans(\n            n_clusters=self.n_clusters,\n            random_state=self.random_state,\n            n_init=10\n        )\n        \n        self.cluster_labels = self.cluster_model.fit_predict(data)\n        self.cluster_centers = self.cluster_model.cluster_centers_\n        \n        return {\n            'algorithm': 'kmeans',\n            'n_clusters': self.n_clusters,\n            'cluster_centers': self.cluster_centers.tolist(),\n            'inertia': float(self.cluster_model.inertia_)\n        }\n    \n    def _dbscan_clustering(self, data: np.ndarray) -> Dict[str, Any]:\n        \"\"\"Perform DBSCAN clustering\"\"\"\n        \n        eps = self.config.get('eps', 0.5)\n        min_samples = self.config.get('min_samples', 5)\n        \n        self.cluster_model = DBSCAN(eps=eps, min_samples=min_samples)\n        self.cluster_labels = self.cluster_model.fit_predict(data)\n        \n        n_clusters = len(set(self.cluster_labels)) - (1 if -1 in self.cluster_labels else 0)\n        n_noise = list(self.cluster_labels).count(-1)\n        \n        return {\n            'algorithm': 'dbscan',\n            'n_clusters': n_clusters,\n            'n_noise_points': n_noise,\n            'eps': eps,\n            'min_samples': min_samples\n        }\n    \n    def _hierarchical_clustering(self, data: np.ndarray) -> Dict[str, Any]:\n        \"\"\"Perform Agglomerative clustering\"\"\"\n        \n        linkage = self.config.get('linkage', 'ward')\n        \n        self.cluster_model = AgglomerativeClustering(\n            n_clusters=self.n_clusters,\n            linkage=linkage\n        )\n        \n        self.cluster_labels = self.cluster_model.fit_predict(data)\n        \n        return {\n            'algorithm': 'hierarchical',\n            'n_clusters': self.n_clusters,\n            'linkage': linkage\n        }\n    \n    def _evaluate_clustering(self, data: np.ndarray, labels: np.ndarray) -> Dict[str, Any]:\n        \"\"\"Evaluate clustering quality\"\"\"\n        \n        evaluation = {}\n        \n        # Skip evaluation if only one cluster or all noise points\n        unique_labels = set(labels)\n        if len(unique_labels) <= 1 or (len(unique_labels) == 2 and -1 in unique_labels):\n            logger.warning(\"Cannot evaluate clustering: insufficient clusters\")\n            return {'evaluation_error': 'Insufficient clusters for evaluation'}\n        \n        try:\n            # Silhouette score\n            if len(unique_labels) > 1:\n                silhouette = silhouette_score(data, labels)\n                evaluation['silhouette_score'] = float(silhouette)\n            \n            # Calinski-Harabasz score\n            if len(unique_labels) > 1:\n                ch_score = calinski_harabasz_score(data, labels)\n                evaluation['calinski_harabasz_score'] = float(ch_score)\n            \n            # Cluster distribution\n            unique, counts = np.unique(labels, return_counts=True)\n            evaluation['cluster_distribution'] = dict(zip(unique.tolist(), counts.tolist()))\n            \n        except Exception as e:\n            logger.warning(f\"Error in clustering evaluation: {str(e)}\")\n            evaluation['evaluation_error'] = str(e)\n        \n        return evaluation\n    \n    def _analyze_clusters(self, original_data: pd.DataFrame, labels: np.ndarray) -> Dict[str, Any]:\n        \"\"\"Analyze cluster characteristics\"\"\"\n        \n        analysis = {}\n        \n        # Add cluster labels to original data\n        data_with_clusters = original_data.copy()\n        data_with_clusters['cluster'] = labels\n        \n        # Analyze each cluster\n        for cluster_id in set(labels):\n            if cluster_id == -1:  # Skip noise points in DBSCAN\n                continue\n            \n            cluster_data = data_with_clusters[data_with_clusters['cluster'] == cluster_id]\n            \n            cluster_info = {\n                'size': len(cluster_data),\n                'percentage': len(cluster_data) / len(original_data) * 100\n            }\n            \n            # Statistics for numeric columns\n            numeric_cols = original_data.select_dtypes(include=[np.number]).columns\n            if len(numeric_cols) > 0:\n                cluster_info['numeric_stats'] = cluster_data[numeric_cols].describe().to_dict()\n            \n            # Mode for categorical columns\n            categorical_cols = original_data.select_dtypes(include=['object', 'category']).columns\n            if len(categorical_cols) > 0:\n                cluster_info['categorical_modes'] = cluster_data[categorical_cols].mode().iloc[0].to_dict()\n            \n            analysis[f'cluster_{cluster_id}'] = cluster_info\n        \n        return analysis\n    \n    def find_optimal_clusters(self, data: pd.DataFrame, max_clusters: int = 10) -> Dict[str, Any]:\n        \"\"\"Find optimal number of clusters using elbow method\"\"\"\n        \n        logger.info(f\"Finding optimal clusters up to {max_clusters}...\")\n        \n        prepared_data = self._prepare_data(data)\n        \n        inertias = []\n        silhouette_scores = []\n        k_range = range(2, max_clusters + 1)\n        \n        for k in k_range:\n            kmeans = KMeans(n_clusters=k, random_state=self.random_state, n_init=10)\n            labels = kmeans.fit_predict(prepared_data)\n            \n            inertias.append(kmeans.inertia_)\n            silhouette_scores.append(silhouette_score(prepared_data, labels))\n        \n        # Find elbow point (simplified)\n        elbow_k = self._find_elbow_point(list(k_range), inertias)\n        \n        # Best silhouette score\n        best_silhouette_k = k_range[np.argmax(silhouette_scores)]\n        \n        return {\n            'k_range': list(k_range),\n            'inertias': inertias,\n            'silhouette_scores': silhouette_scores,\n            'elbow_k': elbow_k,\n            'best_silhouette_k': best_silhouette_k,\n            'recommended_k': best_silhouette_k  # Use silhouette as primary metric\n        }\n    \n    def _find_elbow_point(self, k_values: List[int], inertias: List[float]) -> int:\n        \"\"\"Find elbow point in inertia curve\"\"\"\n        \n        # Simple elbow detection using differences\n        differences = []\n        for i in range(1, len(inertias)):\n            diff = inertias[i-1] - inertias[i]\n            differences.append(diff)\n        \n        # Find where difference decreases significantly\n        if len(differences) > 1:\n            for i in range(1, len(differences)):\n                if differences[i] < differences[i-1] * 0.5:  # 50% decrease\n                    return k_values[i]\n        \n        # Default to middle value if no clear elbow\n        return k_values[len(k_values) // 2]\n    \n    def visualize_clusters_2d(self, data: pd.DataFrame) -> Dict[str, Any]:\n        \"\"\"Create 2D visualization using PCA\"\"\"\n        \n        if self.cluster_labels is None:\n            raise ValueError(\"Must perform clustering first\")\n        \n        # Reduce to 2D using PCA\n        pca = PCA(n_components=2, random_state=self.random_state)\n        data_2d = pca.fit_transform(self.scaled_data)\n        \n        # Prepare visualization data\n        viz_data = {\n            'pca_coordinates': data_2d.tolist(),\n            'cluster_labels': self.cluster_labels.tolist(),\n            'explained_variance_ratio': pca.explained_variance_ratio_.tolist(),\n            'total_explained_variance': float(sum(pca.explained_variance_ratio_))\n        }\n        \n        return viz_data\n    \n    def get_cluster_summary(self) -> Dict[str, Any]:\n        \"\"\"Get summary of clustering results\"\"\"\n        \n        if self.cluster_labels is None:\n            return {\"error\": \"No clustering performed yet\"}\n        \n        unique_labels = set(self.cluster_labels)\n        n_clusters = len(unique_labels) - (1 if -1 in unique_labels else 0)\n        \n        summary = {\n            'algorithm': self.algorithm,\n            'n_clusters': n_clusters,\n            'total_points': len(self.cluster_labels),\n            'cluster_sizes': {},\n            'largest_cluster': None,\n            'smallest_cluster': None\n        }\n        \n        # Calculate cluster sizes\n        for label in unique_labels:\n            if label != -1:  # Exclude noise points\n                size = list(self.cluster_labels).count(label)\n                summary['cluster_sizes'][str(label)] = size\n        \n        if summary['cluster_sizes']:\n            sizes = list(summary['cluster_sizes'].values())\n            summary['largest_cluster'] = max(sizes)\n            summary['smallest_cluster'] = min(sizes)\n        \n        return summary",
        "src/mining/pattern_finder.py": "#!/usr/bin/env python3\n\"\"\"\nPattern mining module for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\"\"\"\n\nimport pandas as pd\nimport numpy as np\nfrom typing import List, Dict, Any, Optional, Set, Tuple\nfrom mlxtend.frequent_patterns import apriori, fpgrowth\nfrom mlxtend.preprocessing import TransactionEncoder\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass PatternFinder:\n    \"\"\"\n    Frequent pattern mining class for {{ project_name }}\n    \n    Supports multiple algorithms for finding frequent patterns:\n    - Apriori algorithm\n    - FP-Growth algorithm\n    - Custom pattern mining\n    \"\"\"\n    \n    def __init__(self, config=None):\n        \"\"\"Initialize pattern finder with configuration\"\"\"\n        self.config = config or {}\n        self.min_support = self.config.get('min_support', 0.1)\n        self.algorithm = self.config.get('pattern_algorithm', 'apriori')\n        self.max_len = self.config.get('max_pattern_length', None)\n        \n        # Pattern storage\n        self.frequent_patterns = []\n        self.transaction_data = None\n        self.encoded_data = None\n        \n        logger.info(f\"Initialized PatternFinder with min_support={self.min_support}\")\n    \n    def find_frequent_patterns(self, data: pd.DataFrame) -> List[Dict[str, Any]]:\n        \"\"\"\n        Find frequent patterns in the data\n        \n        Args:\n            data: Input dataset\n            \n        Returns:\n            List of frequent patterns with support values\n        \"\"\"\n        logger.info(\"Starting frequent pattern mining...\")\n        \n        # Prepare data for pattern mining\n        self._prepare_transaction_data(data)\n        \n        # Apply selected algorithm\n        if self.algorithm == 'apriori':\n            patterns = self._apriori_mining()\n        elif self.algorithm == 'fpgrowth':\n            patterns = self._fpgrowth_mining()\n        else:\n            logger.warning(f\"Unknown algorithm: {self.algorithm}, using Apriori\")\n            patterns = self._apriori_mining()\n        \n        # Convert to standard format\n        self.frequent_patterns = self._format_patterns(patterns)\n        \n        logger.info(f\"Found {len(self.frequent_patterns)} frequent patterns\")\n        return self.frequent_patterns\n    \n    def _prepare_transaction_data(self, data: pd.DataFrame):\n        \"\"\"Prepare data for transaction-based mining\"\"\"\n        \n        # Check if data is already in transaction format\n        if self._is_transaction_format(data):\n            logger.info(\"Data is in transaction format\")\n            self.transaction_data = data\n        else:\n            logger.info(\"Converting data to transaction format\")\n            self.transaction_data = self._convert_to_transactions(data)\n        \n        # Encode transactions for mining algorithms\n        self._encode_transactions()\n    \n    def _is_transaction_format(self, data: pd.DataFrame) -> bool:\n        \"\"\"Check if data is in transaction format\"\"\"\n        # Simple heuristic: check if all values are binary (0/1) or boolean\n        return data.dtypes.apply(lambda x: x in ['bool', 'int64', 'int32']).all()\n    \n    def _convert_to_transactions(self, data: pd.DataFrame) -> pd.DataFrame:\n        \"\"\"Convert regular data to transaction format\"\"\"\n        \n        # For categorical data, create binary indicators\n        if data.select_dtypes(include=['object', 'category']).shape[1] > 0:\n            logger.info(\"Converting categorical data to binary format\")\n            transaction_data = pd.get_dummies(data, prefix_sep='=')\n        \n        # For numerical data, bin values and create binary indicators\n        elif data.select_dtypes(include=[np.number]).shape[1] > 0:\n            logger.info(\"Converting numerical data to binary format\")\n            transaction_data = pd.DataFrame()\n            \n            for column in data.columns:\n                if data[column].dtype in [np.number]:\n                    # Create bins\n                    bins = pd.qcut(data[column], q=5, duplicates='drop', labels=False)\n                    bin_names = [f\"{column}_bin_{i}\" for i in range(bins.max() + 1)]\n                    \n                    # Create binary indicators\n                    for i, bin_name in enumerate(bin_names):\n                        transaction_data[bin_name] = (bins == i).astype(int)\n                else:\n                    # Categorical column\n                    dummies = pd.get_dummies(data[column], prefix=column)\n                    transaction_data = pd.concat([transaction_data, dummies], axis=1)\n        \n        else:\n            # Data is already binary\n            transaction_data = data.astype(bool)\n        \n        return transaction_data\n    \n    def _encode_transactions(self):\n        \"\"\"Encode transaction data for mining\"\"\"\n        \n        # Convert to list of transactions\n        transactions = []\n        for _, row in self.transaction_data.iterrows():\n            # Get items that are present (value = True or 1)\n            transaction = [col for col, val in row.items() if val]\n            if transaction:  # Only add non-empty transactions\n                transactions.append(transaction)\n        \n        if not transactions:\n            raise ValueError(\"No valid transactions found in data\")\n        \n        # Encode using TransactionEncoder\n        te = TransactionEncoder()\n        self.encoded_data = te.fit(transactions).transform(transactions)\n        self.encoded_data = pd.DataFrame(self.encoded_data, columns=te.columns_)\n        \n        logger.info(f\"Encoded {len(transactions)} transactions with {self.encoded_data.shape[1]} items\")\n    \n    def _apriori_mining(self) -> pd.DataFrame:\n        \"\"\"Run Apriori algorithm\"\"\"\n        logger.info(\"Running Apriori algorithm...\")\n        \n        frequent_itemsets = apriori(\n            self.encoded_data, \n            min_support=self.min_support,\n            max_len=self.max_len,\n            use_colnames=True\n        )\n        \n        return frequent_itemsets\n    \n    def _fpgrowth_mining(self) -> pd.DataFrame:\n        \"\"\"Run FP-Growth algorithm\"\"\"\n        logger.info(\"Running FP-Growth algorithm...\")\n        \n        frequent_itemsets = fpgrowth(\n            self.encoded_data,\n            min_support=self.min_support,\n            max_len=self.max_len,\n            use_colnames=True\n        )\n        \n        return frequent_itemsets\n    \n    def _format_patterns(self, patterns: pd.DataFrame) -> List[Dict[str, Any]]:\n        \"\"\"Format patterns to standard format\"\"\"\n        formatted_patterns = []\n        \n        for _, row in patterns.iterrows():\n            pattern = {\n                'itemset': list(row['itemsets']),\n                'support': float(row['support']),\n                'length': len(row['itemsets']),\n                'confidence': None,  # Will be calculated if needed\n                'lift': None  # Will be calculated if needed\n            }\n            formatted_patterns.append(pattern)\n        \n        # Sort by support (descending)\n        formatted_patterns.sort(key=lambda x: x['support'], reverse=True)\n        \n        return formatted_patterns\n    \n    def find_closed_patterns(self) -> List[Dict[str, Any]]:\n        \"\"\"Find closed frequent patterns\"\"\"\n        if not self.frequent_patterns:\n            raise ValueError(\"Must find frequent patterns first\")\n        \n        logger.info(\"Finding closed patterns...\")\n        \n        closed_patterns = []\n        \n        for i, pattern in enumerate(self.frequent_patterns):\n            is_closed = True\n            current_itemset = set(pattern['itemset'])\n            current_support = pattern['support']\n            \n            # Check if any superset has the same support\n            for other_pattern in self.frequent_patterns:\n                other_itemset = set(other_pattern['itemset'])\n                other_support = other_pattern['support']\n                \n                # If other pattern is a superset with same support, current is not closed\n                if (current_itemset < other_itemset and \n                    abs(current_support - other_support) < 1e-6):\n                    is_closed = False\n                    break\n            \n            if is_closed:\n                pattern['pattern_type'] = 'closed'\n                closed_patterns.append(pattern)\n        \n        logger.info(f\"Found {len(closed_patterns)} closed patterns\")\n        return closed_patterns\n    \n    def find_maximal_patterns(self) -> List[Dict[str, Any]]:\n        \"\"\"Find maximal frequent patterns\"\"\"\n        if not self.frequent_patterns:\n            raise ValueError(\"Must find frequent patterns first\")\n        \n        logger.info(\"Finding maximal patterns...\")\n        \n        maximal_patterns = []\n        \n        for pattern in self.frequent_patterns:\n            is_maximal = True\n            current_itemset = set(pattern['itemset'])\n            \n            # Check if any superset is also frequent\n            for other_pattern in self.frequent_patterns:\n                other_itemset = set(other_pattern['itemset'])\n                \n                # If other pattern is a proper superset, current is not maximal\n                if current_itemset < other_itemset:\n                    is_maximal = False\n                    break\n            \n            if is_maximal:\n                pattern['pattern_type'] = 'maximal'\n                maximal_patterns.append(pattern)\n        \n        logger.info(f\"Found {len(maximal_patterns)} maximal patterns\")\n        return maximal_patterns\n    \n    def filter_patterns_by_length(self, min_length: int = 1, max_length: int = None) -> List[Dict[str, Any]]:\n        \"\"\"Filter patterns by length\"\"\"\n        if not self.frequent_patterns:\n            raise ValueError(\"Must find frequent patterns first\")\n        \n        filtered = [\n            pattern for pattern in self.frequent_patterns\n            if len(pattern['itemset']) >= min_length and\n            (max_length is None or len(pattern['itemset']) <= max_length)\n        ]\n        \n        logger.info(f\"Filtered to {len(filtered)} patterns with length {min_length}-{max_length}\")\n        return filtered\n    \n    def filter_patterns_by_support(self, min_support: float = None, max_support: float = None) -> List[Dict[str, Any]]:\n        \"\"\"Filter patterns by support\"\"\"\n        if not self.frequent_patterns:\n            raise ValueError(\"Must find frequent patterns first\")\n        \n        min_sup = min_support if min_support is not None else 0.0\n        max_sup = max_support if max_support is not None else 1.0\n        \n        filtered = [\n            pattern for pattern in self.frequent_patterns\n            if min_sup <= pattern['support'] <= max_sup\n        ]\n        \n        logger.info(f\"Filtered to {len(filtered)} patterns with support {min_sup}-{max_sup}\")\n        return filtered\n    \n    def get_pattern_statistics(self) -> Dict[str, Any]:\n        \"\"\"Get statistics about found patterns\"\"\"\n        if not self.frequent_patterns:\n            return {\"error\": \"No patterns found\"}\n        \n        supports = [p['support'] for p in self.frequent_patterns]\n        lengths = [p['length'] for p in self.frequent_patterns]\n        \n        stats = {\n            'total_patterns': len(self.frequent_patterns),\n            'support_stats': {\n                'min': min(supports),\n                'max': max(supports),\n                'mean': np.mean(supports),\n                'std': np.std(supports)\n            },\n            'length_stats': {\n                'min': min(lengths),\n                'max': max(lengths),\n                'mean': np.mean(lengths),\n                'mode': max(set(lengths), key=lengths.count)\n            },\n            'length_distribution': {length: lengths.count(length) for length in set(lengths)}\n        }\n        \n        return stats\n    \n    def save_patterns(self, output_path: str):\n        \"\"\"Save patterns to file\"\"\"\n        import json\n        from pathlib import Path\n        \n        output_path = Path(output_path)\n        output_path.parent.mkdir(parents=True, exist_ok=True)\n        \n        # Prepare data for JSON serialization\n        patterns_data = {\n            'patterns': self.frequent_patterns,\n            'statistics': self.get_pattern_statistics(),\n            'config': {\n                'min_support': self.min_support,\n                'algorithm': self.algorithm,\n                'max_length': self.max_len\n            }\n        }\n        \n        with open(output_path, 'w') as f:\n            json.dump(patterns_data, f, indent=2, default=str)\n        \n        logger.info(f\"Patterns saved to {output_path}\")"
      }
    },
    "fastapi": {
      "structure": "├── components/\n│   └── model.py\n├── core/\n│   └── config.py\n├── main.py\n└── template.yaml\n",
      "files": {
        "main.py": "#!/usr/bin/env python3\n\"\"\"\n{{ project_name }} - FastAPI Application\nتطبيق API احترافي باستخدام FastAPI\n\nالمؤلف: Generated by PTG\nالتاريخ: {{ timestamp }}\n\"\"\"\n\nimport uvicorn\nfrom fastapi import FastAPI, Request, status\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.middleware.trustedhost import TrustedHostMiddleware\nfrom fastapi.responses import JSONResponse\nfrom fastapi.exceptions import RequestValidationError\nfrom starlette.exceptions import HTTPException\nfrom starlette.middleware.sessions import SessionMiddleware\nimport logging\nfrom contextlib import asynccontextmanager\nfrom typing import Union\nimport time\nimport os\n\n# إعدادات التطبيق\nfrom src.core.config import settings\nfrom src.core.security import get_current_user\nfrom src.db.database import create_db_and_tables, get_session\nfrom src.api.v1.api import api_router\nfrom src.middleware.logging import LoggingMiddleware\nfrom src.middleware.rate_limit import RateLimitMiddleware\n\n# إعداد التسجيل\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n)\nlogger = logging.getLogger(__name__)\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    \"\"\"\n    إدارة دورة حياة التطبيق\n    \"\"\"\n    # بدء التطبيق\n    logger.info(\"🚀 بدء تطبيق {{ project_name }}\")\n    \n    # إنشاء قاعدة البيانات والجداول\n    await create_db_and_tables()\n    logger.info(\"✅ تم إنشاء قاعدة البيانات\")\n    \n    # إعدادات إضافية للبدء\n    if settings.ENVIRONMENT == \"development\":\n        logger.info(\"🔧 وضع التطوير مُفعل\")\n    \n    yield\n    \n    # إنهاء التطبيق\n    logger.info(\"🛑 إنهاء تطبيق {{ project_name }}\")\n\ndef create_application() -> FastAPI:\n    \"\"\"\n    إنشاء وتكوين تطبيق FastAPI\n    \"\"\"\n    app = FastAPI(\n        title=settings.PROJECT_NAME,\n        description=\"API احترافي للمشروع {{ project_name }}\",\n        version=\"1.0.0\",\n        openapi_url=f\"{settings.API_V1_STR}/openapi.json\" if settings.ENVIRONMENT != \"production\" else None,\n        docs_url=\"/docs\" if settings.ENVIRONMENT != \"production\" else None,\n        redoc_url=\"/redoc\" if settings.ENVIRONMENT != \"production\" else None,\n        lifespan=lifespan\n    )\n    \n    # إضافة الـ middleware\n    setup_middleware(app)\n    \n    # إضافة معالجات الاستثناءات\n    setup_exception_handlers(app)\n    \n    # إضافة المسارات\n    setup_routes(app)\n    \n    return app\n\ndef setup_middleware(app: FastAPI):\n    \"\"\"\n    إعداد الـ middleware للتطبيق\n    \"\"\"\n    # CORS Middleware\n    if settings.BACKEND_CORS_ORIGINS:\n        app.add_middleware(\n            CORSMiddleware,\n            allow_origins=[str(origin) for origin in settings.BACKEND_CORS_ORIGINS],\n            allow_credentials=True,\n            allow_methods=[\"*\"],\n            allow_headers=[\"*\"],\n        )\n    \n    # Session Middleware\n    app.add_middleware(\n        SessionMiddleware,\n        secret_key=settings.SECRET_KEY,\n        max_age=settings.SESSION_TIMEOUT,\n        https_only=settings.ENVIRONMENT == \"production\"\n    )\n    \n    # Trusted Host Middleware\n    if settings.ALLOWED_HOSTS:\n        app.add_middleware(\n            TrustedHostMiddleware,\n            allowed_hosts=settings.ALLOWED_HOSTS\n        )\n    \n    # Custom Rate Limiting Middleware\n    app.add_middleware(RateLimitMiddleware)\n    \n    # Custom Logging Middleware\n    app.add_middleware(LoggingMiddleware)\n\ndef setup_exception_handlers(app: FastAPI):\n    \"\"\"\n    إعداد معالجات الاستثناءات\n    \"\"\"\n    \n    @app.exception_handler(HTTPException)\n    async def http_exception_handler(request: Request, exc: HTTPException):\n        \"\"\"معالج أخطاء HTTP\"\"\"\n        logger.error(f\"HTTP {exc.status_code}: {exc.detail} - {request.url}\")\n        \n        return JSONResponse(\n            status_code=exc.status_code,\n            content={\n                \"success\": False,\n                \"error\": {\n                    \"code\": exc.status_code,\n                    \"message\": exc.detail,\n                    \"type\": \"http_error\"\n                },\n                \"timestamp\": time.time(),\n                \"path\": str(request.url)\n            },\n        )\n    \n    @app.exception_handler(RequestValidationError)\n    async def validation_exception_handler(request: Request, exc: RequestValidationError):\n        \"\"\"معالج أخطاء التحقق\"\"\"\n        errors = []\n        for error in exc.errors():\n            errors.append({\n                \"field\": \" -> \".join(str(x) for x in error[\"loc\"]),\n                \"message\": error[\"msg\"],\n                \"type\": error[\"type\"]\n            })\n        \n        logger.warning(f\"Validation error on {request.url}: {errors}\")\n        \n        return JSONResponse(\n            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n            content={\n                \"success\": False,\n                \"error\": {\n                    \"code\": 422,\n                    \"message\": \"خطأ في التحقق من البيانات\",\n                    \"type\": \"validation_error\",\n                    \"details\": errors\n                },\n                \"timestamp\": time.time(),\n                \"path\": str(request.url)\n            },\n        )\n    \n    @app.exception_handler(Exception)\n    async def general_exception_handler(request: Request, exc: Exception):\n        \"\"\"معالج الأخطاء العامة\"\"\"\n        logger.exception(f\"Unhandled exception on {request.url}: {str(exc)}\")\n        \n        # عدم إظهار تفاصيل الخطأ في الإنتاج\n        error_detail = str(exc) if settings.ENVIRONMENT != \"production\" else \"خطأ داخلي في الخادم\"\n        \n        return JSONResponse(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            content={\n                \"success\": False,\n                \"error\": {\n                    \"code\": 500,\n                    \"message\": error_detail,\n                    \"type\": \"internal_error\"\n                },\n                \"timestamp\": time.time(),\n                \"path\": str(request.url)\n            },\n        )\n\ndef setup_routes(app: FastAPI):\n    \"\"\"\n    إعداد مسارات التطبيق\n    \"\"\"\n    \n    @app.get(\"/\")\n    async def root():\n        \"\"\"المسار الرئيسي\"\"\"\n        return {\n            \"success\": True,\n            \"message\": \"مرحباً بك في {{ project_name }} API\",\n            \"version\": \"1.0.0\",\n            \"environment\": settings.ENVIRONMENT,\n            \"timestamp\": time.time()\n        }\n    \n    @app.get(\"/health\")\n    async def health_check():\n        \"\"\"فحص حالة التطبيق\"\"\"\n        # فحص قاعدة البيانات\n        try:\n            async with get_session() as session:\n                await session.execute(\"SELECT 1\")\n                db_status = \"healthy\"\n        except Exception as e:\n            logger.error(f\"Database health check failed: {str(e)}\")\n            db_status = \"unhealthy\"\n        \n        return {\n            \"success\": True,\n            \"status\": \"healthy\",\n            \"services\": {\n                \"database\": db_status,\n                \"api\": \"healthy\"\n            },\n            \"timestamp\": time.time()\n        }\n    \n    @app.get(\"/info\")\n    async def app_info():\n        \"\"\"معلومات التطبيق\"\"\"\n        return {\n            \"success\": True,\n            \"data\": {\n                \"name\": settings.PROJECT_NAME,\n                \"version\": \"1.0.0\",\n                \"environment\": settings.ENVIRONMENT,\n                \"debug\": settings.DEBUG,\n                \"api_version\": settings.API_V1_STR,\n                \"features\": {\n                    \"authentication\": True,\n                    \"rate_limiting\": True,\n                    \"logging\": True,\n                    \"cors\": bool(settings.BACKEND_CORS_ORIGINS)\n                }\n            }\n        }\n    \n    # إضافة مسارات API\n    app.include_router(api_router, prefix=settings.API_V1_STR)\n\n# إنشاء التطبيق\napp = create_application()\n\n# إضافة middleware للأمان الإضافي\n@app.middleware(\"http\")\nasync def security_headers_middleware(request: Request, call_next):\n    \"\"\"إضافة عناوين الأمان\"\"\"\n    response = await call_next(request)\n    \n    # إضافة عناوين الأمان\n    response.headers[\"X-Content-Type-Options\"] = \"nosniff\"\n    response.headers[\"X-Frame-Options\"] = \"DENY\"\n    response.headers[\"X-XSS-Protection\"] = \"1; mode=block\"\n    response.headers[\"Strict-Transport-Security\"] = \"max-age=31536000; includeSubDomains\"\n    response.headers[\"Referrer-Policy\"] = \"strict-origin-when-cross-origin\"\n    \n    return response\n\n# إضافة middleware لقياس الأداء\n@app.middleware(\"http\")\nasync def performance_middleware(request: Request, call_next):\n    \"\"\"قياس أداء الطلبات\"\"\"\n    start_time = time.time()\n    \n    response = await call_next(request)\n    \n    process_time = time.time() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    \n    # تسجيل الطلبات البطيئة\n    if process_time > 1.0:  # أكثر من ثانية\n        logger.warning(f\"Slow request: {request.method} {request.url} took {process_time:.2f}s\")\n    \n    return response\n\nif __name__ == \"__main__\":\n    # تشغيل الخادم مباشرة (للتطوير فقط)\n    uvicorn.run(\n        \"main:app\",\n        host=\"0.0.0.0\",\n        port=int(os.environ.get(\"PORT\", 8000)),\n        reload=settings.ENVIRONMENT == \"development\",\n        log_level=\"info\",\n        workers=1 if settings.ENVIRONMENT == \"development\" else 4,\n        access_log=settings.ENVIRONMENT == \"development\"\n    )",
        "template.yaml": "name: \"python-fastapi\"\nversion: \"1.0.0\"\ndescription: \"قالب FastAPI شامل للمشاريع الاحترافية\"\nlanguage: \"python\"\nframework: \"fastapi\"\n\nstructure:\n  directories:\n    - \"src\"\n    - \"src/api\"\n    - \"src/api/v1\"\n    - \"src/api/v1/endpoints\"\n    - \"src/models\"\n    - \"src/schemas\"\n    - \"src/services\"\n    - \"src/core\"\n    - \"src/db\"\n    - \"src/utils\"\n    - \"src/middleware\"\n    - \"tests\"\n    - \"tests/api\"\n    - \"tests/services\"\n    - \"docs\"\n    - \"configs\"\n    - \"logs\"\n    - \"data\"\n    - \"scripts\"\n    - \"migrations\"\n\n  files:\n    - path: \"main.py\"\n      template: \"python/fastapi/main.py\"\n      type: \"template\"\n    \n    - path: \"src/__init__.py\"\n      content: \"# {{ project_name }} FastAPI Package\\n__version__ = '1.0.0'\\n__author__ = 'Generated by PTG'\\n\"\n      type: \"content\"\n    \n    - path: \"src/core/__init__.py\"\n      content: \"# Core utilities\\n\"\n      type: \"content\"\n    \n    - path: \"src/core/config.py\"\n      template: \"python/fastapi/core/config.py\"\n      type: \"template\"\n    \n    - path: \"src/core/security.py\"\n      template: \"python/fastapi/core/security.py\"\n      type: \"template\"\n    \n    - path: \"src/db/__init__.py\"\n      content: \"# Database utilities\\n\"\n      type: \"content\"\n    \n    - path: \"src/db/database.py\"\n      template: \"python/fastapi/db/database.py\"\n      type: \"template\"\n    \n    - path: \"src/db/base.py\"\n      template: \"python/fastapi/db/base.py\"\n      type: \"template\"\n    \n    - path: \"src/api/__init__.py\"\n      content: \"# API package\\n\"\n      type: \"content\"\n    \n    - path: \"src/api/deps.py\"\n      template: \"python/fastapi/api/deps.py\"\n      type: \"template\"\n    \n    - path: \"src/api/v1/__init__.py\"\n      content: \"# API v1\\n\"\n      type: \"content\"\n    \n    - path: \"src/api/v1/api.py\"\n      template: \"python/fastapi/api/v1/api.py\"\n      type: \"template\"\n    \n    - path: \"requirements.txt\"\n      template: \"python/common/requirements.txt\"\n      type: \"template\"\n    \n    - path: \"README.md\"\n      template: \"python/common/README.md\"\n      type: \"template\"\n    \n    - path: \".gitignore\"\n      template: \"python/common/gitignore\"\n      type: \"template\"\n    \n    - path: \"Dockerfile\"\n      template: \"python/fastapi/Dockerfile\"\n      type: \"template\"\n    \n    - path: \"docker-compose.yml\"\n      template: \"python/fastapi/docker-compose.yml\"\n      type: \"template\"\n\nassets: []\n\npost_tasks:\n  - type: \"gitinit\"\n  - type: \"create_env_file\"\n\ncomponents:\n  model:\n    template: \"python/fastapi/components/model.py\"\n    path: \"src/models/{{component_name|lower}}.py\"\n  \n  schema:\n    template: \"python/fastapi/components/schema.py\"\n    path: \"src/schemas/{{component_name|lower}}.py\"\n  \n  service:\n    template: \"python/fastapi/components/service.py\"  \n    path: \"src/services/{{component_name|lower}}_service.py\"\n  \n  router:\n    template: \"python/fastapi/components/router.py\"\n    path: \"src/api/v1/endpoints/{{component_name|lower}}.py\"\n  \n  crud:\n    template: \"python/fastapi/components/crud.py\"\n    path: \"src/crud/{{component_name|lower}}.py\"",
        "components/model.py": "#!/usr/bin/env python3\n\"\"\"\n{{ component_name|title }} Model\nنموذج {{ component_name }} في قاعدة البيانات - FastAPI\n\nالملف: src/models/{{ component_name|lower }}.py\nالمؤلف: Generated by PTG\nالتاريخ: {{ timestamp }}\n\"\"\"\n\nfrom sqlalchemy import Column, Integer, String, Text, Boolean, DateTime, JSON, Index, event\nfrom sqlalchemy.ext.hybrid import hybrid_property\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import Session, relationship\nfrom sqlalchemy.sql import func\nfrom datetime import datetime, timedelta\nfrom typing import Optional, Dict, Any, List\nfrom pydantic import BaseModel, validator\nimport json\nimport uuid\n\nfrom src.db.base import Base\n\nclass {{ component_name|title }}(Base):\n    \"\"\"\n    نموذج {{ component_name|title }} في قاعدة البيانات\n    \"\"\"\n    __tablename__ = \"{{ component_name|lower }}s\"\n    \n    # الحقول الأساسية\n    id = Column(Integer, primary_key=True, index=True, autoincrement=True)\n    uuid = Column(String(36), unique=True, index=True, default=lambda: str(uuid.uuid4()))\n    name = Column(String(255), nullable=False, index=True)\n    description = Column(Text, nullable=True)\n    \n    # حقول الحالة والتحكم\n    is_active = Column(Boolean, default=True, nullable=False, index=True)\n    status = Column(String(50), default=\"active\", nullable=False, index=True)\n    priority = Column(Integer, default=0, nullable=False)\n    \n    # حقول التواريخ\n    created_at = Column(DateTime(timezone=True), server_default=func.now(), nullable=False)\n    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now(), nullable=False)\n    deleted_at = Column(DateTime(timezone=True), nullable=True)\n    \n    # حقول المستخدم (للتدقيق)\n    created_by = Column(Integer, nullable=True)  # Foreign key to User\n    updated_by = Column(Integer, nullable=True)  # Foreign key to User\n    \n    # حقول إضافية (JSON)\n    metadata = Column(JSON, default=dict)\n    settings = Column(JSON, default=dict)\n    tags = Column(JSON, default=list)\n    \n    # فهارس مركبة لتحسين الأداء\n    __table_args__ = (\n        Index('idx_{{ component_name|lower }}_name_status', 'name', 'status'),\n        Index('idx_{{ component_name|lower }}_active_created', 'is_active', 'created_at'),\n        Index('idx_{{ component_name|lower }}_status_priority', 'status', 'priority'),\n        Index('idx_{{ component_name|lower }}_uuid_active', 'uuid', 'is_active'),\n    )\n    \n    def __init__(self, **kwargs):\n        \"\"\"منشئ النموذج\"\"\"\n        super({{ component_name|title }}, self).__init__(**kwargs)\n        if not self.uuid:\n            self.uuid = str(uuid.uuid4())\n        if self.metadata is None:\n            self.metadata = {}\n        if self.settings is None:\n            self.settings = {}\n        if self.tags is None:\n            self.tags = []\n    \n    def __repr__(self) -> str:\n        return f\"<{{ component_name|title }}(id={self.id}, name='{self.name}', status='{self.status}')>\"\n    \n    def __str__(self) -> str:\n        return self.name\n    \n    # الخصائص المحسوبة\n    @hybrid_property\n    def is_recent(self) -> bool:\n        \"\"\"التحقق من كون العنصر حديث (أقل من 24 ساعة)\"\"\"\n        if not self.created_at:\n            return False\n        return datetime.utcnow() - self.created_at < timedelta(days=1)\n    \n    @hybrid_property\n    def is_old(self) -> bool:\n        \"\"\"التحقق من كون العنصر قديم (أكثر من 30 يوم)\"\"\"\n        if not self.created_at:\n            return False\n        return datetime.utcnow() - self.created_at > timedelta(days=30)\n    \n    @hybrid_property\n    def age_in_days(self) -> int:\n        \"\"\"عمر العنصر بالأيام\"\"\"\n        if not self.created_at:\n            return 0\n        return (datetime.utcnow() - self.created_at).days\n    \n    @hybrid_property\n    def is_deleted(self) -> bool:\n        \"\"\"التحقق من كون العنصر محذوف (حذف ناعم)\"\"\"\n        return self.deleted_at is not None\n    \n    @property\n    def full_name(self) -> str:\n        \"\"\"الاسم الكامل مع المعرف\"\"\"\n        return f\"{self.name} (#{self.id})\"\n    \n    # دوال النموذج\n    def save(self, db: Session) -> \"{{ component_name|title }}\":\n        \"\"\"حفظ النموذج في قاعدة البيانات\"\"\"\n        try:\n            self.updated_at = datetime.utcnow()\n            db.add(self)\n            db.commit()\n            db.refresh(self)\n            return self\n        except Exception as e:\n            db.rollback()\n            raise e\n    \n    def delete(self, db: Session, soft: bool = True) -> bool:\n        \"\"\"حذف النموذج\"\"\"\n        try:\n            if soft:\n                # حذف ناعم\n                self.deleted_at = datetime.utcnow()\n                self.is_active = False\n                self.status = \"deleted\"\n                self.save(db)\n            else:\n                # حذف فعلي\n                db.delete(self)\n                db.commit()\n            return True\n        except Exception as e:\n            db.rollback()\n            raise e\n    \n    def restore(self, db: Session) -> \"{{ component_name|title }}\":\n        \"\"\"استعادة العنصر المحذوف نعماً\"\"\"\n        if not self.is_deleted:\n            return self\n        \n        self.deleted_at = None\n        self.is_active = True\n        self.status = \"active\"\n        return self.save(db)\n    \n    def activate(self, db: Session) -> \"{{ component_name|title }}\":\n        \"\"\"تفعيل العنصر\"\"\"\n        self.is_active = True\n        self.status = \"active\"\n        return self.save(db)\n    \n    def deactivate(self, db: Session) -> \"{{ component_name|title }}\":\n        \"\"\"إلغاء تفعيل العنصر\"\"\"\n        self.is_active = False\n        self.status = \"inactive\"\n        return self.save(db)\n    \n    def update_metadata(self, db: Session, new_metadata: Dict[str, Any]) -> \"{{ component_name|title }}\":\n        \"\"\"تحديث البيانات الإضافية\"\"\"\n        if self.metadata is None:\n            self.metadata = {}\n        \n        self.metadata.update(new_metadata)\n        return self.save(db)\n    \n    def add_tag(self, db: Session, tag: str) -> \"{{ component_name|title }}\":\n        \"\"\"إضافة علامة\"\"\"\n        if self.tags is None:\n            self.tags = []\n        \n        if tag not in self.tags:\n            self.tags.append(tag)\n            return self.save(db)\n        \n        return self\n    \n    def remove_tag(self, db: Session, tag: str) -> \"{{ component_name|title }}\":\n        \"\"\"إزالة علامة\"\"\"\n        if self.tags and tag in self.tags:\n            self.tags.remove(tag)\n            return self.save(db)\n        \n        return self\n    \n    def has_tag(self, tag: str) -> bool:\n        \"\"\"التحقق من وجود علامة\"\"\"\n        return self.tags and tag in self.tags\n    \n    # دوال الاستعلام الثابتة\n    @classmethod\n    def get_by_id(cls, db: Session, id: int) -> Optional[\"{{ component_name|title }}\"]:\n        \"\"\"الحصول على عنصر بالمعرف\"\"\"\n        return db.query(cls).filter(cls.id == id).first()\n    \n    @classmethod\n    def get_by_uuid(cls, db: Session, uuid: str) -> Optional[\"{{ component_name|title }}\"]:\n        \"\"\"الحصول على عنصر بالمعرف الفريد\"\"\"\n        return db.query(cls).filter(cls.uuid == uuid).first()\n    \n    @classmethod\n    def get_by_name(cls, db: Session, name: str) -> Optional[\"{{ component_name|title }}\"]:\n        \"\"\"الحصول على عنصر بالاسم\"\"\"\n        return db.query(cls).filter(cls.name == name).first()\n    \n    @classmethod\n    def get_active(cls, db: Session) -> List[\"{{ component_name|title }}\"]:\n        \"\"\"الحصول على العناصر النشطة\"\"\"\n        return db.query(cls).filter(cls.is_active == True, cls.deleted_at.is_(None)).all()\n    \n    @classmethod\n    def get_by_status(cls, db: Session, status: str) -> List[\"{{ component_name|title }}\"]:\n        \"\"\"الحصول على العناصر بحالة معينة\"\"\"\n        return db.query(cls).filter(cls.status == status, cls.deleted_at.is_(None)).all()\n    \n    @classmethod\n    def search(cls, db: Session, query: str, limit: int = 50) -> List[\"{{ component_name|title }}\"]:\n        \"\"\"البحث في العناصر\"\"\"\n        return db.query(cls).filter(\n            (cls.name.ilike(f\"%{query}%\") | cls.description.ilike(f\"%{query}%\")),\n            cls.is_active == True,\n            cls.deleted_at.is_(None)\n        ).limit(limit).all()\n    \n    @classmethod\n    def get_recent(cls, db: Session, days: int = 7, limit: int = 50) -> List[\"{{ component_name|title }}\"]:\n        \"\"\"الحصول على العناصر الحديثة\"\"\"\n        cutoff_date = datetime.utcnow() - timedelta(days=days)\n        return db.query(cls).filter(\n            cls.created_at >= cutoff_date,\n            cls.is_active == True,\n            cls.deleted_at.is_(None)\n        ).order_by(cls.created_at.desc()).limit(limit).all()\n    \n    @classmethod\n    def get_popular(cls, db: Session, limit: int = 10) -> List[\"{{ component_name|title }}\"]:\n        \"\"\"الحصول على العناصر الأكثر شعبية (بناء على الأولوية)\"\"\"\n        return db.query(cls).filter(\n            cls.is_active == True,\n            cls.deleted_at.is_(None)\n        ).order_by(cls.priority.desc(), cls.created_at.desc()).limit(limit).all()\n    \n    @classmethod\n    def get_by_tag(cls, db: Session, tag: str) -> List[\"{{ component_name|title }}\"]:\n        \"\"\"الحصول على العناصر بعلامة معينة\"\"\"\n        return db.query(cls).filter(\n            cls.tags.contains([tag]),\n            cls.is_active == True,\n            cls.deleted_at.is_(None)\n        ).all()\n    \n    @classmethod\n    def count_by_status(cls, db: Session) -> Dict[str, int]:\n        \"\"\"إحصائيات العناصر بحسب الحالة\"\"\"\n        from sqlalchemy import func\n        \n        result = db.query(\n            cls.status,\n            func.count(cls.id).label('count')\n        ).filter(cls.deleted_at.is_(None)).group_by(cls.status).all()\n        \n        return {status: count for status, count in result}\n    \n    @classmethod\n    def get_statistics(cls, db: Session) -> Dict[str, Any]:\n        \"\"\"الحصول على إحصائيات شاملة\"\"\"\n        total = db.query(cls).filter(cls.deleted_at.is_(None)).count()\n        active = db.query(cls).filter(cls.is_active == True, cls.deleted_at.is_(None)).count()\n        recent = cls.get_recent(db, days=7)\n        \n        return {\n            \"total\": total,\n            \"active\": active,\n            \"inactive\": total - active,\n            \"recent_count\": len(recent),\n            \"status_breakdown\": cls.count_by_status(db),\n            \"oldest_item_date\": db.query(func.min(cls.created_at)).scalar(),\n            \"newest_item_date\": db.query(func.max(cls.created_at)).scalar(),\n        }\n    \n    # دوال التصدير والاستيراد\n    def to_dict(self, include_relations: bool = False, exclude_fields: List[str] = None) -> Dict[str, Any]:\n        \"\"\"تحويل النموذج إلى قاموس\"\"\"\n        exclude_fields = exclude_fields or []\n        \n        data = {\n            \"id\": self.id,\n            \"uuid\": self.uuid,\n            \"name\": self.name,\n            \"description\": self.description,\n            \"is_active\": self.is_active,\n            \"status\": self.status,\n            \"priority\": self.priority,\n            \"created_at\": self.created_at.isoformat() if self.created_at else None,\n            \"updated_at\": self.updated_at.isoformat() if self.updated_at else None,\n            \"deleted_at\": self.deleted_at.isoformat() if self.deleted_at else None,\n            \"metadata\": self.metadata or {},\n            \"settings\": self.settings or {},\n            \"tags\": self.tags or [],\n            \"age_in_days\": self.age_in_days,\n            \"is_recent\": self.is_recent,\n            \"is_deleted\": self.is_deleted,\n        }\n        \n        # إزالة الحقول المستبعدة\n        for field in exclude_fields:\n            data.pop(field, None)\n        \n        if include_relations:\n            # إضافة العلاقات هنا إذا كانت موجودة\n            pass\n        \n        return data\n    \n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -> \"{{ component_name|title }}\":\n        \"\"\"إنشاء نموذج من قاموس\"\"\"\n        # إزالة الحقول التي لا يجب تحديثها مباشرة\n        exclude_fields = {\"id\", \"created_at\", \"updated_at\", \"deleted_at\"}\n        filtered_data = {k: v for k, v in data.items() if k not in exclude_fields}\n        \n        return cls(**filtered_data)\n    \n    def update_from_dict(self, data: Dict[str, Any], exclude_fields: List[str] = None) -> \"{{ component_name|title }}\":\n        \"\"\"تحديث النموذج من قاموس\"\"\"\n        exclude_fields = exclude_fields or [\"id\", \"created_at\", \"uuid\"]\n        \n        for key, value in data.items():\n            if key not in exclude_fields and hasattr(self, key):\n                setattr(self, key, value)\n        \n        self.updated_at = datetime.utcnow()\n        return self\n    \n    # دوال التحقق\n    def validate(self) -> List[str]:\n        \"\"\"التحقق من صحة البيانات\"\"\"\n        errors = []\n        \n        # التحقق من الاسم\n        if not self.name or len(self.name.strip()) < 2:\n            errors.append(\"الاسم مطلوب ويجب أن يكون على الأقل حرفين\")\n        \n        if self.name and len(self.name) > 255:\n            errors.append(\"الاسم طويل جداً (الحد الأقصى 255 حرف)\")\n        \n        # التحقق من الحالة\n        valid_statuses = [\"active\", \"inactive\", \"pending\", \"deleted\", \"archived\"]\n        if self.status not in valid_statuses:\n            errors.append(f\"الحالة يجب أن تكون إحدى: {', '.join(valid_statuses)}\")\n        \n        # التحقق من الأولوية\n        if self.priority < 0:\n            errors.append(\"الأولوية يجب أن تكون رقم موجب أو صفر\")\n        \n        return errors\n    \n    def is_valid(self) -> bool:\n        \"\"\"التحقق من صحة النموذج\"\"\"\n        return len(self.validate()) == 0\n\n# أحداث النموذج\n@event.listens_for({{ component_name|title }}, 'before_insert')\ndef before_insert(mapper, connection, target):\n    \"\"\"قبل الإدراج في قاعدة البيانات\"\"\"\n    # التأكد من وجود UUID\n    if not target.uuid:\n        target.uuid = str(uuid.uuid4())\n    \n    # تنظيف البيانات\n    if target.name:\n        target.name = target.name.strip()\n    \n    # التحقق من البيانات\n    errors = target.validate()\n    if errors:\n        raise ValueError(f\"خطأ في التحقق: {'; '.join(errors)}\")\n\n@event.listens_for({{ component_name|title }}, 'before_update')\ndef before_update(mapper, connection, target):\n    \"\"\"قبل التحديث في قاعدة البيانات\"\"\"\n    # تنظيف البيانات\n    if target.name:\n        target.name = target.name.strip()\n    \n    # التحقق من البيانات\n    errors = target.validate()\n    if errors:\n        raise ValueError(f\"خطأ في التحقق: {'; '.join(errors)}\")\n    \n    # تحديث تاريخ التعديل\n    target.updated_at = datetime.utcnow()",
        "core/config.py": "#!/usr/bin/env python3\n\"\"\"\n{{ project_name }} - Configuration Settings\nإعدادات التطبيق الشاملة لـ FastAPI\n\nالمؤلف: Generated by PTG\nالتاريخ: {{ timestamp }}\n\"\"\"\n\nimport os\nfrom typing import List, Union, Optional, Any\nfrom pydantic import BaseSettings, validator, Field\nfrom pydantic.networks import AnyHttpUrl, PostgresDsn\nfrom functools import lru_cache\n\nclass Settings(BaseSettings):\n    \"\"\"\n    إعدادات التطبيق باستخدام Pydantic\n    \"\"\"\n    \n    # إعدادات المشروع الأساسية\n    PROJECT_NAME: str = \"{{ project_name }}\"\n    VERSION: str = \"1.0.0\"\n    DESCRIPTION: str = \"API احترافي للمشروع {{ project_name }}\"\n    API_V1_STR: str = \"/api/v1\"\n    \n    # إعدادات البيئة\n    ENVIRONMENT: str = Field(default=\"development\", env=\"ENVIRONMENT\")\n    DEBUG: bool = Field(default=True, env=\"DEBUG\")\n    TESTING: bool = Field(default=False, env=\"TESTING\")\n    \n    # إعدادات الأمان\n    SECRET_KEY: str = Field(\n        default=\"dev-secret-key-{{ project_name|lower }}-change-in-production\",\n        env=\"SECRET_KEY\"\n    )\n    ACCESS_TOKEN_EXPIRE_MINUTES: int = Field(default=30, env=\"ACCESS_TOKEN_EXPIRE_MINUTES\")\n    REFRESH_TOKEN_EXPIRE_DAYS: int = Field(default=7, env=\"REFRESH_TOKEN_EXPIRE_DAYS\")\n    SESSION_TIMEOUT: int = Field(default=3600, env=\"SESSION_TIMEOUT\")  # 1 hour\n    \n    # إعدادات JWT\n    ALGORITHM: str = \"HS256\"\n    JWT_SECRET_KEY: str = Field(default=\"jwt-secret-{{ project_name|lower }}\", env=\"JWT_SECRET_KEY\")\n    JWT_REFRESH_SECRET_KEY: str = Field(default=\"jwt-refresh-secret-{{ project_name|lower }}\", env=\"JWT_REFRESH_SECRET_KEY\")\n    \n    # إعدادات قاعدة البيانات\n    DATABASE_URL: Optional[str] = Field(default=None, env=\"DATABASE_URL\")\n    POSTGRES_SERVER: str = Field(default=\"localhost\", env=\"POSTGRES_SERVER\")\n    POSTGRES_USER: str = Field(default=\"{{ project_name|lower }}\", env=\"POSTGRES_USER\")\n    POSTGRES_PASSWORD: str = Field(default=\"password\", env=\"POSTGRES_PASSWORD\")\n    POSTGRES_DB: str = Field(default=\"{{ project_name|lower }}\", env=\"POSTGRES_DB\")\n    POSTGRES_PORT: int = Field(default=5432, env=\"POSTGRES_PORT\")\n    \n    # إعدادات السيرفر\n    HOST: str = Field(default=\"0.0.0.0\", env=\"HOST\")\n    PORT: int = Field(default=8000, env=\"PORT\")\n    WORKERS: int = Field(default=1, env=\"WORKERS\")\n    \n    # إعدادات CORS\n    BACKEND_CORS_ORIGINS: List[AnyHttpUrl] = Field(default=[], env=\"BACKEND_CORS_ORIGINS\")\n    ALLOWED_HOSTS: List[str] = Field(default=[\"*\"], env=\"ALLOWED_HOSTS\")\n    \n    @validator(\"BACKEND_CORS_ORIGINS\", pre=True)\n    def assemble_cors_origins(cls, v: Union[str, List[str]]) -> Union[List[str], str]:\n        if isinstance(v, str) and not v.startswith(\"[\"):\n            return [i.strip() for i in v.split(\",\")]\n        elif isinstance(v, (list, str)):\n            return v\n        raise ValueError(v)\n    \n    @validator(\"ALLOWED_HOSTS\", pre=True)\n    def assemble_allowed_hosts(cls, v: Union[str, List[str]]) -> Union[List[str], str]:\n        if isinstance(v, str) and not v.startswith(\"[\"):\n            return [i.strip() for i in v.split(\",\")]\n        elif isinstance(v, (list, str)):\n            return v\n        raise ValueError(v)\n    \n    # إعدادات البريد الإلكتروني\n    SMTP_TLS: bool = Field(default=True, env=\"SMTP_TLS\")\n    SMTP_PORT: Optional[int] = Field(default=587, env=\"SMTP_PORT\")\n    SMTP_HOST: Optional[str] = Field(default=\"smtp.gmail.com\", env=\"SMTP_HOST\")\n    SMTP_USER: Optional[str] = Field(default=None, env=\"SMTP_USER\")\n    SMTP_PASSWORD: Optional[str] = Field(default=None, env=\"SMTP_PASSWORD\")\n    EMAILS_FROM_EMAIL: Optional[str] = Field(default=None, env=\"EMAILS_FROM_EMAIL\")\n    EMAILS_FROM_NAME: Optional[str] = Field(default=PROJECT_NAME, env=\"EMAILS_FROM_NAME\")\n    \n    # إعدادات تحميل الملفات\n    MAX_UPLOAD_SIZE: int = Field(default=10 * 1024 * 1024, env=\"MAX_UPLOAD_SIZE\")  # 10MB\n    UPLOAD_DIR: str = Field(default=\"uploads\", env=\"UPLOAD_DIR\")\n    ALLOWED_EXTENSIONS: List[str] = Field(\n        default=[\"jpg\", \"jpeg\", \"png\", \"gif\", \"pdf\", \"doc\", \"docx\", \"txt\"],\n        env=\"ALLOWED_EXTENSIONS\"\n    )\n    \n    @validator(\"ALLOWED_EXTENSIONS\", pre=True)\n    def assemble_allowed_extensions(cls, v: Union[str, List[str]]) -> Union[List[str], str]:\n        if isinstance(v, str):\n            return [i.strip() for i in v.split(\",\")]\n        elif isinstance(v, list):\n            return v\n        raise ValueError(v)\n    \n    # إعدادات التخزين المؤقت\n    REDIS_URL: Optional[str] = Field(default=None, env=\"REDIS_URL\")\n    CACHE_EXPIRE_IN_SECONDS: int = Field(default=3600, env=\"CACHE_EXPIRE_IN_SECONDS\")  # 1 hour\n    \n    # إعدادات المهام الخلفية\n    CELERY_BROKER_URL: Optional[str] = Field(default=\"redis://localhost:6379/0\", env=\"CELERY_BROKER_URL\")\n    CELERY_RESULT_BACKEND: Optional[str] = Field(default=\"redis://localhost:6379/0\", env=\"CELERY_RESULT_BACKEND\")\n    \n    # إعدادات التسجيل\n    LOG_LEVEL: str = Field(default=\"INFO\", env=\"LOG_LEVEL\")\n    LOG_FORMAT: str = Field(default=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\", env=\"LOG_FORMAT\")\n    LOG_FILE: Optional[str] = Field(default=None, env=\"LOG_FILE\")\n    \n    # إعدادات المراقبة\n    ENABLE_METRICS: bool = Field(default=False, env=\"ENABLE_METRICS\")\n    METRICS_PORT: int = Field(default=9090, env=\"METRICS_PORT\")\n    \n    # إعدادات معدل الطلبات (Rate Limiting)\n    RATE_LIMIT_ENABLED: bool = Field(default=True, env=\"RATE_LIMIT_ENABLED\")\n    RATE_LIMIT_REQUESTS: int = Field(default=100, env=\"RATE_LIMIT_REQUESTS\")\n    RATE_LIMIT_WINDOW: int = Field(default=3600, env=\"RATE_LIMIT_WINDOW\")  # 1 hour\n    \n    # إعدادات الاختبارات\n    TEST_DATABASE_URL: Optional[str] = Field(default=\"sqlite:///./test.db\", env=\"TEST_DATABASE_URL\")\n    \n    # إعدادات خارجية\n    EXTERNAL_API_KEY: Optional[str] = Field(default=None, env=\"EXTERNAL_API_KEY\")\n    EXTERNAL_API_URL: Optional[str] = Field(default=None, env=\"EXTERNAL_API_URL\")\n    \n    @property\n    def database_url(self) -> str:\n        \"\"\"\n        بناء رابط قاعدة البيانات\n        \"\"\"\n        if self.DATABASE_URL:\n            return self.DATABASE_URL\n        \n        # استخدام SQLite في التطوير\n        if self.ENVIRONMENT == \"development\":\n            return f\"sqlite:///./data/{{ project_name|lower }}_dev.db\"\n        elif self.ENVIRONMENT == \"testing\":\n            return self.TEST_DATABASE_URL or \"sqlite:///./test.db\"\n        else:\n            # PostgreSQL للإنتاج\n            return f\"postgresql://{self.POSTGRES_USER}:{self.POSTGRES_PASSWORD}@{self.POSTGRES_SERVER}:{self.POSTGRES_PORT}/{self.POSTGRES_DB}\"\n    \n    @property\n    def is_development(self) -> bool:\n        \"\"\"التحقق من بيئة التطوير\"\"\"\n        return self.ENVIRONMENT == \"development\"\n    \n    @property\n    def is_production(self) -> bool:\n        \"\"\"التحقق من بيئة الإنتاج\"\"\"\n        return self.ENVIRONMENT == \"production\"\n    \n    @property\n    def is_testing(self) -> bool:\n        \"\"\"التحقق من بيئة الاختبار\"\"\"\n        return self.ENVIRONMENT == \"testing\" or self.TESTING\n    \n    def get_email_config(self) -> dict:\n        \"\"\"الحصول على إعدادات البريد الإلكتروني\"\"\"\n        return {\n            \"SMTP_HOST\": self.SMTP_HOST,\n            \"SMTP_PORT\": self.SMTP_PORT,\n            \"SMTP_USER\": self.SMTP_USER,\n            \"SMTP_PASSWORD\": self.SMTP_PASSWORD,\n            \"SMTP_TLS\": self.SMTP_TLS,\n            \"EMAILS_FROM_EMAIL\": self.EMAILS_FROM_EMAIL,\n            \"EMAILS_FROM_NAME\": self.EMAILS_FROM_NAME,\n        }\n    \n    def get_database_config(self) -> dict:\n        \"\"\"الحصول على إعدادات قاعدة البيانات\"\"\"\n        return {\n            \"url\": self.database_url,\n            \"echo\": self.DEBUG,\n            \"pool_size\": 5 if self.is_production else 2,\n            \"max_overflow\": 10 if self.is_production else 5,\n            \"pool_timeout\": 30,\n            \"pool_recycle\": 3600,\n        }\n    \n    class Config:\n        \"\"\"إعدادات Pydantic\"\"\"\n        env_file = \".env\"\n        env_file_encoding = \"utf-8\"\n        case_sensitive = True\n        \n        # أمثلة للقيم المتوقعة\n        schema_extra = {\n            \"example\": {\n                \"PROJECT_NAME\": \"{{ project_name }}\",\n                \"ENVIRONMENT\": \"development\",\n                \"DEBUG\": True,\n                \"SECRET_KEY\": \"your-secret-key-here\",\n                \"DATABASE_URL\": \"postgresql://user:password@localhost/dbname\",\n                \"BACKEND_CORS_ORIGINS\": [\"http://localhost:3000\", \"https://myapp.com\"],\n                \"SMTP_HOST\": \"smtp.gmail.com\",\n                \"SMTP_USER\": \"your-email@gmail.com\",\n            }\n        }\n\nclass DevelopmentSettings(Settings):\n    \"\"\"إعدادات خاصة ببيئة التطوير\"\"\"\n    ENVIRONMENT: str = \"development\"\n    DEBUG: bool = True\n    LOG_LEVEL: str = \"DEBUG\"\n\nclass ProductionSettings(Settings):\n    \"\"\"إعدادات خاصة ببيئة الإنتاج\"\"\"\n    ENVIRONMENT: str = \"production\"\n    DEBUG: bool = False\n    LOG_LEVEL: str = \"WARNING\"\n    \n    # إجبار استخدام HTTPS\n    SESSION_COOKIE_SECURE: bool = True\n    SESSION_COOKIE_HTTPONLY: bool = True\n\nclass TestingSettings(Settings):\n    \"\"\"إعدادات خاصة ببيئة الاختبار\"\"\"\n    ENVIRONMENT: str = \"testing\"\n    TESTING: bool = True\n    DATABASE_URL: str = \"sqlite:///./test.db\"\n\n# مصنع الإعدادات\ndef get_settings_class():\n    \"\"\"الحصول على فئة الإعدادات المناسبة للبيئة\"\"\"\n    environment = os.getenv(\"ENVIRONMENT\", \"development\").lower()\n    \n    if environment == \"production\":\n        return ProductionSettings\n    elif environment == \"testing\":\n        return TestingSettings\n    else:\n        return DevelopmentSettings\n\n@lru_cache()\ndef get_settings() -> Settings:\n    \"\"\"\n    الحصول على إعدادات التطبيق مع التخزين المؤقت\n    \"\"\"\n    settings_class = get_settings_class()\n    return settings_class()\n\n# مثيل إعدادات التطبيق\nsettings = get_settings()"
      }
    },
    "flask": {
      "structure": "├── app.py\n├── components/\n│   ├── controller.py\n│   ├── model.py\n│   └── view.html\n├── config.py\n└── template.yaml\n",
      "files": {
        "app.py": "#!/usr/bin/env python3\n\"\"\"\n{{ project_name }} - Flask Web Application\nتطبيق ويب احترافي باستخدام Flask\n\nالمؤلف: Generated by PTG\nالتاريخ: {{ timestamp }}\n\"\"\"\n\nimport os\nfrom flask import Flask, render_template, request, jsonify, redirect, url_for, flash, session\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_migrate import Migrate\nfrom flask_wtf.csrf import CSRFProtect\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom datetime import datetime\nimport logging\nfrom logging.handlers import RotatingFileHandler\n\n# إعدادات التطبيق\nfrom config import Config\nfrom src.models import db, User\nfrom src.controllers import main_bp, auth_bp, api_bp\nfrom src.views import register_template_filters\n\ndef create_app(config_class=Config):\n    \"\"\"\n    Factory Function لإنشاء التطبيق\n    \"\"\"\n    app = Flask(__name__, \n                template_folder='src/templates',\n                static_folder='src/static')\n    \n    # تحميل الإعدادات\n    app.config.from_object(config_class)\n    \n    # تهيئة الإضافات\n    db.init_app(app)\n    migrate = Migrate(app, db)\n    csrf = CSRFProtect(app)\n    \n    # تسجيل المسارات (Blueprints)\n    app.register_blueprint(main_bp)\n    app.register_blueprint(auth_bp, url_prefix='/auth')\n    app.register_blueprint(api_bp, url_prefix='/api')\n    \n    # تسجيل المرشحات المخصصة\n    register_template_filters(app)\n    \n    # معالجات الأخطاء\n    @app.errorhandler(404)\n    def not_found(error):\n        return render_template('errors/404.html'), 404\n    \n    @app.errorhandler(500)\n    def internal_error(error):\n        db.session.rollback()\n        return render_template('errors/500.html'), 500\n    \n    @app.errorhandler(403)\n    def forbidden(error):\n        return render_template('errors/403.html'), 403\n    \n    # إعداد نظام التسجيل\n    if not app.debug and not app.testing:\n        if not os.path.exists('logs'):\n            os.mkdir('logs')\n        file_handler = RotatingFileHandler('logs/{{ project_name|lower }}.log',\n                                         maxBytes=10240, backupCount=10)\n        file_handler.setFormatter(logging.Formatter(\n            '%(asctime)s %(levelname)s: %(message)s '\n            '[in %(pathname)s:%(lineno)d]'))\n        file_handler.setLevel(logging.INFO)\n        app.logger.addHandler(file_handler)\n        app.logger.setLevel(logging.INFO)\n        app.logger.info('{{ project_name }} startup')\n    \n    # إنشاء الجداول\n    with app.app_context():\n        db.create_all()\n        \n        # إنشاء مستخدم إداري افتراضي\n        if not User.query.filter_by(email='admin@{{ project_name|lower }}.com').first():\n            admin = User(\n                username='admin',\n                email='admin@{{ project_name|lower }}.com',\n                is_admin=True\n            )\n            admin.set_password('admin123')\n            db.session.add(admin)\n            db.session.commit()\n            app.logger.info('Admin user created')\n    \n    return app\n\n# إنشاء التطبيق\napp = create_app()\n\n# CLI Commands\n@app.cli.command()\ndef init_db():\n    \"\"\"Initialize the database.\"\"\"\n    db.create_all()\n    print('Database initialized.')\n\n@app.cli.command()\ndef seed_db():\n    \"\"\"Seed the database with sample data.\"\"\"\n    # إضافة بيانات تجريبية\n    sample_user = User(\n        username='testuser',\n        email='test@example.com'\n    )\n    sample_user.set_password('password123')\n    db.session.add(sample_user)\n    db.session.commit()\n    print('Database seeded with sample data.')\n\nif __name__ == '__main__':\n    # تشغيل التطبيق في وضع التطوير\n    app.run(\n        host='0.0.0.0',\n        port=int(os.environ.get('PORT', 5000)),\n        debug=app.config.get('DEBUG', False)\n    )\n",
        "config.py": "#!/usr/bin/env python3\n\"\"\"\n{{ project_name }} - Configuration Settings\nإعدادات التطبيق الشاملة\n\nالمؤلف: Generated by PTG\nالتاريخ: {{ timestamp }}\n\"\"\"\n\nimport os\nfrom datetime import timedelta\nfrom pathlib import Path\n\n# المسار الأساسي للمشروع\nbasedir = Path(__file__).parent.absolute()\n\nclass Config:\n    \"\"\"\n    إعدادات التطبيق الأساسية\n    \"\"\"\n    # إعدادات Flask الأساسية\n    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-secret-key-{{ project_name|lower }}-very-secret'\n    \n    # إعدادات قاعدة البيانات\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \\\n        f'sqlite:///{basedir}/data/{{ project_name|lower }}.db'\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    SQLALCHEMY_RECORD_QUERIES = True\n    SQLALCHEMY_ENGINE_OPTIONS = {\n        'pool_recycle': 300,\n        'pool_pre_ping': True\n    }\n    \n    # إعدادات الأمان\n    WTF_CSRF_ENABLED = True\n    WTF_CSRF_TIME_LIMIT = 3600\n    \n    # إعدادات الجلسة\n    SESSION_TYPE = 'filesystem'\n    PERMANENT_SESSION_LIFETIME = timedelta(hours=2)\n    \n    # إعدادات البريد الإلكتروني\n    MAIL_SERVER = os.environ.get('MAIL_SERVER') or 'smtp.gmail.com'\n    MAIL_PORT = int(os.environ.get('MAIL_PORT') or 587)\n    MAIL_USE_TLS = os.environ.get('MAIL_USE_TLS', 'true').lower() in ['true', 'on', '1']\n    MAIL_USERNAME = os.environ.get('MAIL_USERNAME')\n    MAIL_PASSWORD = os.environ.get('MAIL_PASSWORD')\n    ADMINS = ['admin@{{ project_name|lower }}.com']\n    \n    # إعدادات الملفات\n    MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB max file size\n    UPLOAD_FOLDER = basedir / 'src' / 'static' / 'uploads'\n    ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif', 'doc', 'docx'}\n    \n    # إعدادات التطبيق\n    POSTS_PER_PAGE = 10\n    RESULTS_PER_PAGE = 25\n    LANGUAGES = ['ar', 'en']\n    DEFAULT_LANGUAGE = 'ar'\n    \n    # إعدادات التخزين المؤقت\n    CACHE_TYPE = 'simple'\n    CACHE_DEFAULT_TIMEOUT = 300\n    \n    # إعدادات API\n    API_RATE_LIMIT = '1000 per hour'\n    API_VERSION = 'v1'\n    \n    # إعدادات التسجيل\n    LOG_TO_STDOUT = os.environ.get('LOG_TO_STDOUT')\n    LOG_LEVEL = os.environ.get('LOG_LEVEL') or 'INFO'\n    \n    @staticmethod\n    def init_app(app):\n        \"\"\"\n        تهيئة التطبيق مع الإعدادات\n        \"\"\"\n        # إنشاء المجلدات المطلوبة\n        os.makedirs(Config.UPLOAD_FOLDER, exist_ok=True)\n        os.makedirs(basedir / 'logs', exist_ok=True)\n        os.makedirs(basedir / 'data', exist_ok=True)\n\nclass DevelopmentConfig(Config):\n    \"\"\"\n    إعدادات بيئة التطوير\n    \"\"\"\n    DEBUG = True\n    TESTING = False\n    \n    # إعدادات قاعدة البيانات للتطوير\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DEV_DATABASE_URL') or \\\n        f'sqlite:///{basedir}/data/{{ project_name|lower }}_dev.db'\n    \n    # إعدادات إضافية للتطوير\n    SEND_FILE_MAX_AGE_DEFAULT = 1\n    WTF_CSRF_ENABLED = False  # تعطيل CSRF للتطوير\n\nclass TestingConfig(Config):\n    \"\"\"\n    إعدادات بيئة الاختبار\n    \"\"\"\n    TESTING = True\n    DEBUG = True\n    \n    # قاعدة بيانات في الذاكرة للاختبار\n    SQLALCHEMY_DATABASE_URI = 'sqlite:///:memory:'\n    \n    # تعطيل حماية CSRF للاختبار\n    WTF_CSRF_ENABLED = False\n    \n    # تسريع الاختبارات\n    BCRYPT_LOG_ROUNDS = 4\n\nclass ProductionConfig(Config):\n    \"\"\"\n    إعدادات بيئة الإنتاج\n    \"\"\"\n    DEBUG = False\n    TESTING = False\n    \n    # إعدادات أمان مشددة للإنتاج\n    SESSION_COOKIE_SECURE = True\n    SESSION_COOKIE_HTTPONLY = True\n    SESSION_COOKIE_SAMESITE = 'Lax'\n    \n    # إعدادات قاعدة البيانات للإنتاج\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \\\n        f'postgresql://user:password@localhost/{{ project_name|lower }}_prod'\n    \n    @classmethod\n    def init_app(cls, app):\n        \"\"\"\n        تهيئة خاصة ببيئة الإنتاج\n        \"\"\"\n        Config.init_app(app)\n        \n        # إرسال الأخطاء بالبريد الإلكتروني\n        import logging\n        from logging.handlers import SMTPHandler\n        \n        if app.config['MAIL_SERVER']:\n            auth = None\n            if app.config['MAIL_USERNAME'] or app.config['MAIL_PASSWORD']:\n                auth = (app.config['MAIL_USERNAME'], app.config['MAIL_PASSWORD'])\n            \n            secure = None\n            if app.config['MAIL_USE_TLS']:\n                secure = ()\n            \n            mail_handler = SMTPHandler(\n                mailhost=(app.config['MAIL_SERVER'], app.config['MAIL_PORT']),\n                fromaddr='no-reply@' + app.config['MAIL_SERVER'],\n                toaddrs=app.config['ADMINS'],\n                subject='{{ project_name }} Application Error',\n                credentials=auth,\n                secure=secure\n            )\n            mail_handler.setLevel(logging.ERROR)\n            app.logger.addHandler(mail_handler)\n\n# قاموس الإعدادات للاختيار السهل\nconfig = {\n    'development': DevelopmentConfig,\n    'testing': TestingConfig,\n    'production': ProductionConfig,\n    'default': DevelopmentConfig\n}\n",
        "template.yaml": "assets: []\ncomponents:\n  controller:\n    path: src/controllers/{{component_name|lower}}_controller.py\n    template: python/flask/components/controller.py\n  model:\n    path: src/models/{{component_name|lower}}.py\n    template: python/flask/components/model.py\n  view:\n    path: src/templates/{{component_name|lower}}.html\n    template: python/flask/components/view.html\ndescription: قالب flask لـ python\nname: python-flask\npost_tasks: []\nstructure:\n  directories:\n  - src\n  - tests\n  - docs\n  - configs\n  - scripts\n  - data\n  - logs\n  - src/models\n  - src/views\n  - src/controllers\n  - src/templates\n  - src/static\n  - src/static/css\n  - src/static/js\n  - src/static/images\n  - migrations\n  files:\n  - path: requirements.txt\n    template: python/common/requirements.txt\n    type: template\n  - path: README.md\n    template: python/common/README.md\n    type: template\n  - path: .gitignore\n    template: python/common/gitignore\n    type: template\n  - content: '# {{ project_name }} Package'\n    path: src/__init__.py\n    type: content\n  - path: app.py\n    template: python/flask/app.py\n    type: template\n  - path: config.py\n    template: python/flask/config.py\n    type: template\nversion: 1.0.0\n",
        "components/controller.py": "#!/usr/bin/env python3\n\"\"\"\n{{ component_name|title }} Controller\nمتحكم {{ component_name }} - يدير جميع العمليات المتعلقة بـ {{ component_name }}\n\nالملف: src/controllers/{{ component_name|lower }}_controller.py\nالمؤلف: Generated by PTG\nالتاريخ: {{ timestamp }}\n\"\"\"\n\nfrom flask import Blueprint, render_template, request, jsonify, redirect, url_for, flash, abort\nfrom flask import current_app, session, g\nfrom werkzeug.exceptions import NotFound, BadRequest, Forbidden\nfrom sqlalchemy.exc import IntegrityError\nfrom datetime import datetime\nimport json\nimport logging\n\n# استيراد النماذج والأدوات المساعدة\nfrom src.models.{{ component_name|lower }} import {{ component_name|title }}\nfrom src.models import db\nfrom src.utils.decorators import login_required, admin_required, rate_limit\nfrom src.utils.validators import validate_{{ component_name|lower }}_data\nfrom src.utils.helpers import paginate_query, serialize_model\nfrom src.forms.{{ component_name|lower }}_forms import {{ component_name|title }}Form, {{ component_name|title }}SearchForm\n\n# إنشاء Blueprint\n{{ component_name|lower }}_bp = Blueprint('{{ component_name|lower }}', __name__, url_prefix='/{{ component_name|lower }}')\n\n# إعداد التسجيل\nlogger = logging.getLogger(__name__)\n\n@{{ component_name|lower }}_bp.route('/')\n@{{ component_name|lower }}_bp.route('/index')\ndef index():\n    \"\"\"\n    صفحة قائمة {{ component_name }}\n    \"\"\"\n    try:\n        page = request.args.get('page', 1, type=int)\n        per_page = current_app.config.get('RESULTS_PER_PAGE', 20)\n        search_query = request.args.get('q', '')\n        status_filter = request.args.get('status', 'all')\n        sort_by = request.args.get('sort', 'created_at')\n        order = request.args.get('order', 'desc')\n        \n        # بناء الاستعلام الأساسي\n        query = {{ component_name|title }}.query\n        \n        # تطبيق المرشحات\n        if status_filter != 'all':\n            if status_filter == 'active':\n                query = query.filter_by(is_active=True)\n            elif status_filter == 'inactive':\n                query = query.filter_by(is_active=False)\n            else:\n                query = query.filter_by(status=status_filter)\n        \n        # تطبيق البحث\n        if search_query:\n            query = {{ component_name|title }}.search(search_query)\n        \n        # تطبيق الترتيب\n        if hasattr({{ component_name|title }}, sort_by):\n            order_by = getattr({{ component_name|title }}, sort_by)\n            if order.lower() == 'desc':\n                order_by = order_by.desc()\n            query = query.order_by(order_by)\n        \n        # تطبيق التصفح\n        pagination = query.paginate(\n            page=page,\n            per_page=per_page,\n            error_out=False\n        )\n        \n        items = pagination.items\n        \n        # إحصائيات سريعة\n        stats = {\n            'total': {{ component_name|title }}.query.count(),\n            'active': {{ component_name|title }}.query.filter_by(is_active=True).count(),\n            'inactive': {{ component_name|title }}.query.filter_by(is_active=False).count(),\n            'recent': {{ component_name|title }}.get_recent(7).count()\n        }\n        \n        # نموذج البحث\n        search_form = {{ component_name|title }}SearchForm(request.args)\n        \n        return render_template('{{ component_name|lower }}/index.html',\n                             items=items,\n                             pagination=pagination,\n                             search_form=search_form,\n                             stats=stats,\n                             current_filters={\n                                 'q': search_query,\n                                 'status': status_filter,\n                                 'sort': sort_by,\n                                 'order': order\n                             })\\n    \n    except Exception as e:\n        logger.error(f'خطأ في عرض قائمة {{ component_name }}: {str(e)}')\\n        flash('حدث خطأ في عرض القائمة', 'error')\\n        return render_template('errors/500.html'), 500\\n\\n@{{ component_name|lower }}_bp.route('/create', methods=['GET', 'POST'])\\n@login_required\\ndef create():\\n    \\\"\\\"\\\"\\n    إنشاء {{ component_name }} جديد\\n    \\\"\\\"\\\"\\n    form = {{ component_name|title }}Form()\\n    \\n    if form.validate_on_submit():\\n        try:\\n            # إنشاء كائن جديد\\n            new_item = {{ component_name|title }}(\\n                name=form.name.data,\\n                description=form.description.data,\\n                status=form.status.data if hasattr(form, 'status') else 'active'\\n            )\\n            \\n            # إضافة معلومات إضافية\\n            if hasattr(form, 'metadata') and form.metadata.data:\\n                try:\\n                    new_item.metadata = json.loads(form.metadata.data)\\n                except json.JSONDecodeError:\\n                    flash('تنسيق البيانات الإضافية غير صحيح', 'warning')\\n            \\n            # حفظ في قاعدة البيانات\\n            new_item.save()\\n            \\n            logger.info(f'تم إنشاء {{ component_name }} جديد: {new_item.name} بواسطة {g.current_user.username if hasattr(g, \\\"current_user\\\") else \\\"مجهول\\\"}')\\n            flash(f'تم إنشاء {new_item.name} بنجاح!', 'success')\\n            \\n            return redirect(url_for('{{ component_name|lower }}.view', id=new_item.id))\\n        \\n        except IntegrityError as e:\\n            db.session.rollback()\\n            logger.error(f'خطأ في قاعدة البيانات عند إنشاء {{ component_name }}: {str(e)}')\\n            flash('هذا الاسم موجود بالفعل', 'error')\\n        \\n        except Exception as e:\\n            db.session.rollback()\\n            logger.error(f'خطأ في إنشاء {{ component_name }}: {str(e)}')\\n            flash('حدث خطأ في إنشاء العنصر', 'error')\\n    \\n    return render_template('{{ component_name|lower }}/create.html', form=form)\\n\\n@{{ component_name|lower }}_bp.route('/<int:id>')\\ndef view(id):\\n    \\\"\\\"\\\"\\n    عرض {{ component_name }} واحد\\n    \\\"\\\"\\\"\\n    try:\\n        item = {{ component_name|title }}.get_by_id(id)\\n        if not item:\\n            abort(404)\\n        \\n        # تسجيل العرض (للإحصائيات)\\n        logger.info(f'تم عرض {{ component_name }}: {item.name}')\\n        \\n        # الحصول على عناصر ذات صلة (اختياري)\\n        related_items = {{ component_name|title }}.query.filter(\\n            {{ component_name|title }}.id != id,\\n            {{ component_name|title }}.is_active == True\\n        ).limit(5).all()\\n        \\n        return render_template('{{ component_name|lower }}/view.html',\\n                             item=item,\\n                             related_items=related_items)\\n    \\n    except Exception as e:\\n        logger.error(f'خطأ في عرض {{ component_name }} {id}: {str(e)}')\\n        abort(500)\\n\\n@{{ component_name|lower }}_bp.route('/<int:id>/edit', methods=['GET', 'POST'])\\n@login_required\\ndef edit(id):\\n    \\\"\\\"\\\"\\n    تعديل {{ component_name }}\\n    \\\"\\\"\\\"\\n    item = {{ component_name|title }}.get_by_id(id)\\n    if not item:\\n        abort(404)\\n    \\n    form = {{ component_name|title }}Form(obj=item)\\n    \\n    if form.validate_on_submit():\\n        try:\\n            # تحديث البيانات\\n            old_name = item.name\\n            form.populate_obj(item)\\n            \\n            # تحديث البيانات الإضافية\\n            if hasattr(form, 'metadata') and form.metadata.data:\\n                try:\\n                    item.metadata = json.loads(form.metadata.data)\\n                except json.JSONDecodeError:\\n                    flash('تنسيق البيانات الإضافية غير صحيح', 'warning')\\n            \\n            # حفظ التحديثات\\n            item.save()\\n            \\n            logger.info(f'تم تحديث {{ component_name }}: {old_name} -> {item.name}')\\n            flash(f'تم تحديث {item.name} بنجاح!', 'success')\\n            \\n            return redirect(url_for('{{ component_name|lower }}.view', id=item.id))\\n        \\n        except IntegrityError as e:\\n            db.session.rollback()\\n            logger.error(f'خطأ في قاعدة البيانات عند تحديث {{ component_name }}: {str(e)}')\\n            flash('هذا الاسم موجود بالفعل', 'error')\\n        \\n        except Exception as e:\\n            db.session.rollback()\\n            logger.error(f'خطأ في تحديث {{ component_name }}: {str(e)}')\\n            flash('حدث خطأ في التحديث', 'error')\\n    \\n    return render_template('{{ component_name|lower }}/edit.html', form=form, item=item)\\n\\n@{{ component_name|lower }}_bp.route('/<int:id>/delete', methods=['POST'])\\n@login_required\\ndef delete(id):\\n    \\\"\\\"\\\"\\n    حذف {{ component_name }}\\n    \\\"\\\"\\\"\\n    item = {{ component_name|title }}.get_by_id(id)\\n    if not item:\\n        abort(404)\\n    \\n    try:\\n        item_name = item.name\\n        \\n        # حذف ناعم بدلاً من الحذف الفعلي\\n        if request.form.get('permanent') == 'true':\\n            item.delete()\\n            message = f'تم حذف {item_name} نهائياً'\\n        else:\\n            item.soft_delete()\\n            message = f'تم حذف {item_name} (يمكن الاستعادة)'\\n        \\n        logger.info(f'تم حذف {{ component_name }}: {item_name}')\\n        flash(message, 'success')\\n        \\n    except Exception as e:\\n        logger.error(f'خطأ في حذف {{ component_name }}: {str(e)}')\\n        flash('حدث خطأ في الحذف', 'error')\\n    \\n    return redirect(url_for('{{ component_name|lower }}.index'))\\n\\n@{{ component_name|lower }}_bp.route('/<int:id>/restore', methods=['POST'])\\n@login_required\\ndef restore(id):\\n    \\\"\\\"\\\"\\n    استعادة {{ component_name }} محذوف\\n    \\\"\\\"\\\"\\n    item = {{ component_name|title }}.get_by_id(id)\\n    if not item:\\n        abort(404)\\n    \\n    try:\\n        item.restore()\\n        logger.info(f'تم استعادة {{ component_name }}: {item.name}')\\n        flash(f'تم استعادة {item.name} بنجاح!', 'success')\\n    \\n    except Exception as e:\\n        logger.error(f'خطأ في استعادة {{ component_name }}: {str(e)}')\\n        flash('حدث خطأ في الاستعادة', 'error')\\n    \\n    return redirect(url_for('{{ component_name|lower }}.view', id=id))\\n\\n# ==================== API Routes ====================\\n\\n@{{ component_name|lower }}_bp.route('/api/list')\\n@rate_limit('100/hour')\\ndef api_list():\\n    \\\"\\\"\\\"\\n    API: قائمة {{ component_name }}\\n    \\\"\\\"\\\"\\n    try:\\n        page = request.args.get('page', 1, type=int)\\n        per_page = min(request.args.get('per_page', 20, type=int), 100)\\n        \\n        query = {{ component_name|title }}.get_active()\\n        pagination = query.paginate(page=page, per_page=per_page, error_out=False)\\n        \\n        return jsonify({\\n            'success': True,\\n            'data': [\\n                item.to_dict() for item in pagination.items\\n            ],\\n            'pagination': {\\n                'page': page,\\n                'pages': pagination.pages,\\n                'per_page': per_page,\\n                'total': pagination.total,\\n                'has_next': pagination.has_next,\\n                'has_prev': pagination.has_prev\\n            }\\n        })\\n    \\n    except Exception as e:\\n        logger.error(f'API خطأ في قائمة {{ component_name }}: {str(e)}')\\n        return jsonify({\\n            'success': False,\\n            'error': 'حدث خطأ في الخادم'\\n        }), 500\\n\\n@{{ component_name|lower }}_bp.route('/api/<int:id>')\\n@rate_limit('200/hour')\\ndef api_get(id):\\n    \\\"\\\"\\\"\\n    API: الحصول على {{ component_name }} واحد\\n    \\\"\\\"\\\"\\n    try:\\n        item = {{ component_name|title }}.get_by_id(id)\\n        if not item:\\n            return jsonify({\\n                'success': False,\\n                'error': 'العنصر غير موجود'\\n            }), 404\\n        \\n        return jsonify({\\n            'success': True,\\n            'data': item.to_dict(include_relations=True)\\n        })\\n    \\n    except Exception as e:\\n        logger.error(f'API خطأ في الحصول على {{ component_name }} {id}: {str(e)}')\\n        return jsonify({\\n            'success': False,\\n            'error': 'حدث خطأ في الخادم'\\n        }), 500\\n\\n@{{ component_name|lower }}_bp.route('/api', methods=['POST'])\\n@login_required\\n@rate_limit('50/hour')\\ndef api_create():\\n    \\\"\\\"\\\"\\n    API: إنشاء {{ component_name }} جديد\\n    \\\"\\\"\\\"\\n    try:\\n        data = request.get_json()\\n        if not data:\\n            return jsonify({\\n                'success': False,\\n                'error': 'لا توجد بيانات'\\n            }), 400\\n        \\n        # التحقق من البيانات\\n        errors = validate_{{ component_name|lower }}_data(data)\\n        if errors:\\n            return jsonify({\\n                'success': False,\\n                'errors': errors\\n            }), 400\\n        \\n        # إنشاء العنصر\\n        new_item = {{ component_name|title }}.from_dict(data)\\n        new_item.save()\\n        \\n        logger.info(f'API: تم إنشاء {{ component_name }} جديد: {new_item.name}')\\n        \\n        return jsonify({\\n            'success': True,\\n            'data': new_item.to_dict(),\\n            'message': 'تم الإنشاء بنجاح'\\n        }), 201\\n    \\n    except Exception as e:\\n        logger.error(f'API خطأ في إنشاء {{ component_name }}: {str(e)}')\\n        return jsonify({\\n            'success': False,\\n            'error': 'حدث خطأ في الخادم'\\n        }), 500\\n\\n# ==================== Utility Routes ====================\\n\\n@{{ component_name|lower }}_bp.route('/search')\\ndef search():\\n    \\\"\\\"\\\"\\n    البحث في {{ component_name }}\\n    \\\"\\\"\\\"\\n    query = request.args.get('q', '')\\n    if not query:\\n        return jsonify({'results': []})\\n    \\n    try:\\n        results = {{ component_name|title }}.search(query).limit(10).all()\\n        return jsonify({\\n            'results': [\\n                {\\n                    'id': item.id,\\n                    'name': item.name,\\n                    'description': item.description[:100] + '...' if item.description and len(item.description) > 100 else item.description,\\n                    'url': url_for('{{ component_name|lower }}.view', id=item.id)\\n                }\\n                for item in results\\n            ]\\n        })\\n    \\n    except Exception as e:\\n        logger.error(f'خطأ في البحث عن {{ component_name }}: {str(e)}')\\n        return jsonify({'results': []})\\n\\n@{{ component_name|lower }}_bp.route('/export')\\n@login_required\\ndef export():\\n    \\\"\\\"\\\"\\n    تصدير بيانات {{ component_name }}\\n    \\\"\\\"\\\"\\n    try:\\n        format = request.args.get('format', 'json')\\n        items = {{ component_name|title }}.get_active().all()\\n        \\n        if format == 'json':\\n            from flask import Response\\n            import json\\n            \\n            data = {\\n                'export_date': datetime.utcnow().isoformat(),\\n                'count': len(items),\\n                'data': [item.to_dict() for item in items]\\n            }\\n            \\n            response = Response(\\n                json.dumps(data, ensure_ascii=False, indent=2),\\n                mimetype='application/json',\\n                headers={\\n                    'Content-Disposition': f'attachment; filename={{ component_name|lower }}_export.json'\\n                }\\n            )\\n            return response\\n        \\n        elif format == 'csv':\\n            import csv\\n            import io\\n            \\n            output = io.StringIO()\\n            writer = csv.writer(output)\\n            \\n            # كتابة العناوين\\n            writer.writerow(['ID', 'Name', 'Description', 'Status', 'Created At'])\\n            \\n            # كتابة البيانات\\n            for item in items:\\n                writer.writerow([\\n                    item.id,\\n                    item.name,\\n                    item.description or '',\\n                    item.status,\\n                    item.created_at.strftime('%Y-%m-%d %H:%M:%S')\\n                ])\\n            \\n            response = Response(\\n                output.getvalue(),\\n                mimetype='text/csv',\\n                headers={\\n                    'Content-Disposition': f'attachment; filename={{ component_name|lower }}_export.csv'\\n                }\\n            )\\n            return response\\n        \\n        else:\\n            flash('تنسيق التصدير غير مدعوم', 'error')\\n            return redirect(url_for('{{ component_name|lower }}.index'))\\n    \\n    except Exception as e:\\n        logger.error(f'خطأ في تصدير {{ component_name }}: {str(e)}')\\n        flash('حدث خطأ في التصدير', 'error')\\n        return redirect(url_for('{{ component_name|lower }}.index'))\\n\\n# ==================== Error Handlers ====================\\n\\n@{{ component_name|lower }}_bp.errorhandler(404)\\ndef not_found(error):\\n    \\\"\\\"\\\"معالج الصفحة غير موجودة\\\"\\\"\\\"\\n    return render_template('{{ component_name|lower }}/404.html'), 404\\n\\n@{{ component_name|lower }}_bp.errorhandler(403)\\ndef forbidden(error):\\n    \\\"\\\"\\\"معالج الوصول ممنوع\\\"\\\"\\\"\\n    return render_template('{{ component_name|lower }}/403.html'), 403\\n\\n@{{ component_name|lower }}_bp.errorhandler(500)\\ndef internal_error(error):\\n    \\\"\\\"\\\"معالج خطأ الخادم\\\"\\\"\\\"\\n    db.session.rollback()\\n    return render_template('{{ component_name|lower }}/500.html'), 500",
        "components/model.py": "#!/usr/bin/env python3\n\"\"\"\n{{ component_name|title }} Model\nنموذج {{ component_name }} في قاعدة البيانات\n\nالملف: src/models/{{ component_name|lower }}.py\nالمؤلف: Generated by PTG\nالتاريخ: {{ timestamp }}\n\"\"\"\n\nfrom datetime import datetime\nfrom flask_sqlalchemy import SQLAlchemy\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom sqlalchemy.ext.hybrid import hybrid_property\nfrom sqlalchemy import event\nimport json\n\nfrom . import db\n\nclass {{ component_name|title }}(db.Model):\n    \"\"\"\n    نموذج {{ component_name|title }}\n    \"\"\"\n    __tablename__ = '{{ component_name|lower }}s'\n    \n    # الحقول الأساسية\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(128), nullable=False, index=True)\n    description = db.Column(db.Text)\n    \n    # حقول التواريخ\n    created_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, \n                          onupdate=datetime.utcnow, nullable=False)\n    \n    # حقول الحالة\n    is_active = db.Column(db.Boolean, default=True, nullable=False)\n    status = db.Column(db.String(50), default='active', nullable=False)\n    \n    # حقول إضافية (JSON)\n    metadata = db.Column(db.JSON)\n    \n    # إعدادات النموذج\n    __table_args__ = (\n        db.Index('idx_{{ component_name|lower }}_name_status', 'name', 'status'),\n        db.Index('idx_{{ component_name|lower }}_created', 'created_at'),\n    )\n    \n    def __init__(self, **kwargs):\n        \"\"\"\n        منشئ النموذج\n        \"\"\"\n        super({{ component_name|title }}, self).__init__(**kwargs)\n        if self.metadata is None:\n            self.metadata = {}\n    \n    def __repr__(self):\n        return f'<{{ component_name|title }} {self.name}>'\n    \n    def __str__(self):\n        return self.name\n    \n    # الخصائص المحسوبة\n    @hybrid_property\n    def is_recent(self):\n        \"\"\"التحقق من كون العنصر حديث (أقل من 24 ساعة)\"\"\"\n        from datetime import timedelta\n        return datetime.utcnow() - self.created_at < timedelta(days=1)\n    \n    @hybrid_property\n    def age_in_days(self):\n        \"\"\"عمر العنصر بالأيام\"\"\"\n        return (datetime.utcnow() - self.created_at).days\n    \n    # الدوال الأساسية\n    def save(self):\n        \"\"\"حفظ النموذج في قاعدة البيانات\"\"\"\n        try:\n            self.updated_at = datetime.utcnow()\n            db.session.add(self)\n            db.session.commit()\n            return True\n        except Exception as e:\n            db.session.rollback()\n            raise e\n    \n    def delete(self):\n        \"\"\"حذف النموذج من قاعدة البيانات\"\"\"\n        try:\n            db.session.delete(self)\n            db.session.commit()\n            return True\n        except Exception as e:\n            db.session.rollback()\n            raise e\n    \n    def soft_delete(self):\n        \"\"\"حذف ناعم للنموذج\"\"\"\n        self.is_active = False\n        self.status = 'deleted'\n        return self.save()\n    \n    def restore(self):\n        \"\"\"استعادة النموذج المحذوف نعماً\"\"\"\n        self.is_active = True\n        self.status = 'active'\n        return self.save()\n    \n    # دوال الاستعلام\n    @classmethod\n    def get_by_id(cls, id):\n        \"\"\"الحصول على عنصر بالمعرف\"\"\"\n        return cls.query.get(id)\n    \n    @classmethod\n    def get_by_name(cls, name):\n        \"\"\"الحصول على عنصر بالاسم\"\"\"\n        return cls.query.filter_by(name=name).first()\n    \n    @classmethod\n    def get_active(cls):\n        \"\"\"الحصول على العناصر النشطة فقط\"\"\"\n        return cls.query.filter_by(is_active=True)\n    \n    @classmethod\n    def get_by_status(cls, status):\n        \"\"\"الحصول على العناصر بحالة معينة\"\"\"\n        return cls.query.filter_by(status=status)\n    \n    @classmethod\n    def search(cls, query):\n        \"\"\"البحث في العناصر\"\"\"\n        return cls.query.filter(\n            cls.name.contains(query) | \n            cls.description.contains(query)\n        ).filter_by(is_active=True)\n    \n    @classmethod\n    def get_recent(cls, days=7):\n        \"\"\"الحصول على العناصر الحديثة\"\"\"\n        from datetime import timedelta\n        cutoff = datetime.utcnow() - timedelta(days=days)\n        return cls.query.filter(cls.created_at >= cutoff)\n    \n    # دوال التصدير والاستيراد\n    def to_dict(self, include_relations=False):\n        \"\"\"تحويل النموذج إلى قاموس\"\"\"\n        data = {\n            'id': self.id,\n            'name': self.name,\n            'description': self.description,\n            'created_at': self.created_at.isoformat(),\n            'updated_at': self.updated_at.isoformat(),\n            'is_active': self.is_active,\n            'status': self.status,\n            'metadata': self.metadata or {}\n        }\n        \n        if include_relations:\n            # إضافة العلاقات إذا كانت موجودة\n            pass\n        \n        return data\n    \n    @classmethod\n    def from_dict(cls, data):\n        \"\"\"إنشاء نموذج من قاموس\"\"\"\n        # إزالة الحقول التي لا يجب تحديثها مباشرة\n        exclude_fields = ['id', 'created_at', 'updated_at']\n        filtered_data = {k: v for k, v in data.items() if k not in exclude_fields}\n        \n        return cls(**filtered_data)\n    \n    def update_from_dict(self, data):\n        \"\"\"تحديث النموذج من قاموس\"\"\"\n        exclude_fields = ['id', 'created_at']\n        \n        for key, value in data.items():\n            if key not in exclude_fields and hasattr(self, key):\n                setattr(self, key, value)\n        \n        self.updated_at = datetime.utcnow()\n        return self\n    \n    # دوال التحقق\n    def validate(self):\n        \"\"\"التحقق من صحة البيانات\"\"\"\n        errors = []\n        \n        # التحقق من الاسم\n        if not self.name or len(self.name.strip()) < 2:\n            errors.append('الاسم مطلوب ويجب أن يكون على الأقل حرفين')\n        \n        # التحقق من تفرد الاسم\n        existing = self.__class__.query.filter_by(name=self.name).first()\n        if existing and existing.id != self.id:\n            errors.append('الاسم موجود بالفعل')\n        \n        # التحقق من الحالة\n        valid_statuses = ['active', 'inactive', 'pending', 'deleted']\n        if self.status not in valid_statuses:\n            errors.append(f'الحالة يجب أن تكون إحدى: {\", \".join(valid_statuses)}')\n        \n        return errors\n    \n    # أحداث النموذج\n    @staticmethod\n    def before_save(mapper, connection, target):\n        \"\"\"قبل الحفظ\"\"\"\n        # تنظيف البيانات\n        if target.name:\n            target.name = target.name.strip()\n        \n        # التحقق من البيانات\n        errors = target.validate()\n        if errors:\n            raise ValueError(f'خطأ في التحقق: {\"; \".join(errors)}')\n\n# تسجيل أحداث النموذج\nevent.listen({{ component_name|title }}, 'before_insert', {{ component_name|title }}.before_save)\nevent.listen({{ component_name|title }}, 'before_update', {{ component_name|title }}.before_save)",
        "components/view.html": "{% extends \"base.html\" %}\n\n{% block title %}{{ component_name|title }} - {{ super() }}{% endblock %}\n\n{% block breadcrumb %}\n<nav aria-label=\"breadcrumb\">\n  <ol class=\"breadcrumb\">\n    <li class=\"breadcrumb-item\"><a href=\"{{ url_for('main.index') }}\">الرئيسية</a></li>\n    <li class=\"breadcrumb-item\"><a href=\"{{ url_for('{{ component_name|lower }}.index') }}\">{{ component_name|title }}</a></li>\n    <li class=\"breadcrumb-item active\" aria-current=\"page\">عرض</li>\n  </ol>\n</nav>\n{% endblock %}\n\n{% block page_header %}\n<div class=\"d-flex justify-content-between align-items-start mb-4\">\n  <div>\n    <h1 class=\"h2 mb-0\">\n      <i class=\"fas fa-eye text-primary me-2\"></i>\n      عرض {{ component_name|title }}\n    </h1>\n    <p class=\"text-muted mb-0\">تفاصيل {{ component_name|lower }} وإدارتها</p>\n  </div>\n  \n  <div class=\"btn-group\" role=\"group\">\n    <a href=\"{{ url_for('{{ component_name|lower }}.index') }}\" class=\"btn btn-outline-secondary\">\n      <i class=\"fas fa-list me-1\"></i> القائمة\n    </a>\n    \n    {% if current_user and current_user.is_authenticated %}\n    <a href=\"{{ url_for('{{ component_name|lower }}.edit', id=item.id) }}\" class=\"btn btn-outline-primary\">\n      <i class=\"fas fa-edit me-1\"></i> تعديل\n    </a>\n    {% endif %}\n  </div>\n</div>\n{% endblock %}\n\n{% block content %}\n<div class=\"row\">\n  <!-- المحتوى الرئيسي -->\n  <div class=\"col-lg-8\">\n    <!-- معلومات أساسية -->\n    <div class=\"card mb-4\">\n      <div class=\"card-header bg-white\">\n        <h5 class=\"card-title mb-0\">\n          <i class=\"fas fa-info-circle text-info me-2\"></i>\n          المعلومات الأساسية\n        </h5>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <div class=\"mb-3\">\n              <label class=\"form-label fw-bold text-muted\">الاسم</label>\n              <p class=\"h5\">{{ item.name }}</p>\n            </div>\n          </div>\n          \n          <div class=\"col-md-6\">\n            <div class=\"mb-3\">\n              <label class=\"form-label fw-bold text-muted\">المعرف</label>\n              <p class=\"h6 text-muted\">#{{ item.id }}</p>\n            </div>\n          </div>\n        </div>\n        \n        {% if item.description %}\n        <div class=\"mb-3\">\n          <label class=\"form-label fw-bold text-muted\">الوصف</label>\n          <div class=\"p-3 bg-light rounded\">\n            {{ item.description|nl2br }}\n          </div>\n        </div>\n        {% endif %}\n        \n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <div class=\"mb-3\">\n              <label class=\"form-label fw-bold text-muted\">الحالة</label>\n              <p>\n                {% if item.is_active %}\n                  <span class=\"badge bg-success\">\n                    <i class=\"fas fa-check me-1\"></i>نشط\n                  </span>\n                {% else %}\n                  <span class=\"badge bg-secondary\">\n                    <i class=\"fas fa-times me-1\"></i>غير نشط\n                  </span>\n                {% endif %}\n                \n                <span class=\"badge bg-info ms-2\">{{ item.status }}</span>\n              </p>\n            </div>\n          </div>\n          \n          <div class=\"col-md-6\">\n            <div class=\"mb-3\">\n              <label class=\"form-label fw-bold text-muted\">العمر</label>\n              <p>\n                {% if item.is_recent %}\n                  <span class=\"badge bg-warning\">\n                    <i class=\"fas fa-star me-1\"></i>حديث\n                  </span>\n                {% endif %}\n                <span class=\"text-muted\">{{ item.age_in_days }} يوم</span>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- بيانات إضافية -->\n    {% if item.metadata %}\n    <div class=\"card mb-4\">\n      <div class=\"card-header bg-white\">\n        <h5 class=\"card-title mb-0\">\n          <i class=\"fas fa-database text-secondary me-2\"></i>\n          البيانات الإضافية\n        </h5>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"table-responsive\">\n          <table class=\"table table-sm table-borderless\">\n            <tbody>\n              {% for key, value in item.metadata.items() %}\n              <tr>\n                <td class=\"fw-bold text-muted\">{{ key }}:</td>\n                <td>{{ value }}</td>\n              </tr>\n              {% endfor %}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n    {% endif %}\n    \n    <!-- الإجراءات -->\n    {% if current_user and current_user.is_authenticated %}\n    <div class=\"card\">\n      <div class=\"card-header bg-white\">\n        <h5 class=\"card-title mb-0\">\n          <i class=\"fas fa-tools text-warning me-2\"></i>\n          الإجراءات\n        </h5>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"d-flex gap-2 flex-wrap\">\n          <a href=\"{{ url_for('{{ component_name|lower }}.edit', id=item.id) }}\" \n             class=\"btn btn-primary\">\n            <i class=\"fas fa-edit me-1\"></i> تعديل\n          </a>\n          \n          {% if item.is_active %}\n          <button type=\"button\" class=\"btn btn-warning\" onclick=\"confirmSoftDelete()\">\n            <i class=\"fas fa-archive me-1\"></i> أرشفة\n          </button>\n          {% else %}\n          <form method=\"POST\" action=\"{{ url_for('{{ component_name|lower }}.restore', id=item.id) }}\" \n                style=\"display: inline;\">\n            <button type=\"submit\" class=\"btn btn-success\">\n              <i class=\"fas fa-undo me-1\"></i> استعادة\n            </button>\n          </form>\n          {% endif %}\n          \n          <button type=\"button\" class=\"btn btn-danger\" onclick=\"confirmDelete()\">\n            <i class=\"fas fa-trash me-1\"></i> حذف نهائي\n          </button>\n          \n          <a href=\"{{ url_for('{{ component_name|lower }}.api_get', id=item.id) }}\" \n             class=\"btn btn-outline-info\" target=\"_blank\">\n            <i class=\"fas fa-code me-1\"></i> JSON\n          </a>\n        </div>\n      </div>\n    </div>\n    {% endif %}\n  </div>\n  \n  <!-- الشريط الجانبي -->\n  <div class=\"col-lg-4\">\n    <!-- معلومات التواريخ -->\n    <div class=\"card mb-4\">\n      <div class=\"card-header bg-white\">\n        <h5 class=\"card-title mb-0\">\n          <i class=\"fas fa-clock text-info me-2\"></i>\n          معلومات زمنية\n        </h5>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"mb-3\">\n          <label class=\"form-label fw-bold text-muted small\">تاريخ الإنشاء</label>\n          <p class=\"mb-1\">{{ item.created_at.strftime('%Y/%m/%d') }}</p>\n          <small class=\"text-muted\">{{ item.created_at.strftime('%H:%M') }}</small>\n        </div>\n        \n        <div class=\"mb-3\">\n          <label class=\"form-label fw-bold text-muted small\">آخر تحديث</label>\n          <p class=\"mb-1\">{{ item.updated_at.strftime('%Y/%m/%d') }}</p>\n          <small class=\"text-muted\">{{ item.updated_at.strftime('%H:%M') }}</small>\n        </div>\n        \n        <div class=\"progress\" style=\"height: 6px;\">\n          <div class=\"progress-bar bg-info\" \n               style=\"width: {{ (item.age_in_days / 30 * 100) | round }}%\"\n               title=\"عمر العنصر\"></div>\n        </div>\n        <small class=\"text-muted\">عمر العنصر: {{ item.age_in_days }} يوم</small>\n      </div>\n    </div>\n    \n    <!-- إحصائيات سريعة -->\n    <div class=\"card mb-4\">\n      <div class=\"card-header bg-white\">\n        <h5 class=\"card-title mb-0\">\n          <i class=\"fas fa-chart-bar text-success me-2\"></i>\n          إحصائيات\n        </h5>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"row text-center\">\n          <div class=\"col-6\">\n            <div class=\"border-end\">\n              <h4 class=\"text-primary mb-0\">{{ item.id }}</h4>\n              <small class=\"text-muted\">المعرف</small>\n            </div>\n          </div>\n          <div class=\"col-6\">\n            <h4 class=\"text-info mb-0\">{{ item.age_in_days }}</h4>\n            <small class=\"text-muted\">عدد الأيام</small>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- روابط ذات صلة -->\n    {% if related_items %}\n    <div class=\"card\">\n      <div class=\"card-header bg-white\">\n        <h5 class=\"card-title mb-0\">\n          <i class=\"fas fa-link text-warning me-2\"></i>\n          عناصر ذات صلة\n        </h5>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"list-group list-group-flush\">\n          {% for related in related_items %}\n          <a href=\"{{ url_for('{{ component_name|lower }}.view', id=related.id) }}\" \n             class=\"list-group-item list-group-item-action border-0 px-0\">\n            <div class=\"d-flex justify-content-between align-items-center\">\n              <div>\n                <h6 class=\"mb-1\">{{ related.name }}</h6>\n                {% if related.description %}\n                <small class=\"text-muted\">\n                  {{ related.description[:50] }}{% if related.description|length > 50 %}...{% endif %}\n                </small>\n                {% endif %}\n              </div>\n              <small class=\"text-muted\">\n                {{ related.created_at.strftime('%m/%d') }}\n              </small>\n            </div>\n          </a>\n          {% endfor %}\n        </div>\n      </div>\n    </div>\n    {% endif %}\n  </div>\n</div>\n\n<!-- نماذج التأكيد -->\n{% if current_user and current_user.is_authenticated %}\n<!-- حذف ناعم -->\n<div class=\"modal fade\" id=\"softDeleteModal\" tabindex=\"-1\">\n  <div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h5 class=\"modal-title\">تأكيد الأرشفة</h5>\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n      </div>\n      <div class=\"modal-body\">\n        <p>هل أنت متأكد من أرشفة \"{{ item.name }}\"؟</p>\n        <p class=\"text-muted small\">يمكن استعادة العنصر لاحقاً.</p>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">إلغاء</button>\n        <form method=\"POST\" action=\"{{ url_for('{{ component_name|lower }}.delete', id=item.id) }}\" style=\"display: inline;\">\n          <button type=\"submit\" class=\"btn btn-warning\">نعم، أرشف</button>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n\n<!-- حذف نهائي -->\n<div class=\"modal fade\" id=\"deleteModal\" tabindex=\"-1\">\n  <div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header bg-danger text-white\">\n        <h5 class=\"modal-title\">تحذير - حذف نهائي</h5>\n        <button type=\"button\" class=\"btn-close btn-close-white\" data-bs-dismiss=\"modal\"></button>\n      </div>\n      <div class=\"modal-body\">\n        <div class=\"alert alert-danger\">\n          <i class=\"fas fa-exclamation-triangle me-2\"></i>\n          <strong>تحذير:</strong> هذا الإجراء لا يمكن التراجع عنه!\n        </div>\n        <p>هل أنت متأكد من حذف \"{{ item.name }}\" نهائياً؟</p>\n        <p class=\"text-muted small\">سيتم حذف جميع البيانات المرتبطة بهذا العنصر.</p>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">إلغاء</button>\n        <form method=\"POST\" action=\"{{ url_for('{{ component_name|lower }}.delete', id=item.id) }}\" style=\"display: inline;\">\n          <input type=\"hidden\" name=\"permanent\" value=\"true\">\n          <button type=\"submit\" class=\"btn btn-danger\">نعم، احذف نهائياً</button>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n{% endif %}\n{% endblock %}\n\n{% block scripts %}\n{{ super() }}\n<script>\nfunction confirmSoftDelete() {\n    const modal = new bootstrap.Modal(document.getElementById('softDeleteModal'));\n    modal.show();\n}\n\nfunction confirmDelete() {\n    const modal = new bootstrap.Modal(document.getElementById('deleteModal'));\n    modal.show();\n}\n\n// إضافة تأثيرات تفاعلية\ndocument.addEventListener('DOMContentLoaded', function() {\n    // تحديث أوقات العرض تلقائياً\n    const timeElements = document.querySelectorAll('[data-time]');\n    timeElements.forEach(function(element) {\n        const time = new Date(element.dataset.time);\n        const now = new Date();\n        const diff = now - time;\n        \n        if (diff < 60000) { // أقل من دقيقة\n            element.textContent = 'الآن';\n        } else if (diff < 3600000) { // أقل من ساعة\n            element.textContent = Math.floor(diff / 60000) + ' دقيقة';\n        } else if (diff < 86400000) { // أقل من يوم\n            element.textContent = Math.floor(diff / 3600000) + ' ساعة';\n        }\n    });\n    \n    // تفعيل tooltips\n    const tooltips = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n    tooltips.forEach(function(tooltip) {\n        new bootstrap.Tooltip(tooltip);\n    });\n});\n</script>\n{% endblock %}"
      }
    },
    "general": {
      "structure": "├── config.py\n├── main.py\n├── template.yaml\n└── test_main.py\n",
      "files": {
        "config.py": "#!/usr/bin/env python3\n\"\"\"\nإعدادات مشروع {{ project_name }}\n\nيحتوي على جميع الإعدادات والثوابت المطلوبة للمشروع\n\"\"\"\n\nimport os\nfrom pathlib import Path\nfrom dotenv import load_dotenv\n\n# تحميل متغيرات البيئة\nload_dotenv()\n\n\nclass Config:\n    \"\"\"فئة الإعدادات الأساسية\"\"\"\n    \n    # المجلدات الأساسية\n    PROJECT_DIR = Path(__file__).parent\n    SRC_DIR = PROJECT_DIR / \"src\"\n    LOGS_DIR = PROJECT_DIR / \"logs\"\n    DATA_DIR = PROJECT_DIR / \"data\"\n    CONFIGS_DIR = PROJECT_DIR / \"configs\"\n    TESTS_DIR = PROJECT_DIR / \"tests\"\n    DOCS_DIR = PROJECT_DIR / \"docs\"\n    \n    # إعدادات التطبيق\n    APP_NAME = \"{{ project_name }}\"\n    APP_VERSION = \"1.0.0\"\n    ENVIRONMENT = os.getenv(\"ENVIRONMENT\", \"development\")\n    DEBUG = os.getenv(\"DEBUG\", \"True\").lower() in (\"true\", \"1\", \"yes\")\n    \n    # إعدادات التسجيل\n    LOG_LEVEL = os.getenv(\"LOG_LEVEL\", \"INFO\")\n    LOG_FORMAT = \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n    LOG_FILE = LOGS_DIR / f\"{APP_NAME}.log\"\n    \n    # إعدادات قاعدة البيانات (إذا أردت استخدامها)\n    DATABASE_URL = os.getenv(\"DATABASE_URL\", f\"sqlite:///{PROJECT_DIR}/app.db\")\n    \n    # إعدادات الأمان\n    SECRET_KEY = os.getenv(\"SECRET_KEY\", \"your-secret-key-here\")\n    \n    # إعدادات إضافية\n    MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB\n    ALLOWED_EXTENSIONS = {'.txt', '.pdf', '.png', '.jpg', '.jpeg', '.gif'}\n    \n    @classmethod\n    def validate_config(cls):\n        \"\"\"التحقق من صحة الإعدادات\"\"\"\n        errors = []\n        \n        # التحقق من المجلدات المطلوبة\n        if not cls.PROJECT_DIR.exists():\n            errors.append(f\"مجلد المشروع غير موجود: {cls.PROJECT_DIR}\")\n        \n        # التحقق من المتغيرات المطلوبة\n        if cls.ENVIRONMENT not in [\"development\", \"testing\", \"production\"]:\n            errors.append(f\"بيئة غير صحيحة: {cls.ENVIRONMENT}\")\n        \n        if len(cls.SECRET_KEY) < 16:\n            errors.append(\"المفتاح السري قصير جداً (يجب أن يكون 16 حرف على الأقل)\")\n        \n        return errors\n    \n    def __repr__(self):\n        return f\"<Config {self.APP_NAME} v{self.APP_VERSION} ({self.ENVIRONMENT})>\"\n\n\nclass DevelopmentConfig(Config):\n    \"\"\"إعدادات بيئة التطوير\"\"\"\n    DEBUG = True\n    TESTING = False\n\n\nclass TestingConfig(Config):\n    \"\"\"إعدادات بيئة الاختبار\"\"\"\n    DEBUG = False\n    TESTING = True\n    DATABASE_URL = \":memory:\"\n\n\nclass ProductionConfig(Config):\n    \"\"\"إعدادات بيئة الإنتاج\"\"\"\n    DEBUG = False\n    TESTING = False\n\n\n# تحديد الإعدادات حسب البيئة\nconfig_by_name = {\n    'development': DevelopmentConfig,\n    'testing': TestingConfig,\n    'production': ProductionConfig\n}\n\n# الحصول على إعدادات البيئة الحالية\ncurrent_config = config_by_name.get(Config.ENVIRONMENT, DevelopmentConfig)",
        "main.py": "",
        "template.yaml": "name: \"python-general\"\nversion: \"1.0.0\"\ndescription: \"قالب Python عام للمشاريع الأساسية\"\nlanguage: \"python\"\nframework: \"general\"\n\nstructure:\n  directories:\n    - \"src\"\n    - \"src/utils\"\n    - \"tests\"\n    - \"docs\"\n    - \"configs\"\n    - \"logs\"\n    - \"data\"\n    - \"scripts\"\n\n  files:\n    - path: \"main.py\"\n      template: \"python/general/main.py\"\n      type: \"template\"\n    \n    - path: \"requirements.txt\"\n      template: \"python/common/requirements.txt\"\n      type: \"template\"\n    \n    - path: \"README.md\"\n      template: \"python/common/README.md\"\n      type: \"template\"\n    \n    - path: \".gitignore\"\n      template: \"python/common/gitignore\"\n      type: \"template\"\n    \n    - path: \"config.py\"\n      template: \"python/general/config.py\"\n      type: \"template\"\n    \n    - path: \"src/__init__.py\"\n      content: \"# {{ project_name }} Package\\n__version__ = '1.0.0'\\n__author__ = 'Generated by PTG'\\n\"\n      type: \"content\"\n    \n    - path: \"src/utils/__init__.py\"\n      content: \"# Utilities package\\n\"\n      type: \"content\"\n    \n    - path: \"tests/__init__.py\"\n      content: \"# Tests package\\n\"\n      type: \"content\"\n    \n    - path: \"tests/test_main.py\"\n      template: \"python/general/test_main.py\"\n      type: \"template\"\n\nassets: []\n\npost_tasks:\n  - type: \"gitinit\"\n  - type: \"chmod\"\n    file: \"main.py\"\n    mode: \"755\"\n\ncomponents:\n  module:\n    template: \"python/general/components/module.py\"\n    path: \"src/{{component_name|lower}}.py\"\n  \n  class:\n    template: \"python/general/components/class.py\"\n    path: \"src/{{component_name|lower}}.py\"\n  \n  function:\n    template: \"python/general/components/function.py\"\n    path: \"src/{{component_name|lower}}.py\"",
        "test_main.py": "#!/usr/bin/env python3\n\"\"\"\nاختبارات للملف الرئيسي {{ project_name }}\n\nيحتوي على اختبارات شاملة للوظائف الأساسية\n\"\"\"\n\nimport pytest\nimport sys\nimport os\nfrom pathlib import Path\nfrom unittest.mock import patch, MagicMock\n\n# إضافة مجلد المشروع إلى المسار\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\nimport main\nfrom config import Config\n\n\nclass TestMainApplication:\n    \"\"\"مجموعة اختبارات التطبيق الرئيسي\"\"\"\n    \n    def test_config_loading(self):\n        \"\"\"اختبار تحميل الإعدادات\"\"\"\n        config = Config()\n        assert config.APP_NAME == \"{{ project_name }}\"\n        assert config.APP_VERSION == \"1.0.0\"\n        assert config.PROJECT_DIR.exists()\n    \n    def test_setup_directories(self):\n        \"\"\"اختبار إنشاء المجلدات\"\"\"\n        config = Config()\n        \n        # التأكد من عدم وجود المجلدات مسبقاً\n        test_dirs = [config.LOGS_DIR, config.DATA_DIR, config.CONFIGS_DIR]\n        for directory in test_dirs:\n            if directory.exists():\n                directory.rmdir()\n        \n        # تشغيل دالة الإعداد\n        main.setup_directories(config)\n        \n        # التحقق من إنشاء المجلدات\n        for directory in test_dirs:\n            assert directory.exists(), f\"المجلد {directory} لم يتم إنشاؤه\"\n    \n    @patch('main.setup_directories')\n    @patch('builtins.print')\n    def test_run_application_success(self, mock_print, mock_setup):\n        \"\"\"اختبار تشغيل التطبيق بنجاح\"\"\"\n        config = Config()\n        \n        # تشغيل التطبيق\n        main.run_application(config)\n        \n        # التحقق من استدعاء الدوال\n        mock_setup.assert_called_once_with(config)\n        \n        # التحقق من طباعة رسائل النجاح\n        success_messages = [call.args[0] for call in mock_print.call_args_list]\n        assert any(\"تم تهيئة التطبيق بنجاح\" in msg for msg in success_messages)\n    \n    @patch('main.setup_directories')\n    @patch('builtins.print')\n    @patch('sys.exit')\n    def test_run_application_error_handling(self, mock_exit, mock_print, mock_setup):\n        \"\"\"اختبار التعامل مع الأخطاء\"\"\"\n        config = Config()\n        \n        # محاكاة حدوث خطأ\n        mock_setup.side_effect = Exception(\"خطأ في الإعداد\")\n        \n        # تشغيل التطبيق\n        main.run_application(config)\n        \n        # التحقق من استدعاء sys.exit\n        mock_exit.assert_called_once_with(1)\n        \n        # التحقق من طباعة رسالة الخطأ\n        error_messages = [call.args[0] for call in mock_print.call_args_list]\n        assert any(\"❌ خطأ في تشغيل التطبيق\" in msg for msg in error_messages)\n    \n    @patch('main.run_application')\n    @patch('builtins.print')\n    def test_main_function(self, mock_print, mock_run):\n        \"\"\"اختبار الدالة الرئيسية\"\"\"\n        # تشغيل الدالة الرئيسية\n        main.main()\n        \n        # التحقق من طباعة رسالة الترحيب\n        welcome_messages = [call.args[0] for call in mock_print.call_args_list]\n        assert any(\"مرحباً بك في {{ project_name }}\" in msg for msg in welcome_messages)\n        \n        # التحقق من استدعاء run_application\n        mock_run.assert_called_once()\n\n\nclass TestConfig:\n    \"\"\"مجموعة اختبارات الإعدادات\"\"\"\n    \n    def test_config_initialization(self):\n        \"\"\"اختبار تهيئة الإعدادات\"\"\"\n        config = Config()\n        assert hasattr(config, 'APP_NAME')\n        assert hasattr(config, 'PROJECT_DIR')\n        assert hasattr(config, 'ENVIRONMENT')\n    \n    def test_config_validation_success(self):\n        \"\"\"اختبار التحقق من الإعدادات الصحيحة\"\"\"\n        # تعيين إعدادات صحيحة\n        original_env = Config.ENVIRONMENT\n        original_key = Config.SECRET_KEY\n        \n        Config.ENVIRONMENT = \"development\"\n        Config.SECRET_KEY = \"a-very-long-secret-key-for-testing\"\n        \n        errors = Config.validate_config()\n        assert len(errors) == 0, f\"أخطاء غير متوقعة: {errors}\"\n        \n        # إعادة الإعدادات الأصلية\n        Config.ENVIRONMENT = original_env\n        Config.SECRET_KEY = original_key\n    \n    def test_config_validation_errors(self):\n        \"\"\"اختبار التحقق من الإعدادات الخاطئة\"\"\"\n        # تعيين إعدادات خاطئة\n        original_env = Config.ENVIRONMENT\n        original_key = Config.SECRET_KEY\n        \n        Config.ENVIRONMENT = \"invalid_environment\"\n        Config.SECRET_KEY = \"short\"\n        \n        errors = Config.validate_config()\n        assert len(errors) > 0, \"يجب أن تكون هناك أخطاء\"\n        assert any(\"بيئة غير صحيحة\" in error for error in errors)\n        assert any(\"المفتاح السري قصير\" in error for error in errors)\n        \n        # إعادة الإعدادات الأصلية\n        Config.ENVIRONMENT = original_env\n        Config.SECRET_KEY = original_key\n\n\n@pytest.fixture\ndef clean_directories():\n    \"\"\"إزالة المجلدات الاختبارية بعد كل اختبار\"\"\"\n    yield\n    \n    config = Config()\n    test_dirs = [config.LOGS_DIR, config.DATA_DIR, config.CONFIGS_DIR]\n    \n    for directory in test_dirs:\n        if directory.exists() and directory != config.PROJECT_DIR:\n            try:\n                # إزالة الملفات أولاً\n                for file in directory.rglob('*'):\n                    if file.is_file():\n                        file.unlink()\n                # ثم إزالة المجلدات\n                for subdir in sorted(directory.rglob('*'), key=lambda x: len(x.parts), reverse=True):\n                    if subdir.is_dir():\n                        subdir.rmdir()\n                directory.rmdir()\n            except OSError:\n                pass  # تجاهل أخطاء الحذف\n\n\ndef test_project_structure():\n    \"\"\"اختبار هيكل المشروع الأساسي\"\"\"\n    config = Config()\n    \n    # التحقق من وجود الملفات الأساسية\n    essential_files = [\n        config.PROJECT_DIR / \"main.py\",\n        config.PROJECT_DIR / \"config.py\",\n        config.PROJECT_DIR / \"requirements.txt\",\n        config.PROJECT_DIR / \"README.md\"\n    ]\n    \n    for file_path in essential_files:\n        assert file_path.exists(), f\"الملف المطلوب غير موجود: {file_path}\"\n\n\nif __name__ == \"__main__\":\n    # تشغيل الاختبارات\n    pytest.main([__file__, \"-v\"])"
      }
    },
    "ml": {
      "structure": "├── README.md\n├── components/\n│   ├── dataset.py\n│   ├── model.py\n│   └── pipeline.py\n├── config.yaml\n├── main.py\n├── predict.py\n├── requirements.txt\n├── src/\n│   ├── config.py\n│   ├── data/\n│   │   └── data_loader.py\n│   ├── models/\n│   │   ├── predictor.py\n│   │   └── trainer.py\n│   └── utils/\n│       ├── logger.py\n│       └── metrics.py\n├── template.yaml\n└── train.py\n",
      "files": {
        "README.md": "# {{ project_name }}\n\nMachine Learning project generated by {{ generator }} at {{ timestamp }}.\n\n## 📊 Project Overview\n\nThis is a comprehensive machine learning project template that includes:\n\n- 🔬 **Data processing and feature engineering**\n- 🤖 **Model training and evaluation**\n- 📈 **Visualization and reporting**\n- 🚀 **Model deployment capabilities**\n- 🧪 **Testing and validation**\n\n## 🏗️ Project Structure\n\n```\n{{ project_name }}/\n├── main.py                 # Main entry point\n├── train.py               # Training script\n├── predict.py             # Prediction script\n├── config.yaml            # Configuration file\n├── requirements.txt       # Dependencies\n├── README.md              # This file\n├── .gitignore            # Git ignore rules\n├── src/                  # Source code\n│   ├── __init__.py\n│   ├── config/           # Configuration modules\n│   ├── data/             # Data handling\n│   ├── features/         # Feature engineering\n│   ├── models/           # Model definitions\n│   ├── preprocessing/    # Data preprocessing\n│   ├── utils/            # Utility functions\n│   └── visualization/    # Plotting and visualization\n├── data/                 # Data directory\n│   ├── raw/              # Raw data files\n│   ├── processed/        # Processed data\n│   └── external/         # External data sources\n├── models/               # Saved models\n│   ├── trained/          # Final models\n│   └── checkpoints/      # Training checkpoints\n├── notebooks/            # Jupyter notebooks\n├── reports/              # Analysis reports\n│   └── figures/          # Generated plots\n├── tests/                # Unit tests\n├── scripts/              # Utility scripts\n└── docs/                 # Documentation\n```\n\n## 🚀 Quick Start\n\n### 1. Setup Environment\n\n```bash\n# Create virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\n\n# Install dependencies\npip install -r requirements.txt\n```\n\n### 2. Configuration\n\nEdit `config.yaml` to match your project needs:\n\n- Data paths and preprocessing options\n- Model parameters and training settings\n- Evaluation metrics and validation strategy\n\n### 3. Data Preparation\n\nPlace your data files in the appropriate directories:\n\n```bash\ndata/\n├── raw/          # Your original datasets\n├── processed/    # Cleaned and processed data\n└── external/     # External data sources\n```\n\n### 4. Training\n\nTrain your model using the training script:\n\n```bash\n# Basic training\npython train.py\n\n# With custom parameters\npython train.py --epochs 200 --batch-size 64 --learning-rate 0.0001\n\n# With validation split\npython train.py --validation-split 0.2 --early-stopping\n```\n\n### 5. Prediction\n\nMake predictions with your trained model:\n\n```bash\n# Basic prediction\npython predict.py --model models/trained/model.joblib --data data/test.csv\n\n# With confidence scores\npython predict.py --model models/trained/model.joblib --data data/test.csv --confidence\n\n# Export to different formats\npython predict.py --model models/trained/model.joblib --data data/test.csv --format csv\n```\n\n### 6. Full Pipeline\n\nRun the complete ML pipeline:\n\n```bash\npython main.py\n```\n\n## 📊 Features\n\n### Data Processing\n- ✅ Automated data loading and validation\n- ✅ Missing value handling\n- ✅ Feature scaling and normalization\n- ✅ Categorical encoding\n- ✅ Train/validation/test splitting\n\n### Model Training\n- ✅ Multiple algorithm support\n- ✅ Hyperparameter optimization\n- ✅ Cross-validation\n- ✅ Early stopping\n- ✅ Model checkpointing\n\n### Evaluation\n- ✅ Comprehensive metrics\n- ✅ Performance visualization\n- ✅ Model comparison\n- ✅ Feature importance analysis\n\n### Experiment Tracking\n- ✅ MLflow integration\n- ✅ Weights & Biases support\n- ✅ Metrics logging\n- ✅ Model versioning\n\n## 🔧 Configuration Options\n\nThe `config.yaml` file provides extensive configuration options:\n\n- **Data**: Paths, splitting ratios, preprocessing options\n- **Model**: Algorithm choice, parameters, saving options\n- **Training**: Epochs, batch size, optimization settings\n- **Evaluation**: Metrics, validation strategy\n- **Logging**: MLflow, Weights & Biases, file logging\n\n## 📈 Monitoring and Tracking\n\n### MLflow\n```bash\n# Start MLflow UI\nmlflow ui\n\n# View at http://localhost:5000\n```\n\n### Weights & Biases\n```bash\n# Login to W&B\nwandb login\n\n# Training will automatically log to W&B\n```\n\n## 🧪 Testing\n\nRun the test suite:\n\n```bash\n# Run all tests\npytest\n\n# Run with coverage\npytest --cov=src\n\n# Run specific test file\npytest tests/test_models.py\n```\n\n## 📚 Documentation\n\n### Jupyter Notebooks\n\nExplore the `notebooks/` directory for:\n- Data exploration and analysis\n- Model experimentation\n- Results visualization\n- Tutorial notebooks\n\n### API Documentation\n\nGenerate API documentation:\n\n```bash\n# Install documentation dependencies\npip install sphinx sphinx-rtd-theme\n\n# Generate docs\ncd docs/\nmake html\n```\n\n## 🚀 Deployment\n\n### Local Deployment\n```bash\n# Flask API (example)\npython -m src.deployment.flask_app\n\n# Streamlit app (example)\nstreamlit run src/deployment/streamlit_app.py\n```\n\n### Docker Deployment\n```bash\n# Build Docker image\ndocker build -t {{ project_name }} .\n\n# Run container\ndocker run -p 5000:5000 {{ project_name }}\n```\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Add tests for new functionality\n5. Run the test suite\n6. Submit a pull request\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## 🆘 Support\n\nFor support and questions:\n- Check the documentation in `docs/`\n- Review example notebooks in `notebooks/`\n- Open an issue on GitHub\n\n## 📋 TODO\n\n- [ ] Add more algorithms support\n- [ ] Implement automated feature selection\n- [ ] Add model interpretability tools\n- [ ] Enhance deployment options\n- [ ] Add time series forecasting support\n\n---\n\nGenerated by {{ generator }} - {{ timestamp }}",
        "config.yaml": "# {{ project_name }} Configuration\n# Generated by {{ generator }} at {{ timestamp }}\n\n# Project Information\nproject:\n  name: \"{{ project_name }}\"\n  version: \"1.0.0\"\n  description: \"Machine Learning project generated by PTG\"\n  author: \"{{ author | default('PTG User') }}\"\n\n# Data Configuration\ndata:\n  raw_path: \"data/raw/\"\n  processed_path: \"data/processed/\"\n  external_path: \"data/external/\"\n  features_path: \"data/features/\"\n  \n  # Data splitting\n  train_size: 0.7\n  validation_size: 0.15\n  test_size: 0.15\n  random_state: 42\n  \n  # Data preprocessing\n  preprocessing:\n    normalize: true\n    standardize: false\n    handle_missing: \"drop\"  # drop, mean, median, mode\n    encode_categorical: \"onehot\"  # onehot, label, target\n\n# Model Configuration\nmodel:\n  type: \"classification\"  # classification, regression, clustering\n  algorithm: \"random_forest\"  # random_forest, xgboost, neural_network, svm\n  \n  # Model parameters (example for Random Forest)\n  parameters:\n    n_estimators: 100\n    max_depth: 10\n    min_samples_split: 2\n    min_samples_leaf: 1\n    random_state: 42\n  \n  # Model paths\n  save_path: \"models/trained/\"\n  checkpoint_path: \"models/checkpoints/\"\n  \n# Training Configuration\ntraining:\n  epochs: 100\n  batch_size: 32\n  learning_rate: 0.001\n  early_stopping: true\n  patience: 10\n  \n  # Cross validation\n  cv_folds: 5\n  cv_strategy: \"stratified\"  # stratified, kfold, groupkfold\n  \n  # Optimization\n  hyperparameter_tuning: false\n  optimization_method: \"grid_search\"  # grid_search, random_search, bayesian\n  \n# Evaluation Configuration\nevaluation:\n  metrics:\n    classification:\n      - \"accuracy\"\n      - \"precision\"\n      - \"recall\"\n      - \"f1_score\"\n      - \"roc_auc\"\n    regression:\n      - \"mse\"\n      - \"rmse\"\n      - \"mae\"\n      - \"r2_score\"\n  \n  # Validation strategy\n  validation_strategy: \"holdout\"  # holdout, cross_validation, time_series\n  \n# Logging Configuration\nlogging:\n  level: \"INFO\"\n  format: \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n  file: \"logs/{{ project_name }}.log\"\n  \n  # MLflow tracking\n  mlflow:\n    enabled: true\n    experiment_name: \"{{ project_name }}_experiments\"\n    tracking_uri: \"mlruns/\"\n  \n  # Weights & Biases\n  wandb:\n    enabled: false\n    project: \"{{ project_name }}\"\n    entity: \"your_username\"\n\n# Output Configuration\noutput:\n  reports_path: \"reports/\"\n  figures_path: \"reports/figures/\"\n  results_path: \"results/\"\n  \n  # Export formats\n  model_format: \"joblib\"  # joblib, pickle, onnx\n  results_format: \"json\"  # json, csv, parquet\n\n# Environment Configuration\nenvironment:\n  python_version: \"3.9+\"\n  cuda_available: false\n  random_seed: 42\n  \n  # Resource limits\n  max_memory: \"8GB\"\n  max_cpu_cores: 4\n  \n# Feature Engineering\nfeatures:\n  # Feature selection\n  selection:\n    enabled: true\n    method: \"mutual_info\"  # mutual_info, chi2, f_test, rfe\n    k_best: 20\n  \n  # Feature scaling\n  scaling:\n    method: \"standard\"  # standard, minmax, robust, quantile\n    \n  # Feature creation\n  engineering:\n    polynomial_features: false\n    interaction_features: false\n    temporal_features: false\n\n# Deployment Configuration\ndeployment:\n  model_serving:\n    framework: \"flask\"  # flask, fastapi, streamlit\n    host: \"0.0.0.0\"\n    port: 5000\n  \n  # Docker configuration\n  docker:\n    enabled: false\n    base_image: \"python:3.9-slim\"\n    \n  # Cloud deployment\n  cloud:\n    provider: \"local\"  # local, aws, gcp, azure\n    region: \"us-east-1\"",
        "main.py": "#!/usr/bin/env python3\n\"\"\"\n{{ project_name }} - Machine Learning Project\nCreated by {{ generator }} at {{ timestamp }}\n\nThis is the main entry point for the ML project.\n\"\"\"\n\nimport os\nimport sys\nimport logging\nfrom pathlib import Path\n\n# Add src to Python path\nsys.path.append(str(Path(__file__).parent / \"src\"))\n\nfrom src.config import Config\nfrom src.data.data_loader import DataLoader\nfrom src.models.trainer import Trainer\nfrom src.models.predictor import Predictor\nfrom src.utils.logger import setup_logging\nfrom src.utils.metrics import MetricsTracker\n\ndef main():\n    \"\"\"Main function for ML pipeline\"\"\"\n    # Setup logging\n    setup_logging()\n    logger = logging.getLogger(__name__)\n    \n    try:\n        # Load configuration\n        config = Config()\n        logger.info(\"🚀 Starting ML pipeline for {{ project_name }}\")\n        \n        # Initialize metrics tracker\n        metrics = MetricsTracker()\n        \n        # Load data\n        logger.info(\"📊 Loading data...\")\n        data_loader = DataLoader(config)\n        X_train, X_test, y_train, y_test = data_loader.load_and_split()\n        \n        # Train model\n        logger.info(\"🔨 Training model...\")\n        trainer = Trainer(config)\n        model = trainer.train(X_train, y_train)\n        \n        # Evaluate model\n        logger.info(\"📈 Evaluating model...\")\n        trainer.evaluate(model, X_test, y_test, metrics)\n        \n        # Save model\n        logger.info(\"💾 Saving model...\")\n        trainer.save_model(model, config.model_path)\n        \n        # Make predictions (example)\n        logger.info(\"🔮 Making sample predictions...\")\n        predictor = Predictor(config.model_path)\n        sample_predictions = predictor.predict(X_test[:5])\n        \n        logger.info(\"✅ ML pipeline completed successfully!\")\n        logger.info(f\"📊 Final metrics: {metrics.get_summary()}\")\n        \n    except Exception as e:\n        logger.error(f\"❌ Error in ML pipeline: {str(e)}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()",
        "predict.py": "#!/usr/bin/env python3\n\"\"\"\nPrediction script for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\nScript for making predictions with trained models.\n\"\"\"\n\nimport argparse\nimport logging\nimport sys\nimport json\nimport pandas as pd\nfrom pathlib import Path\n\nsys.path.append(str(Path(__file__).parent / \"src\"))\n\nfrom src.config import Config\nfrom src.models.predictor import Predictor\nfrom src.data.data_loader import DataLoader\nfrom src.utils.logger import setup_logging\n\ndef parse_args():\n    \"\"\"Parse command line arguments\"\"\"\n    parser = argparse.ArgumentParser(description=\"Make predictions with {{ project_name }} model\")\n    \n    parser.add_argument(\n        \"--model\", \n        type=str, \n        required=True,\n        help=\"Path to trained model\"\n    )\n    parser.add_argument(\n        \"--data\", \n        type=str, \n        required=True,\n        help=\"Path to input data for prediction\"\n    )\n    parser.add_argument(\n        \"--output\", \n        type=str, \n        default=\"predictions.json\",\n        help=\"Output file for predictions\"\n    )\n    parser.add_argument(\n        \"--batch-size\", \n        type=int, \n        default=32,\n        help=\"Batch size for prediction\"\n    )\n    parser.add_argument(\n        \"--confidence\", \n        action=\"store_true\",\n        help=\"Include confidence scores\"\n    )\n    parser.add_argument(\n        \"--explain\", \n        action=\"store_true\",\n        help=\"Include model explanations (if supported)\"\n    )\n    parser.add_argument(\n        \"--format\", \n        choices=[\"json\", \"csv\", \"txt\"],\n        default=\"json\",\n        help=\"Output format\"\n    )\n    \n    return parser.parse_args()\n\ndef main():\n    \"\"\"Main prediction function\"\"\"\n    args = parse_args()\n    \n    # Setup logging\n    setup_logging()\n    logger = logging.getLogger(__name__)\n    \n    try:\n        logger.info(\"🔮 Starting prediction pipeline for {{ project_name }}\")\n        logger.info(f\"📋 Arguments: {args}\")\n        \n        # Load predictor\n        logger.info(f\"📥 Loading model from: {args.model}\")\n        predictor = Predictor(args.model)\n        \n        # Load data\n        logger.info(f\"📊 Loading data from: {args.data}\")\n        data_loader = DataLoader()\n        data = data_loader.load_prediction_data(args.data)\n        \n        logger.info(f\"📈 Data shape: {data.shape}\")\n        \n        # Make predictions\n        logger.info(\"🚀 Making predictions...\")\n        predictions = predictor.predict(\n            data,\n            batch_size=args.batch_size,\n            include_confidence=args.confidence,\n            explain=args.explain\n        )\n        \n        # Prepare output\n        output_data = {\n            \"model_path\": args.model,\n            \"data_path\": args.data,\n            \"num_predictions\": len(predictions),\n            \"predictions\": predictions.tolist() if hasattr(predictions, 'tolist') else predictions\n        }\n        \n        if args.confidence:\n            output_data[\"confidence_scores\"] = predictor.get_confidence_scores()\n        \n        if args.explain:\n            output_data[\"explanations\"] = predictor.get_explanations()\n        \n        # Save predictions\n        output_path = Path(args.output)\n        logger.info(f\"💾 Saving predictions to: {output_path}\")\n        \n        if args.format == \"json\":\n            with open(output_path, 'w') as f:\n                json.dump(output_data, f, indent=2)\n        elif args.format == \"csv\":\n            df = pd.DataFrame({\"predictions\": predictions})\n            if args.confidence:\n                df[\"confidence\"] = predictor.get_confidence_scores()\n            df.to_csv(output_path, index=False)\n        elif args.format == \"txt\":\n            with open(output_path, 'w') as f:\n                for i, pred in enumerate(predictions):\n                    f.write(f\"Sample {i+1}: {pred}\\\\n\")\n        \n        logger.info(\"✅ Prediction completed successfully!\")\n        logger.info(f\"📊 Generated {len(predictions)} predictions\")\n        logger.info(f\"💾 Results saved to: {output_path}\")\n        \n    except Exception as e:\n        logger.error(f\"❌ Prediction failed: {str(e)}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()",
        "requirements.txt": "# {{ project_name }} - ML Dependencies\n# Generated by {{ generator }} at {{ timestamp }}\n\n# Core ML libraries\nnumpy>=1.24.0\npandas>=2.0.0\nscikit-learn>=1.3.0\nscipy>=1.10.0\n\n# Deep Learning (choose based on your needs)\ntensorflow>=2.13.0\n# torch>=2.0.0\n# torchvision>=0.15.0\n\n# Data visualization\nmatplotlib>=3.7.0\nseaborn>=0.12.0\nplotly>=5.15.0\n\n# Jupyter and notebooks\njupyter>=1.0.0\njupyterlab>=4.0.0\nipykernel>=6.25.0\n\n# Model tracking and experiment management\nmlflow>=2.5.0\nwandb>=0.15.0\n\n# Data processing\nxgboost>=1.7.0\nlightgbm>=4.0.0\ncatboost>=1.2.0\n\n# Feature engineering\nfeature-engine>=1.6.0\ncategory-encoders>=2.6.0\n\n# Model explainability\nshap>=0.42.0\nlime>=0.2.0\neli5>=0.13.0\n\n# Hyperparameter optimization\noptuna>=3.3.0\nhyperopt>=0.2.7\n\n# Data validation\ngreat-expectations>=0.17.0\npydantic>=2.0.0\n\n# Utilities\ntqdm>=4.65.0\npython-dotenv>=1.0.0\nclick>=8.1.0\npyyaml>=6.0.0\njoblib>=1.3.0\n\n# Testing\npytest>=7.4.0\npytest-cov>=4.1.0\n\n# Code quality\nblack>=23.7.0\nflake8>=6.0.0\nisort>=5.12.0\n\n# Development\npre-commit>=3.3.0\njupyter-contrib-nbextensions>=0.7.0",
        "template.yaml": "name: \"python-ml\"\nversion: \"1.0.0\" \ndescription: \"قالب شامل لمشاريع تعلم الآلة والذكاء الاصطناعي\"\nlanguage: \"python\"\nframework: \"ml\"\n\nstructure:\n  directories:\n    - \"src\"\n    - \"src/models\"\n    - \"src/data\"\n    - \"src/features\"\n    - \"src/preprocessing\" \n    - \"src/training\"\n    - \"src/evaluation\"\n    - \"src/utils\"\n    - \"src/visualization\"\n    - \"notebooks\"\n    - \"data\"\n    - \"data/raw\"\n    - \"data/processed\"\n    - \"data/external\"\n    - \"models\"\n    - \"models/trained\"\n    - \"models/checkpoints\"\n    - \"reports\"\n    - \"reports/figures\"\n    - \"configs\"\n    - \"tests\"\n    - \"scripts\"\n    - \"docs\"\n\n  files:\n    - path: \"main.py\"\n      template: \"python/ml/main.py\"\n      type: \"template\"\n    \n    - path: \"train.py\"\n      template: \"python/ml/train.py\"\n      type: \"template\"\n    \n    - path: \"predict.py\"\n      template: \"python/ml/predict.py\"\n      type: \"template\"\n    \n    - path: \"requirements.txt\"\n      template: \"python/ml/requirements.txt\"\n      type: \"template\"\n    \n    - path: \"config.yaml\"\n      template: \"python/ml/config.yaml\"\n      type: \"template\"\n    \n    - path: \"README.md\"\n      template: \"python/ml/README.md\"\n      type: \"template\"\n    \n    - path: \".gitignore\"\n      template: \"python/common/gitignore\"\n      type: \"template\"\n    \n    - path: \"src/__init__.py\"\n      content: \"# {{ project_name }} ML Package\\n__version__ = '1.0.0'\\n\"\n      type: \"content\"\n\nassets: []\n\npost_tasks:\n  - type: \"gitinit\"\n  - type: \"create_venv\"\n\ncomponents:\n  model:\n    template: \"python/ml/components/model.py\"\n    path: \"src/models/{{component_name|lower}}_model.py\"\n  \n  dataset:\n    template: \"python/ml/components/dataset.py\"\n    path: \"src/data/{{component_name|lower}}_dataset.py\"\n  \n  pipeline:\n    template: \"python/ml/components/pipeline.py\"\n    path: \"src/preprocessing/{{component_name|lower}}_pipeline.py\"",
        "train.py": "#!/usr/bin/env python3\n\"\"\"\nTraining script for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\nDedicated training script for model training and validation.\n\"\"\"\n\nimport argparse\nimport logging\nimport sys\nfrom pathlib import Path\n\nsys.path.append(str(Path(__file__).parent / \"src\"))\n\nfrom src.config import Config\nfrom src.data.data_loader import DataLoader\nfrom src.models.trainer import Trainer\nfrom src.utils.logger import setup_logging\nfrom src.utils.metrics import MetricsTracker\n\ndef parse_args():\n    \"\"\"Parse command line arguments\"\"\"\n    parser = argparse.ArgumentParser(description=\"Train ML model for {{ project_name }}\")\n    \n    parser.add_argument(\n        \"--config\", \n        type=str, \n        default=\"config/config.yaml\",\n        help=\"Path to configuration file\"\n    )\n    parser.add_argument(\n        \"--data\", \n        type=str, \n        help=\"Path to training data\"\n    )\n    parser.add_argument(\n        \"--epochs\", \n        type=int, \n        default=100,\n        help=\"Number of training epochs\"\n    )\n    parser.add_argument(\n        \"--batch-size\", \n        type=int, \n        default=32,\n        help=\"Training batch size\"\n    )\n    parser.add_argument(\n        \"--learning-rate\", \n        type=float, \n        default=0.001,\n        help=\"Learning rate\"\n    )\n    parser.add_argument(\n        \"--validation-split\", \n        type=float, \n        default=0.2,\n        help=\"Validation split ratio\"\n    )\n    parser.add_argument(\n        \"--save-best\", \n        action=\"store_true\",\n        help=\"Save best model during training\"\n    )\n    parser.add_argument(\n        \"--early-stopping\", \n        action=\"store_true\",\n        help=\"Enable early stopping\"\n    )\n    parser.add_argument(\n        \"--verbose\", \n        action=\"store_true\",\n        help=\"Verbose training output\"\n    )\n    \n    return parser.parse_args()\n\ndef main():\n    \"\"\"Main training function\"\"\"\n    args = parse_args()\n    \n    # Setup logging\n    setup_logging()\n    logger = logging.getLogger(__name__)\n    \n    try:\n        logger.info(\"🔥 Starting training for {{ project_name }}\")\n        logger.info(f\"📋 Configuration: {args}\")\n        \n        # Load configuration\n        config = Config(args.config)\n        \n        # Override config with command line arguments\n        if args.data:\n            config.data_path = args.data\n        config.epochs = args.epochs\n        config.batch_size = args.batch_size\n        config.learning_rate = args.learning_rate\n        config.validation_split = args.validation_split\n        \n        # Initialize components\n        data_loader = DataLoader(config)\n        trainer = Trainer(config)\n        metrics = MetricsTracker()\n        \n        # Load and prepare data\n        logger.info(\"📊 Loading and preparing data...\")\n        X_train, X_val, y_train, y_val = data_loader.load_and_split(\n            validation_split=config.validation_split\n        )\n        \n        logger.info(f\"📈 Training samples: {len(X_train)}\")\n        logger.info(f\"📉 Validation samples: {len(X_val)}\")\n        \n        # Train model\n        logger.info(\"🚀 Starting model training...\")\n        model = trainer.train(\n            X_train, y_train,\n            X_val, y_val,\n            epochs=config.epochs,\n            batch_size=config.batch_size,\n            save_best=args.save_best,\n            early_stopping=args.early_stopping,\n            verbose=args.verbose,\n            metrics_tracker=metrics\n        )\n        \n        # Final evaluation\n        logger.info(\"📊 Final model evaluation...\")\n        final_metrics = trainer.evaluate(model, X_val, y_val, metrics)\n        \n        # Save model\n        logger.info(\"💾 Saving trained model...\")\n        model_path = trainer.save_model(model, config.model_path)\n        \n        # Save training history\n        metrics.save_history(config.output_path / \"training_history.json\")\n        \n        logger.info(\"✅ Training completed successfully!\")\n        logger.info(f\"📊 Final metrics: {final_metrics}\")\n        logger.info(f\"💾 Model saved to: {model_path}\")\n        \n    except Exception as e:\n        logger.error(f\"❌ Training failed: {str(e)}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()",
        "components/dataset.py": "#!/usr/bin/env python3\n\"\"\"\n{{ component_name }} dataset for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\"\"\"\n\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nfrom typing import Tuple, Optional, Union, Dict, Any, List\nfrom torch.utils.data import Dataset\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass {{ component_name|title }}Dataset(Dataset):\n    \"\"\"\n    Custom {{ component_name }} dataset for {{ project_name }}\n    \n    This dataset class handles loading, preprocessing, and serving\n    data for machine learning models.\n    \"\"\"\n    \n    def __init__(self, data_path: Union[str, Path] = None, \n                 features: List[str] = None, target: str = None,\n                 transform=None, target_transform=None, **kwargs):\n        \"\"\"\n        Initialize the {{ component_name }} dataset\n        \n        Args:\n            data_path: Path to the data file\n            features: List of feature column names\n            target: Target column name\n            transform: Optional transform to be applied to features\n            target_transform: Optional transform to be applied to target\n            **kwargs: Additional parameters\n        \"\"\"\n        self.data_path = Path(data_path) if data_path else None\n        self.features = features\n        self.target = target\n        self.transform = transform\n        self.target_transform = target_transform\n        self.kwargs = kwargs\n        \n        # Data storage\n        self.data = None\n        self.X = None\n        self.y = None\n        self.feature_names = None\n        self.target_name = None\n        \n        # Dataset info\n        self.is_loaded = False\n        self.dataset_info = {}\n        \n        logger.info(f\"Initialized {{ component_name }}Dataset\")\n        \n        # Load data if path provided\n        if self.data_path:\n            self.load_data()\n    \n    def load_data(self):\n        \"\"\"Load data from file\"\"\"\n        if not self.data_path or not self.data_path.exists():\n            raise FileNotFoundError(f\"Data file not found: {self.data_path}\")\n        \n        logger.info(f\"Loading data from: {self.data_path}\")\n        \n        # Load based on file extension\n        if self.data_path.suffix.lower() == '.csv':\n            self.data = pd.read_csv(self.data_path)\n        elif self.data_path.suffix.lower() in ['.xlsx', '.xls']:\n            self.data = pd.read_excel(self.data_path)\n        elif self.data_path.suffix.lower() == '.parquet':\n            self.data = pd.read_parquet(self.data_path)\n        elif self.data_path.suffix.lower() == '.json':\n            self.data = pd.read_json(self.data_path)\n        else:\n            raise ValueError(f\"Unsupported file format: {self.data_path.suffix}\")\n        \n        logger.info(f\"Loaded data shape: {self.data.shape}\")\n        \n        # Process features and target\n        self._process_features_and_target()\n        \n        # Store dataset info\n        self._store_dataset_info()\n        \n        self.is_loaded = True\n    \n    def _process_features_and_target(self):\n        \"\"\"Process features and target columns\"\"\"\n        if self.data is None:\n            raise ValueError(\"Data not loaded\")\n        \n        # Determine features\n        if self.features:\n            # Use specified features\n            missing_features = [f for f in self.features if f not in self.data.columns]\n            if missing_features:\n                raise ValueError(f\"Features not found in data: {missing_features}\")\n            self.feature_names = self.features\n        else:\n            # Use all columns except target as features\n            if self.target and self.target in self.data.columns:\n                self.feature_names = [col for col in self.data.columns if col != self.target]\n            else:\n                # Use all columns except last as features\n                self.feature_names = list(self.data.columns[:-1])\n        \n        # Determine target\n        if self.target:\n            if self.target not in self.data.columns:\n                raise ValueError(f\"Target column not found: {self.target}\")\n            self.target_name = self.target\n        else:\n            # Use last column as target\n            self.target_name = self.data.columns[-1]\n        \n        # Extract features and target\n        self.X = self.data[self.feature_names].values\n        self.y = self.data[self.target_name].values\n        \n        logger.info(f\"Features: {self.feature_names}\")\n        logger.info(f\"Target: {self.target_name}\")\n        logger.info(f\"Feature matrix shape: {self.X.shape}\")\n        logger.info(f\"Target vector shape: {self.y.shape}\")\n    \n    def _store_dataset_info(self):\n        \"\"\"Store dataset information\"\"\"\n        self.dataset_info = {\n            'name': '{{ component_name|title }}Dataset',\n            'data_path': str(self.data_path),\n            'n_samples': len(self.data),\n            'n_features': len(self.feature_names),\n            'feature_names': self.feature_names,\n            'target_name': self.target_name,\n            'data_types': self.data[self.feature_names].dtypes.to_dict(),\n            'missing_values': self.data[self.feature_names].isnull().sum().to_dict(),\n            'target_type': str(self.data[self.target_name].dtype),\n            'target_unique_values': len(self.data[self.target_name].unique()),\n        }\n        \n        # Add statistics\n        numeric_features = self.data[self.feature_names].select_dtypes(include=[np.number]).columns\n        if len(numeric_features) > 0:\n            self.dataset_info['feature_statistics'] = self.data[numeric_features].describe().to_dict()\n    \n    def __len__(self) -> int:\n        \"\"\"Return the size of the dataset\"\"\"\n        if not self.is_loaded:\n            return 0\n        return len(self.X)\n    \n    def __getitem__(self, idx: int) -> Tuple[np.ndarray, Any]:\n        \"\"\"Get a single sample from the dataset\"\"\"\n        if not self.is_loaded:\n            raise ValueError(\"Dataset not loaded\")\n        \n        # Get features and target\n        features = self.X[idx]\n        target = self.y[idx]\n        \n        # Apply transforms if specified\n        if self.transform:\n            features = self.transform(features)\n        \n        if self.target_transform:\n            target = self.target_transform(target)\n        \n        return features, target\n    \n    def get_batch(self, indices: List[int]) -> Tuple[np.ndarray, np.ndarray]:\n        \"\"\"Get a batch of samples\"\"\"\n        if not self.is_loaded:\n            raise ValueError(\"Dataset not loaded\")\n        \n        features = self.X[indices]\n        targets = self.y[indices]\n        \n        if self.transform:\n            features = np.array([self.transform(f) for f in features])\n        \n        if self.target_transform:\n            targets = np.array([self.target_transform(t) for t in targets])\n        \n        return features, targets\n    \n    def split(self, train_ratio: float = 0.8, random_state: int = 42) -> Tuple['{{ component_name|title }}Dataset', '{{ component_name|title }}Dataset']:\n        \"\"\"Split dataset into train and test sets\"\"\"\n        if not self.is_loaded:\n            raise ValueError(\"Dataset not loaded\")\n        \n        from sklearn.model_selection import train_test_split\n        \n        # Split indices\n        indices = np.arange(len(self))\n        train_indices, test_indices = train_test_split(\n            indices, train_size=train_ratio, random_state=random_state\n        )\n        \n        # Create new dataset instances\n        train_dataset = self._create_subset(train_indices, 'train')\n        test_dataset = self._create_subset(test_indices, 'test')\n        \n        logger.info(f\"Split dataset - Train: {len(train_dataset)}, Test: {len(test_dataset)}\")\n        \n        return train_dataset, test_dataset\n    \n    def _create_subset(self, indices: np.ndarray, subset_name: str) -> '{{ component_name|title }}Dataset':\n        \"\"\"Create a subset dataset\"\"\"\n        subset = {{ component_name|title }}Dataset(\n            features=self.feature_names,\n            target=self.target_name,\n            transform=self.transform,\n            target_transform=self.target_transform,\n            **self.kwargs\n        )\n        \n        # Set subset data\n        subset.X = self.X[indices]\n        subset.y = self.y[indices]\n        subset.feature_names = self.feature_names\n        subset.target_name = self.target_name\n        subset.is_loaded = True\n        \n        # Update dataset info\n        subset.dataset_info = self.dataset_info.copy()\n        subset.dataset_info['name'] = f\"{{ component_name|title }}Dataset_{subset_name}\"\n        subset.dataset_info['n_samples'] = len(indices)\n        \n        return subset\n    \n    def get_feature_names(self) -> List[str]:\n        \"\"\"Get feature names\"\"\"\n        return self.feature_names or []\n    \n    def get_target_name(self) -> str:\n        \"\"\"Get target name\"\"\"\n        return self.target_name or \"\"\n    \n    def get_data_info(self) -> Dict[str, Any]:\n        \"\"\"Get dataset information\"\"\"\n        return self.dataset_info\n    \n    def describe(self) -> Dict[str, Any]:\n        \"\"\"Get dataset description\"\"\"\n        if not self.is_loaded:\n            return {\"error\": \"Dataset not loaded\"}\n        \n        description = {\n            \"basic_info\": self.dataset_info,\n            \"feature_info\": {},\n            \"target_info\": {}\n        }\n        \n        # Feature information\n        if self.feature_names:\n            description[\"feature_info\"] = {\n                \"names\": self.feature_names,\n                \"count\": len(self.feature_names),\n                \"types\": [str(self.data[col].dtype) for col in self.feature_names],\n                \"missing_counts\": [self.data[col].isnull().sum() for col in self.feature_names]\n            }\n        \n        # Target information\n        if self.target_name:\n            target_data = self.data[self.target_name]\n            description[\"target_info\"] = {\n                \"name\": self.target_name,\n                \"type\": str(target_data.dtype),\n                \"unique_values\": target_data.nunique(),\n                \"missing_count\": target_data.isnull().sum()\n            }\n            \n            if target_data.dtype in ['object', 'category']:\n                description[\"target_info\"][\"value_counts\"] = target_data.value_counts().to_dict()\n            else:\n                description[\"target_info\"][\"statistics\"] = target_data.describe().to_dict()\n        \n        return description\n    \n    def save_processed_data(self, output_path: Union[str, Path]):\n        \"\"\"Save processed dataset to file\"\"\"\n        if not self.is_loaded:\n            raise ValueError(\"Dataset not loaded\")\n        \n        output_path = Path(output_path)\n        output_path.parent.mkdir(parents=True, exist_ok=True)\n        \n        # Create DataFrame with processed data\n        processed_data = pd.DataFrame(self.X, columns=self.feature_names)\n        processed_data[self.target_name] = self.y\n        \n        # Save based on file extension\n        if output_path.suffix.lower() == '.csv':\n            processed_data.to_csv(output_path, index=False)\n        elif output_path.suffix.lower() == '.parquet':\n            processed_data.to_parquet(output_path, index=False)\n        else:\n            # Default to CSV\n            output_path = output_path.with_suffix('.csv')\n            processed_data.to_csv(output_path, index=False)\n        \n        logger.info(f\"Processed dataset saved to: {output_path}\")\n    \n    def validate(self) -> Dict[str, Any]:\n        \"\"\"Validate dataset integrity\"\"\"\n        if not self.is_loaded:\n            return {\"valid\": False, \"error\": \"Dataset not loaded\"}\n        \n        validation_results = {\n            \"valid\": True,\n            \"checks\": {},\n            \"warnings\": [],\n            \"errors\": []\n        }\n        \n        # Check for missing values\n        missing_features = [col for col in self.feature_names if self.data[col].isnull().any()]\n        if missing_features:\n            validation_results[\"warnings\"].append(f\"Missing values in features: {missing_features}\")\n        \n        # Check for infinite values\n        numeric_features = self.data[self.feature_names].select_dtypes(include=[np.number]).columns\n        infinite_features = [col for col in numeric_features if np.isinf(self.data[col]).any()]\n        if infinite_features:\n            validation_results[\"errors\"].append(f\"Infinite values in features: {infinite_features}\")\n            validation_results[\"valid\"] = False\n        \n        # Check data consistency\n        if len(self.X) != len(self.y):\n            validation_results[\"errors\"].append(\"Feature and target lengths don't match\")\n            validation_results[\"valid\"] = False\n        \n        # Check for empty dataset\n        if len(self.X) == 0:\n            validation_results[\"errors\"].append(\"Dataset is empty\")\n            validation_results[\"valid\"] = False\n        \n        validation_results[\"checks\"][\"n_samples\"] = len(self.X)\n        validation_results[\"checks\"][\"n_features\"] = len(self.feature_names)\n        validation_results[\"checks\"][\"has_missing_values\"] = len(missing_features) > 0\n        validation_results[\"checks\"][\"has_infinite_values\"] = len(infinite_features) > 0\n        \n        return validation_results",
        "components/model.py": "#!/usr/bin/env python3\n\"\"\"\n{{ component_name }} model for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\"\"\"\n\nimport numpy as np\nfrom typing import Any, Dict, Optional, Tuple\nfrom sklearn.base import BaseEstimator, ClassifierMixin, RegressorMixin\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass {{ component_name|title }}Model(BaseEstimator{% if model_type == \"classification\" %}, ClassifierMixin{% elif model_type == \"regression\" %}, RegressorMixin{% endif %}):\n    \"\"\"\n    Custom {{ component_name }} model for {{ project_name }}\n    \n    This is a template for creating custom ML models.\n    Modify this class to implement your specific model logic.\n    \"\"\"\n    \n    def __init__(self, **kwargs):\n        \"\"\"\n        Initialize the {{ component_name }} model\n        \n        Args:\n            **kwargs: Model parameters\n        \"\"\"\n        self.params = kwargs\n        self.is_fitted = False\n        self.classes_ = None\n        self.n_features_in_ = None\n        \n        # Model-specific attributes\n        self.model_weights = None\n        self.model_bias = None\n        \n        logger.info(f\"Initialized {{ component_name }}Model with params: {self.params}\")\n    \n    def fit(self, X: np.ndarray, y: np.ndarray) -> 'self':\n        \"\"\"\n        Fit the {{ component_name }} model to training data\n        \n        Args:\n            X: Training features of shape (n_samples, n_features)\n            y: Training targets of shape (n_samples,)\n            \n        Returns:\n            self: Fitted model instance\n        \"\"\"\n        logger.info(f\"Training {{ component_name }}Model on data shape: {X.shape}\")\n        \n        # Store input validation info\n        self.n_features_in_ = X.shape[1]\n        \n        {% if model_type == \"classification\" %}\n        # Store unique classes for classification\n        self.classes_ = np.unique(y)\n        logger.info(f\"Found {len(self.classes_)} classes: {self.classes_}\")\n        {% endif %}\n        \n        # TODO: Implement your model training logic here\n        # This is a placeholder implementation\n        \n        # Example: Simple linear model\n        if self.model_weights is None:\n            # Initialize weights\n            self.model_weights = np.random.randn(self.n_features_in_)\n            self.model_bias = 0.0\n        \n        # Simple gradient descent (placeholder)\n        learning_rate = self.params.get('learning_rate', 0.01)\n        epochs = self.params.get('epochs', 100)\n        \n        for epoch in range(epochs):\n            # Forward pass\n            predictions = self._forward(X)\n            \n            # Compute loss and gradients (simplified)\n            loss = self._compute_loss(y, predictions)\n            \n            # Update weights (simplified)\n            self._update_weights(X, y, predictions, learning_rate)\n            \n            if epoch % 20 == 0:\n                logger.debug(f\"Epoch {epoch}, Loss: {loss:.4f}\")\n        \n        self.is_fitted = True\n        logger.info(\"{{ component_name }}Model training completed\")\n        \n        return self\n    \n    def predict(self, X: np.ndarray) -> np.ndarray:\n        \"\"\"\n        Make predictions using the fitted model\n        \n        Args:\n            X: Input features of shape (n_samples, n_features)\n            \n        Returns:\n            predictions: Predicted values of shape (n_samples,)\n        \"\"\"\n        # Check if model is fitted\n        if not self.is_fitted:\n            raise ValueError(\"Model must be fitted before making predictions\")\n        \n        # Validate input\n        if X.shape[1] != self.n_features_in_:\n            raise ValueError(f\"Expected {self.n_features_in_} features, got {X.shape[1]}\")\n        \n        logger.info(f\"Making predictions for {X.shape[0]} samples\")\n        \n        # TODO: Implement your prediction logic here\n        predictions = self._forward(X)\n        \n        {% if model_type == \"classification\" %}\n        # Convert to class predictions\n        predictions = self._convert_to_classes(predictions)\n        {% endif %}\n        \n        return predictions\n    \n    {% if model_type == \"classification\" %}\n    def predict_proba(self, X: np.ndarray) -> np.ndarray:\n        \"\"\"\n        Predict class probabilities\n        \n        Args:\n            X: Input features of shape (n_samples, n_features)\n            \n        Returns:\n            probabilities: Class probabilities of shape (n_samples, n_classes)\n        \"\"\"\n        if not self.is_fitted:\n            raise ValueError(\"Model must be fitted before making predictions\")\n        \n        # Get raw predictions\n        raw_predictions = self._forward(X)\n        \n        # Convert to probabilities (example with softmax)\n        probabilities = self._softmax(raw_predictions)\n        \n        return probabilities\n    {% endif %}\n    \n    def score(self, X: np.ndarray, y: np.ndarray) -> float:\n        \"\"\"\n        Compute model score on given data\n        \n        Args:\n            X: Input features\n            y: True targets\n            \n        Returns:\n            score: Model performance score\n        \"\"\"\n        predictions = self.predict(X)\n        \n        {% if model_type == \"classification\" %}\n        # Accuracy for classification\n        return np.mean(predictions == y)\n        {% else %}\n        # R² score for regression\n        ss_res = np.sum((y - predictions) ** 2)\n        ss_tot = np.sum((y - np.mean(y)) ** 2)\n        return 1 - (ss_res / ss_tot)\n        {% endif %}\n    \n    def _forward(self, X: np.ndarray) -> np.ndarray:\n        \"\"\"\n        Forward pass through the model\n        \n        Args:\n            X: Input features\n            \n        Returns:\n            output: Model output\n        \"\"\"\n        # Simple linear transformation (placeholder)\n        output = np.dot(X, self.model_weights) + self.model_bias\n        return output\n    \n    def _compute_loss(self, y_true: np.ndarray, y_pred: np.ndarray) -> float:\n        \"\"\"\n        Compute loss between true and predicted values\n        \n        Args:\n            y_true: True targets\n            y_pred: Predicted values\n            \n        Returns:\n            loss: Computed loss value\n        \"\"\"\n        {% if model_type == \"classification\" %}\n        # Cross-entropy loss (simplified)\n        # Convert to probabilities first\n        probabilities = self._softmax(y_pred)\n        loss = -np.mean(np.log(probabilities[range(len(y_true)), y_true.astype(int)]))\n        {% else %}\n        # Mean squared error for regression\n        loss = np.mean((y_true - y_pred) ** 2)\n        {% endif %}\n        \n        return loss\n    \n    def _update_weights(self, X: np.ndarray, y_true: np.ndarray, \n                       y_pred: np.ndarray, learning_rate: float):\n        \"\"\"\n        Update model weights based on gradients\n        \n        Args:\n            X: Input features\n            y_true: True targets\n            y_pred: Predicted values\n            learning_rate: Learning rate for updates\n        \"\"\"\n        # Simplified gradient computation\n        m = X.shape[0]\n        \n        {% if model_type == \"classification\" %}\n        # For classification (simplified)\n        error = y_pred - y_true\n        {% else %}\n        # For regression\n        error = y_pred - y_true\n        {% endif %}\n        \n        # Update weights\n        dw = (1/m) * np.dot(X.T, error)\n        db = (1/m) * np.sum(error)\n        \n        self.model_weights -= learning_rate * dw\n        self.model_bias -= learning_rate * db\n    \n    {% if model_type == \"classification\" %}\n    def _convert_to_classes(self, predictions: np.ndarray) -> np.ndarray:\n        \"\"\"Convert raw predictions to class labels\"\"\"\n        # For binary classification\n        if len(self.classes_) == 2:\n            return (predictions > 0).astype(int)\n        else:\n            # For multiclass, use argmax\n            return np.argmax(predictions, axis=1)\n    \n    def _softmax(self, x: np.ndarray) -> np.ndarray:\n        \"\"\"Apply softmax activation\"\"\"\n        exp_x = np.exp(x - np.max(x, axis=-1, keepdims=True))\n        return exp_x / np.sum(exp_x, axis=-1, keepdims=True)\n    {% endif %}\n    \n    def get_params(self, deep: bool = True) -> Dict[str, Any]:\n        \"\"\"\n        Get model parameters\n        \n        Args:\n            deep: Whether to return deep copy of parameters\n            \n        Returns:\n            params: Model parameters dictionary\n        \"\"\"\n        return self.params.copy() if deep else self.params\n    \n    def set_params(self, **params) -> 'self':\n        \"\"\"\n        Set model parameters\n        \n        Args:\n            **params: Parameters to set\n            \n        Returns:\n            self: Model instance\n        \"\"\"\n        for key, value in params.items():\n            self.params[key] = value\n        \n        return self\n    \n    def get_model_info(self) -> Dict[str, Any]:\n        \"\"\"Get information about the model\"\"\"\n        return {\n            'model_name': '{{ component_name|title }}Model',\n            'is_fitted': self.is_fitted,\n            'n_features': self.n_features_in_,\n            {% if model_type == \"classification\" %}\n            'n_classes': len(self.classes_) if self.classes_ is not None else None,\n            'classes': self.classes_.tolist() if self.classes_ is not None else None,\n            {% endif %}\n            'parameters': self.params\n        }",
        "components/pipeline.py": "#!/usr/bin/env python3\n\"\"\"\n{{ component_name }} preprocessing pipeline for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\"\"\"\n\nimport numpy as np\nimport pandas as pd\nfrom typing import Dict, List, Optional, Any, Tuple, Union\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, LabelEncoder, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass {{ component_name|title }}Pipeline(BaseEstimator, TransformerMixin):\n    \"\"\"\n    Custom {{ component_name }} preprocessing pipeline for {{ project_name }}\n    \n    This pipeline handles all data preprocessing steps including:\n    - Missing value imputation\n    - Feature scaling/normalization\n    - Categorical encoding\n    - Feature engineering\n    - Data validation\n    \"\"\"\n    \n    def __init__(self, config: Dict[str, Any] = None):\n        \"\"\"\n        Initialize the {{ component_name }} pipeline\n        \n        Args:\n            config: Configuration dictionary with preprocessing parameters\n        \"\"\"\n        self.config = config or {}\n        \n        # Pipeline components\n        self.preprocessor = None\n        self.feature_names_in_ = None\n        self.feature_names_out_ = None\n        self.is_fitted = False\n        \n        # Preprocessing steps configuration\n        self.imputation_strategy = self.config.get('imputation_strategy', 'mean')\n        self.scaling_method = self.config.get('scaling_method', 'standard')\n        self.categorical_encoding = self.config.get('categorical_encoding', 'onehot')\n        self.handle_outliers = self.config.get('handle_outliers', False)\n        self.feature_selection = self.config.get('feature_selection', False)\n        \n        # Store column information\n        self.numeric_features = []\n        self.categorical_features = []\n        self.feature_types = {}\n        \n        logger.info(f\"Initialized {{ component_name }}Pipeline with config: {self.config}\")\n    \n    def fit(self, X: Union[pd.DataFrame, np.ndarray], y: Optional[np.ndarray] = None) -> 'self':\n        \"\"\"\n        Fit the preprocessing pipeline\n        \n        Args:\n            X: Input features\n            y: Target values (optional, used for supervised feature selection)\n            \n        Returns:\n            self: Fitted pipeline instance\n        \"\"\"\n        logger.info(f\"Fitting {{ component_name }}Pipeline on data shape: {X.shape}\")\n        \n        # Convert to DataFrame if needed\n        if isinstance(X, np.ndarray):\n            X = pd.DataFrame(X, columns=[f'feature_{i}' for i in range(X.shape[1])])\n        \n        # Store feature names\n        self.feature_names_in_ = list(X.columns)\n        \n        # Identify feature types\n        self._identify_feature_types(X)\n        \n        # Build preprocessing pipeline\n        self._build_preprocessor()\n        \n        # Fit the preprocessor\n        self.preprocessor.fit(X, y)\n        \n        # Get output feature names\n        self._set_output_feature_names()\n        \n        self.is_fitted = True\n        logger.info(\"{{ component_name }}Pipeline fitted successfully\")\n        \n        return self\n    \n    def transform(self, X: Union[pd.DataFrame, np.ndarray]) -> np.ndarray:\n        \"\"\"\n        Transform the input data using fitted pipeline\n        \n        Args:\n            X: Input features to transform\n            \n        Returns:\n            X_transformed: Transformed features\n        \"\"\"\n        if not self.is_fitted:\n            raise ValueError(\"Pipeline must be fitted before transformation\")\n        \n        # Convert to DataFrame if needed\n        if isinstance(X, np.ndarray):\n            X = pd.DataFrame(X, columns=self.feature_names_in_)\n        \n        logger.info(f\"Transforming data with shape: {X.shape}\")\n        \n        # Apply preprocessing\n        X_transformed = self.preprocessor.transform(X)\n        \n        logger.info(f\"Transformed data shape: {X_transformed.shape}\")\n        \n        return X_transformed\n    \n    def fit_transform(self, X: Union[pd.DataFrame, np.ndarray], y: Optional[np.ndarray] = None) -> np.ndarray:\n        \"\"\"\n        Fit the pipeline and transform the data\n        \n        Args:\n            X: Input features\n            y: Target values (optional)\n            \n        Returns:\n            X_transformed: Transformed features\n        \"\"\"\n        return self.fit(X, y).transform(X)\n    \n    def _identify_feature_types(self, X: pd.DataFrame):\n        \"\"\"Identify numeric and categorical features\"\"\"\n        self.numeric_features = []\n        self.categorical_features = []\n        self.feature_types = {}\n        \n        for column in X.columns:\n            if X[column].dtype in ['int64', 'float64', 'int32', 'float32']:\n                self.numeric_features.append(column)\n                self.feature_types[column] = 'numeric'\n            else:\n                self.categorical_features.append(column)\n                self.feature_types[column] = 'categorical'\n        \n        logger.info(f\"Identified {len(self.numeric_features)} numeric and {len(self.categorical_features)} categorical features\")\n    \n    def _build_preprocessor(self):\n        \"\"\"Build the preprocessing pipeline\"\"\"\n        transformers = []\n        \n        # Numeric features preprocessing\n        if self.numeric_features:\n            numeric_steps = []\n            \n            # Imputation\n            if self.imputation_strategy:\n                imputer = SimpleImputer(strategy=self.imputation_strategy)\n                numeric_steps.append(('imputer', imputer))\n            \n            # Scaling\n            if self.scaling_method == 'standard':\n                scaler = StandardScaler()\n            elif self.scaling_method == 'minmax':\n                scaler = MinMaxScaler()\n            else:\n                scaler = StandardScaler()  # Default\n            \n            numeric_steps.append(('scaler', scaler))\n            \n            # Outlier handling (if enabled)\n            if self.handle_outliers:\n                outlier_handler = OutlierHandler()\n                numeric_steps.append(('outlier_handler', outlier_handler))\n            \n            numeric_pipeline = Pipeline(numeric_steps)\n            transformers.append(('numeric', numeric_pipeline, self.numeric_features))\n        \n        # Categorical features preprocessing\n        if self.categorical_features:\n            categorical_steps = []\n            \n            # Imputation for categorical features\n            categorical_imputer = SimpleImputer(strategy='constant', fill_value='missing')\n            categorical_steps.append(('imputer', categorical_imputer))\n            \n            # Encoding\n            if self.categorical_encoding == 'onehot':\n                encoder = OneHotEncoder(drop='first', sparse_output=False, handle_unknown='ignore')\n            elif self.categorical_encoding == 'label':\n                encoder = LabelEncoder()\n            else:\n                encoder = OneHotEncoder(drop='first', sparse_output=False, handle_unknown='ignore')\n            \n            categorical_steps.append(('encoder', encoder))\n            \n            categorical_pipeline = Pipeline(categorical_steps)\n            transformers.append(('categorical', categorical_pipeline, self.categorical_features))\n        \n        # Create column transformer\n        self.preprocessor = ColumnTransformer(\n            transformers=transformers,\n            remainder='passthrough'\n        )\n    \n    def _set_output_feature_names(self):\n        \"\"\"Set output feature names after fitting\"\"\"\n        feature_names = []\n        \n        # Get feature names from each transformer\n        for name, transformer, columns in self.preprocessor.transformers_:\n            if name == 'numeric':\n                feature_names.extend(columns)\n            elif name == 'categorical':\n                # Get names from one-hot encoder\n                if hasattr(transformer.named_steps['encoder'], 'get_feature_names_out'):\n                    encoded_names = transformer.named_steps['encoder'].get_feature_names_out(columns)\n                    feature_names.extend(encoded_names)\n                else:\n                    feature_names.extend(columns)\n        \n        self.feature_names_out_ = feature_names\n    \n    def get_feature_names_out(self) -> List[str]:\n        \"\"\"Get output feature names\"\"\"\n        if not self.is_fitted:\n            raise ValueError(\"Pipeline must be fitted first\")\n        return self.feature_names_out_ or []\n    \n    def get_feature_names_in(self) -> List[str]:\n        \"\"\"Get input feature names\"\"\"\n        return self.feature_names_in_ or []\n    \n    def get_feature_types(self) -> Dict[str, str]:\n        \"\"\"Get feature types mapping\"\"\"\n        return self.feature_types\n    \n    def inverse_transform(self, X: np.ndarray) -> pd.DataFrame:\n        \"\"\"\n        Inverse transform the data (partial implementation)\n        \n        Args:\n            X: Transformed features\n            \n        Returns:\n            X_original: Approximately original features\n        \"\"\"\n        if not self.is_fitted:\n            raise ValueError(\"Pipeline must be fitted first\")\n        \n        # Note: Full inverse transform is complex for one-hot encoded features\n        # This is a simplified implementation\n        \n        try:\n            X_inverse = self.preprocessor.inverse_transform(X)\n            return pd.DataFrame(X_inverse, columns=self.feature_names_in_)\n        except Exception as e:\n            logger.warning(f\"Inverse transform failed: {str(e)}\")\n            return pd.DataFrame(X, columns=self.get_feature_names_out())\n    \n    def get_params(self, deep: bool = True) -> Dict[str, Any]:\n        \"\"\"Get pipeline parameters\"\"\"\n        params = {\n            'imputation_strategy': self.imputation_strategy,\n            'scaling_method': self.scaling_method,\n            'categorical_encoding': self.categorical_encoding,\n            'handle_outliers': self.handle_outliers,\n            'feature_selection': self.feature_selection\n        }\n        \n        if deep and self.preprocessor:\n            params.update(self.preprocessor.get_params(deep=True))\n        \n        return params\n    \n    def set_params(self, **params) -> 'self':\n        \"\"\"Set pipeline parameters\"\"\"\n        for key, value in params.items():\n            if hasattr(self, key):\n                setattr(self, key, value)\n        \n        # Rebuild preprocessor if fitted\n        if self.is_fitted:\n            self._build_preprocessor()\n        \n        return self\n    \n    def get_pipeline_info(self) -> Dict[str, Any]:\n        \"\"\"Get information about the pipeline\"\"\"\n        return {\n            'pipeline_name': '{{ component_name|title }}Pipeline',\n            'is_fitted': self.is_fitted,\n            'n_features_in': len(self.feature_names_in_) if self.feature_names_in_ else 0,\n            'n_features_out': len(self.feature_names_out_) if self.feature_names_out_ else 0,\n            'numeric_features': self.numeric_features,\n            'categorical_features': self.categorical_features,\n            'config': self.config\n        }\n\n\nclass OutlierHandler(BaseEstimator, TransformerMixin):\n    \"\"\"Custom outlier handling transformer\"\"\"\n    \n    def __init__(self, method: str = 'iqr', threshold: float = 1.5):\n        \"\"\"\n        Initialize outlier handler\n        \n        Args:\n            method: Outlier detection method ('iqr', 'zscore')\n            threshold: Threshold for outlier detection\n        \"\"\"\n        self.method = method\n        self.threshold = threshold\n        self.lower_bounds = None\n        self.upper_bounds = None\n    \n    def fit(self, X: np.ndarray, y: Optional[np.ndarray] = None) -> 'self':\n        \"\"\"Fit outlier detection parameters\"\"\"\n        if self.method == 'iqr':\n            Q1 = np.percentile(X, 25, axis=0)\n            Q3 = np.percentile(X, 75, axis=0)\n            IQR = Q3 - Q1\n            self.lower_bounds = Q1 - self.threshold * IQR\n            self.upper_bounds = Q3 + self.threshold * IQR\n        elif self.method == 'zscore':\n            mean = np.mean(X, axis=0)\n            std = np.std(X, axis=0)\n            self.lower_bounds = mean - self.threshold * std\n            self.upper_bounds = mean + self.threshold * std\n        \n        return self\n    \n    def transform(self, X: np.ndarray) -> np.ndarray:\n        \"\"\"Transform data by clipping outliers\"\"\"\n        X_transformed = X.copy()\n        X_transformed = np.clip(X_transformed, self.lower_bounds, self.upper_bounds)\n        return X_transformed",
        "src/config.py": "#!/usr/bin/env python3\n\"\"\"\nConfiguration module for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\"\"\"\n\nimport os\nimport yaml\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional\nfrom dataclasses import dataclass, field\n\n@dataclass\nclass Config:\n    \"\"\"Configuration class for ML project\"\"\"\n    \n    # Project info\n    project_name: str = \"{{ project_name }}\"\n    version: str = \"1.0.0\"\n    \n    # Paths\n    data_path: str = \"data/\"\n    raw_data_path: str = \"data/raw/\"\n    processed_data_path: str = \"data/processed/\"\n    model_path: str = \"models/trained/\"\n    output_path: Path = field(default_factory=lambda: Path(\"results/\"))\n    \n    # Training parameters\n    epochs: int = 100\n    batch_size: int = 32\n    learning_rate: float = 0.001\n    validation_split: float = 0.2\n    random_state: int = 42\n    \n    # Model parameters\n    model_type: str = \"classification\"\n    algorithm: str = \"random_forest\"\n    model_params: Dict[str, Any] = field(default_factory=dict)\n    \n    def __init__(self, config_path: Optional[str] = None):\n        \"\"\"Initialize configuration from file or defaults\"\"\"\n        if config_path and Path(config_path).exists():\n            self.load_from_file(config_path)\n        else:\n            # Set default values\n            self.setup_defaults()\n    \n    def setup_defaults(self):\n        \"\"\"Setup default configuration values\"\"\"\n        self.model_params = {\n            \"n_estimators\": 100,\n            \"max_depth\": 10,\n            \"min_samples_split\": 2,\n            \"random_state\": self.random_state\n        }\n        \n        # Ensure paths exist\n        for path_attr in [\"data_path\", \"raw_data_path\", \"processed_data_path\", \"model_path\"]:\n            path = Path(getattr(self, path_attr))\n            path.mkdir(parents=True, exist_ok=True)\n        \n        self.output_path.mkdir(parents=True, exist_ok=True)\n    \n    def load_from_file(self, config_path: str):\n        \"\"\"Load configuration from YAML file\"\"\"\n        with open(config_path, 'r') as f:\n            config_data = yaml.safe_load(f)\n        \n        # Update attributes from config file\n        if 'project' in config_data:\n            project_config = config_data['project']\n            self.project_name = project_config.get('name', self.project_name)\n            self.version = project_config.get('version', self.version)\n        \n        if 'data' in config_data:\n            data_config = config_data['data']\n            self.data_path = data_config.get('processed_path', self.data_path)\n            self.raw_data_path = data_config.get('raw_path', self.raw_data_path)\n            self.validation_split = 1 - data_config.get('train_size', 0.8)\n            self.random_state = data_config.get('random_state', self.random_state)\n        \n        if 'training' in config_data:\n            train_config = config_data['training']\n            self.epochs = train_config.get('epochs', self.epochs)\n            self.batch_size = train_config.get('batch_size', self.batch_size)\n            self.learning_rate = train_config.get('learning_rate', self.learning_rate)\n        \n        if 'model' in config_data:\n            model_config = config_data['model']\n            self.model_type = model_config.get('type', self.model_type)\n            self.algorithm = model_config.get('algorithm', self.algorithm)\n            self.model_params = model_config.get('parameters', self.model_params)\n            self.model_path = model_config.get('save_path', self.model_path)\n    \n    def save_to_file(self, config_path: str):\n        \"\"\"Save current configuration to YAML file\"\"\"\n        config_data = {\n            'project': {\n                'name': self.project_name,\n                'version': self.version\n            },\n            'data': {\n                'raw_path': self.raw_data_path,\n                'processed_path': self.data_path,\n                'train_size': 1 - self.validation_split,\n                'random_state': self.random_state\n            },\n            'training': {\n                'epochs': self.epochs,\n                'batch_size': self.batch_size,\n                'learning_rate': self.learning_rate\n            },\n            'model': {\n                'type': self.model_type,\n                'algorithm': self.algorithm,\n                'parameters': self.model_params,\n                'save_path': self.model_path\n            }\n        }\n        \n        with open(config_path, 'w') as f:\n            yaml.dump(config_data, f, default_flow_style=False)\n    \n    def __repr__(self):\n        return f\"Config(project='{self.project_name}', model='{self.algorithm}', epochs={self.epochs})\"",
        "src/data/data_loader.py": "#!/usr/bin/env python3\n\"\"\"\nData loading and preprocessing module for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\"\"\"\n\nimport pandas as pd\nimport numpy as np\nfrom pathlib import Path\nfrom typing import Tuple, Optional, Union, Dict, Any\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass DataLoader:\n    \"\"\"Data loading and preprocessing class\"\"\"\n    \n    def __init__(self, config=None):\n        \"\"\"Initialize DataLoader with configuration\"\"\"\n        self.config = config\n        self.scaler = StandardScaler()\n        self.label_encoder = LabelEncoder()\n        self.feature_names = None\n        \n    def load_data(self, file_path: Union[str, Path]) -> pd.DataFrame:\n        \"\"\"Load data from various file formats\"\"\"\n        file_path = Path(file_path)\n        \n        if not file_path.exists():\n            raise FileNotFoundError(f\"Data file not found: {file_path}\")\n        \n        logger.info(f\"Loading data from: {file_path}\")\n        \n        # Determine file format and load accordingly\n        if file_path.suffix.lower() == '.csv':\n            data = pd.read_csv(file_path)\n        elif file_path.suffix.lower() in ['.xlsx', '.xls']:\n            data = pd.read_excel(file_path)\n        elif file_path.suffix.lower() == '.parquet':\n            data = pd.read_parquet(file_path)\n        elif file_path.suffix.lower() == '.json':\n            data = pd.read_json(file_path)\n        else:\n            raise ValueError(f\"Unsupported file format: {file_path.suffix}\")\n        \n        logger.info(f\"Loaded data shape: {data.shape}\")\n        logger.info(f\"Data columns: {list(data.columns)}\")\n        \n        return data\n    \n    def preprocess_data(self, data: pd.DataFrame, target_column: str = None) -> Tuple[pd.DataFrame, pd.Series]:\n        \"\"\"Preprocess the data\"\"\"\n        logger.info(\"Starting data preprocessing...\")\n        \n        # Handle missing values\n        data = self._handle_missing_values(data)\n        \n        # Separate features and target\n        if target_column and target_column in data.columns:\n            X = data.drop(columns=[target_column])\n            y = data[target_column]\n        else:\n            # If no target specified, assume last column is target\n            X = data.iloc[:, :-1]\n            y = data.iloc[:, -1]\n        \n        # Store feature names\n        self.feature_names = list(X.columns)\n        \n        # Encode categorical variables\n        X = self._encode_categorical(X)\n        \n        # Encode target if classification\n        if self.config and self.config.model_type == \"classification\":\n            if y.dtype == 'object' or y.dtype.name == 'category':\n                y = self.label_encoder.fit_transform(y)\n        \n        logger.info(f\"Preprocessed data shape: X={X.shape}, y={y.shape}\")\n        return X, y\n    \n    def _handle_missing_values(self, data: pd.DataFrame) -> pd.DataFrame:\n        \"\"\"Handle missing values in the dataset\"\"\"\n        missing_count = data.isnull().sum().sum()\n        if missing_count > 0:\n            logger.warning(f\"Found {missing_count} missing values\")\n            \n            # Simple strategy: drop rows with missing values\n            # TODO: Implement more sophisticated strategies\n            data = data.dropna()\n            logger.info(f\"After dropping missing values, data shape: {data.shape}\")\n        \n        return data\n    \n    def _encode_categorical(self, X: pd.DataFrame) -> pd.DataFrame:\n        \"\"\"Encode categorical variables\"\"\"\n        categorical_columns = X.select_dtypes(include=['object', 'category']).columns\n        \n        if len(categorical_columns) > 0:\n            logger.info(f\"Encoding categorical columns: {list(categorical_columns)}\")\n            \n            # Use one-hot encoding for categorical variables\n            X = pd.get_dummies(X, columns=categorical_columns, drop_first=True)\n            logger.info(f\"After encoding, feature count: {X.shape[1]}\")\n        \n        return X\n    \n    def scale_features(self, X_train: pd.DataFrame, X_test: pd.DataFrame = None) -> Tuple[np.ndarray, Optional[np.ndarray]]:\n        \"\"\"Scale features using StandardScaler\"\"\"\n        logger.info(\"Scaling features...\")\n        \n        # Fit scaler on training data\n        X_train_scaled = self.scaler.fit_transform(X_train)\n        \n        X_test_scaled = None\n        if X_test is not None:\n            X_test_scaled = self.scaler.transform(X_test)\n        \n        return X_train_scaled, X_test_scaled\n    \n    def load_and_split(self, data_path: str = None, target_column: str = None, \n                      validation_split: float = None) -> Tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n        \"\"\"Load data and split into train/test sets\"\"\"\n        \n        # Use config values if not provided\n        if data_path is None and self.config:\n            data_path = self.config.processed_data_path\n        if validation_split is None and self.config:\n            validation_split = self.config.validation_split\n        \n        # Find data file if directory provided\n        if Path(data_path).is_dir():\n            data_files = list(Path(data_path).glob(\"*.csv\"))\n            if not data_files:\n                raise FileNotFoundError(f\"No CSV files found in {data_path}\")\n            data_path = data_files[0]\n            logger.info(f\"Using data file: {data_path}\")\n        \n        # Load and preprocess data\n        data = self.load_data(data_path)\n        X, y = self.preprocess_data(data, target_column)\n        \n        # Split data\n        random_state = self.config.random_state if self.config else 42\n        X_train, X_test, y_train, y_test = train_test_split(\n            X, y, \n            test_size=validation_split or 0.2,\n            random_state=random_state,\n            stratify=y if self.config and self.config.model_type == \"classification\" else None\n        )\n        \n        # Scale features\n        X_train_scaled, X_test_scaled = self.scale_features(X_train, X_test)\n        \n        logger.info(f\"Data split - Train: {X_train_scaled.shape}, Test: {X_test_scaled.shape}\")\n        \n        return X_train_scaled, X_test_scaled, y_train, y_test\n    \n    def load_prediction_data(self, data_path: str) -> np.ndarray:\n        \"\"\"Load data for prediction (no target column)\"\"\"\n        data = self.load_data(data_path)\n        \n        # Apply same preprocessing as training data\n        data = self._handle_missing_values(data)\n        data = self._encode_categorical(data)\n        \n        # Scale using fitted scaler\n        if hasattr(self.scaler, 'mean_'):\n            data_scaled = self.scaler.transform(data)\n        else:\n            logger.warning(\"Scaler not fitted. Using unscaled data.\")\n            data_scaled = data.values\n        \n        return data_scaled\n    \n    def get_feature_names(self) -> list:\n        \"\"\"Get the names of features after preprocessing\"\"\"\n        return self.feature_names or []",
        "src/models/predictor.py": "#!/usr/bin/env python3\n\"\"\"\nModel prediction module for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\"\"\"\n\nimport joblib\nimport numpy as np\nfrom pathlib import Path\nfrom typing import Union, Optional, Any\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass Predictor:\n    \"\"\"Model prediction class\"\"\"\n    \n    def __init__(self, model_path: Union[str, Path]):\n        \"\"\"Initialize predictor with trained model\"\"\"\n        self.model_path = Path(model_path)\n        self.model = None\n        self.confidence_scores = None\n        self.explanations = None\n        \n        self.load_model()\n    \n    def load_model(self):\n        \"\"\"Load the trained model\"\"\"\n        \n        if not self.model_path.exists():\n            raise FileNotFoundError(f\"Model file not found: {self.model_path}\")\n        \n        logger.info(f\"Loading model from: {self.model_path}\")\n        \n        try:\n            self.model = joblib.load(self.model_path)\n            logger.info(f\"Model loaded successfully: {type(self.model).__name__}\")\n        except Exception as e:\n            logger.error(f\"Failed to load model: {str(e)}\")\n            raise\n    \n    def predict(self, X: np.ndarray, batch_size: int = 32, \n                include_confidence: bool = False, explain: bool = False) -> np.ndarray:\n        \"\"\"Make predictions on input data\"\"\"\n        \n        if self.model is None:\n            raise ValueError(\"Model not loaded\")\n        \n        logger.info(f\"Making predictions on {X.shape[0]} samples...\")\n        \n        # Reset previous results\n        self.confidence_scores = None\n        self.explanations = None\n        \n        try:\n            # Make predictions\n            if batch_size and X.shape[0] > batch_size:\n                # Batch prediction for large datasets\n                predictions = []\n                for i in range(0, X.shape[0], batch_size):\n                    batch = X[i:i + batch_size]\n                    batch_pred = self.model.predict(batch)\n                    predictions.append(batch_pred)\n                \n                predictions = np.concatenate(predictions, axis=0)\n            else:\n                predictions = self.model.predict(X)\n            \n            # Get confidence scores if requested\n            if include_confidence:\n                self.confidence_scores = self._get_confidence_scores(X)\n            \n            # Get explanations if requested\n            if explain:\n                self.explanations = self._get_explanations(X)\n            \n            logger.info(f\"Generated {len(predictions)} predictions\")\n            return predictions\n            \n        except Exception as e:\n            logger.error(f\"Prediction failed: {str(e)}\")\n            raise\n    \n    def predict_proba(self, X: np.ndarray) -> Optional[np.ndarray]:\n        \"\"\"Get prediction probabilities (for classification models)\"\"\"\n        \n        if self.model is None:\n            raise ValueError(\"Model not loaded\")\n        \n        if hasattr(self.model, 'predict_proba'):\n            logger.info(\"Getting prediction probabilities...\")\n            return self.model.predict_proba(X)\n        else:\n            logger.warning(\"Model does not support probability prediction\")\n            return None\n    \n    def _get_confidence_scores(self, X: np.ndarray) -> Optional[np.ndarray]:\n        \"\"\"Calculate confidence scores for predictions\"\"\"\n        \n        try:\n            # For classification models with probability support\n            if hasattr(self.model, 'predict_proba'):\n                probabilities = self.model.predict_proba(X)\n                # Use maximum probability as confidence\n                confidence = np.max(probabilities, axis=1)\n                logger.info(\"Confidence scores calculated from probabilities\")\n                return confidence\n            \n            # For models with decision function\n            elif hasattr(self.model, 'decision_function'):\n                decision_scores = self.model.decision_function(X)\n                # Normalize decision scores to confidence\n                confidence = np.abs(decision_scores)\n                if len(confidence.shape) > 1:\n                    confidence = np.max(confidence, axis=1)\n                logger.info(\"Confidence scores calculated from decision function\")\n                return confidence\n            \n            else:\n                logger.warning(\"Model does not support confidence calculation\")\n                return None\n                \n        except Exception as e:\n            logger.error(f\"Failed to calculate confidence scores: {str(e)}\")\n            return None\n    \n    def _get_explanations(self, X: np.ndarray) -> Optional[Any]:\n        \"\"\"Generate model explanations (requires additional libraries)\"\"\"\n        \n        try:\n            # Try to use SHAP for explanations\n            try:\n                import shap\n                \n                # Create explainer based on model type\n                if hasattr(self.model, 'predict_proba'):\n                    explainer = shap.Explainer(self.model.predict_proba, X[:100])  # Sample for background\n                else:\n                    explainer = shap.Explainer(self.model.predict, X[:100])\n                \n                # Calculate SHAP values for first few samples (expensive operation)\n                sample_size = min(10, X.shape[0])\n                shap_values = explainer(X[:sample_size])\n                \n                logger.info(f\"Generated SHAP explanations for {sample_size} samples\")\n                return shap_values\n                \n            except ImportError:\n                logger.warning(\"SHAP not available for explanations\")\n                \n            # Try to use feature importance if available\n            if hasattr(self.model, 'feature_importances_'):\n                logger.info(\"Using feature importance as explanation\")\n                return {\n                    'feature_importances': self.model.feature_importances_,\n                    'explanation_type': 'feature_importance'\n                }\n            \n            logger.warning(\"No explanation method available\")\n            return None\n            \n        except Exception as e:\n            logger.error(f\"Failed to generate explanations: {str(e)}\")\n            return None\n    \n    def get_confidence_scores(self) -> Optional[np.ndarray]:\n        \"\"\"Get the confidence scores from last prediction\"\"\"\n        return self.confidence_scores\n    \n    def get_explanations(self) -> Optional[Any]:\n        \"\"\"Get the explanations from last prediction\"\"\"\n        return self.explanations\n    \n    def predict_single(self, sample: np.ndarray) -> Union[float, int, str]:\n        \"\"\"Make prediction on a single sample\"\"\"\n        \n        if len(sample.shape) == 1:\n            sample = sample.reshape(1, -1)\n        \n        prediction = self.predict(sample)[0]\n        return prediction\n    \n    def get_model_info(self) -> dict:\n        \"\"\"Get information about the loaded model\"\"\"\n        \n        if self.model is None:\n            return {\"error\": \"No model loaded\"}\n        \n        info = {\n            \"model_type\": type(self.model).__name__,\n            \"model_path\": str(self.model_path),\n            \"supports_probability\": hasattr(self.model, 'predict_proba'),\n            \"supports_decision_function\": hasattr(self.model, 'decision_function'),\n            \"supports_feature_importance\": hasattr(self.model, 'feature_importances_')\n        }\n        \n        # Add model-specific parameters if available\n        if hasattr(self.model, 'get_params'):\n            info[\"parameters\"] = self.model.get_params()\n        \n        return info",
        "src/models/trainer.py": "#!/usr/bin/env python3\n\"\"\"\nModel training module for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\"\"\"\n\nimport joblib\nimport numpy as np\nfrom pathlib import Path\nfrom typing import Any, Dict, Optional, Tuple\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass Trainer:\n    \"\"\"Model training and evaluation class\"\"\"\n    \n    def __init__(self, config=None):\n        \"\"\"Initialize trainer with configuration\"\"\"\n        self.config = config\n        self.model = None\n        self.training_history = []\n        \n    def _get_model(self):\n        \"\"\"Get model based on configuration\"\"\"\n        if not self.config:\n            # Default model\n            return RandomForestClassifier(random_state=42)\n        \n        algorithm = self.config.algorithm\n        model_type = self.config.model_type\n        params = self.config.model_params\n        \n        if algorithm == \"random_forest\":\n            if model_type == \"classification\":\n                return RandomForestClassifier(**params)\n            else:\n                return RandomForestRegressor(**params)\n        \n        # Add more algorithms here\n        elif algorithm == \"xgboost\":\n            try:\n                import xgboost as xgb\n                if model_type == \"classification\":\n                    return xgb.XGBClassifier(**params)\n                else:\n                    return xgb.XGBRegressor(**params)\n            except ImportError:\n                logger.warning(\"XGBoost not installed, falling back to RandomForest\")\n                return self._get_model()\n        \n        else:\n            logger.warning(f\"Unknown algorithm: {algorithm}, using RandomForest\")\n            if model_type == \"classification\":\n                return RandomForestClassifier(**params)\n            else:\n                return RandomForestRegressor(**params)\n    \n    def train(self, X_train: np.ndarray, y_train: np.ndarray, \n              X_val: np.ndarray = None, y_val: np.ndarray = None,\n              epochs: int = None, batch_size: int = None,\n              save_best: bool = False, early_stopping: bool = False,\n              verbose: bool = True, metrics_tracker=None) -> Any:\n        \"\"\"Train the model\"\"\"\n        \n        logger.info(\"Starting model training...\")\n        \n        # Get model\n        self.model = self._get_model()\n        \n        # Train model\n        logger.info(f\"Training {type(self.model).__name__}...\")\n        self.model.fit(X_train, y_train)\n        \n        # Evaluate on training data\n        train_score = self.model.score(X_train, y_train)\n        logger.info(f\"Training score: {train_score:.4f}\")\n        \n        # Evaluate on validation data if provided\n        if X_val is not None and y_val is not None:\n            val_score = self.model.score(X_val, y_val)\n            logger.info(f\"Validation score: {val_score:.4f}\")\n            \n            # Store training history\n            self.training_history.append({\n                'epoch': 1,  # Simplified for non-neural models\n                'train_score': train_score,\n                'val_score': val_score\n            })\n        \n        logger.info(\"✅ Training completed!\")\n        return self.model\n    \n    def evaluate(self, model: Any, X_test: np.ndarray, y_test: np.ndarray, \n                metrics_tracker=None) -> Dict[str, float]:\n        \"\"\"Evaluate the model\"\"\"\n        \n        logger.info(\"Evaluating model...\")\n        \n        # Make predictions\n        y_pred = model.predict(X_test)\n        \n        metrics = {}\n        \n        if self.config and self.config.model_type == \"classification\":\n            # Classification metrics\n            metrics['accuracy'] = accuracy_score(y_test, y_pred)\n            metrics['precision'] = precision_score(y_test, y_pred, average='weighted')\n            metrics['recall'] = recall_score(y_test, y_pred, average='weighted')\n            metrics['f1_score'] = f1_score(y_test, y_pred, average='weighted')\n            \n            logger.info(f\"Accuracy: {metrics['accuracy']:.4f}\")\n            logger.info(f\"Precision: {metrics['precision']:.4f}\")\n            logger.info(f\"Recall: {metrics['recall']:.4f}\")\n            logger.info(f\"F1 Score: {metrics['f1_score']:.4f}\")\n            \n        else:\n            # Regression metrics\n            metrics['mse'] = mean_squared_error(y_test, y_pred)\n            metrics['rmse'] = np.sqrt(metrics['mse'])\n            metrics['mae'] = mean_absolute_error(y_test, y_pred)\n            metrics['r2_score'] = r2_score(y_test, y_pred)\n            \n            logger.info(f\"MSE: {metrics['mse']:.4f}\")\n            logger.info(f\"RMSE: {metrics['rmse']:.4f}\")\n            logger.info(f\"MAE: {metrics['mae']:.4f}\")\n            logger.info(f\"R² Score: {metrics['r2_score']:.4f}\")\n        \n        # Update metrics tracker if provided\n        if metrics_tracker:\n            metrics_tracker.update(metrics)\n        \n        return metrics\n    \n    def save_model(self, model: Any, save_path: str) -> str:\n        \"\"\"Save the trained model\"\"\"\n        \n        save_path = Path(save_path)\n        save_path.parent.mkdir(parents=True, exist_ok=True)\n        \n        # Add .joblib extension if not present\n        if save_path.suffix != '.joblib':\n            if save_path.is_dir():\n                save_path = save_path / \"model.joblib\"\n            else:\n                save_path = save_path.with_suffix('.joblib')\n        \n        logger.info(f\"Saving model to: {save_path}\")\n        joblib.dump(model, save_path)\n        \n        return str(save_path)\n    \n    def load_model(self, model_path: str) -> Any:\n        \"\"\"Load a saved model\"\"\"\n        \n        model_path = Path(model_path)\n        if not model_path.exists():\n            raise FileNotFoundError(f\"Model file not found: {model_path}\")\n        \n        logger.info(f\"Loading model from: {model_path}\")\n        model = joblib.load(model_path)\n        \n        return model\n    \n    def get_feature_importance(self, model: Any = None) -> Optional[np.ndarray]:\n        \"\"\"Get feature importance if supported by the model\"\"\"\n        \n        if model is None:\n            model = self.model\n        \n        if hasattr(model, 'feature_importances_'):\n            return model.feature_importances_\n        else:\n            logger.warning(\"Model does not support feature importance\")\n            return None\n    \n    def cross_validate(self, X: np.ndarray, y: np.ndarray, cv_folds: int = 5) -> Dict[str, float]:\n        \"\"\"Perform cross-validation\"\"\"\n        \n        from sklearn.model_selection import cross_val_score\n        \n        logger.info(f\"Performing {cv_folds}-fold cross-validation...\")\n        \n        model = self._get_model()\n        scores = cross_val_score(model, X, y, cv=cv_folds)\n        \n        cv_results = {\n            'mean_score': scores.mean(),\n            'std_score': scores.std(),\n            'scores': scores.tolist()\n        }\n        \n        logger.info(f\"CV Score: {cv_results['mean_score']:.4f} (+/- {cv_results['std_score'] * 2:.4f})\")\n        \n        return cv_results",
        "src/utils/logger.py": "#!/usr/bin/env python3\n\"\"\"\nLogging utilities for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\"\"\"\n\nimport logging\nimport sys\nfrom pathlib import Path\nfrom typing import Optional\n\ndef setup_logging(level: str = \"INFO\", log_file: Optional[str] = None):\n    \"\"\"Setup logging configuration\"\"\"\n    \n    # Create logs directory if it doesn't exist\n    if log_file:\n        log_path = Path(log_file)\n        log_path.parent.mkdir(parents=True, exist_ok=True)\n    \n    # Configure logging format\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n        datefmt='%Y-%m-%d %H:%M:%S'\n    )\n    \n    # Setup root logger\n    root_logger = logging.getLogger()\n    root_logger.setLevel(getattr(logging, level.upper()))\n    \n    # Clear existing handlers\n    root_logger.handlers.clear()\n    \n    # Console handler\n    console_handler = logging.StreamHandler(sys.stdout)\n    console_handler.setFormatter(formatter)\n    root_logger.addHandler(console_handler)\n    \n    # File handler if specified\n    if log_file:\n        file_handler = logging.FileHandler(log_file)\n        file_handler.setFormatter(formatter)\n        root_logger.addHandler(file_handler)\n    \n    logging.info(\"Logging configured successfully\")\n\ndef get_logger(name: str) -> logging.Logger:\n    \"\"\"Get a logger with the specified name\"\"\"\n    return logging.getLogger(name)",
        "src/utils/metrics.py": "#!/usr/bin/env python3\n\"\"\"\nMetrics tracking utilities for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\"\"\"\n\nimport json\nfrom pathlib import Path\nfrom typing import Dict, Any, List\nfrom datetime import datetime\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass MetricsTracker:\n    \"\"\"Track and manage ML metrics\"\"\"\n    \n    def __init__(self):\n        \"\"\"Initialize metrics tracker\"\"\"\n        self.metrics = {}\n        self.history = []\n        self.start_time = datetime.now()\n    \n    def update(self, metrics: Dict[str, float]):\n        \"\"\"Update metrics dictionary\"\"\"\n        self.metrics.update(metrics)\n        \n        # Add timestamp\n        timestamped_metrics = {\n            \"timestamp\": datetime.now().isoformat(),\n            **metrics\n        }\n        self.history.append(timestamped_metrics)\n        \n        logger.info(f\"Metrics updated: {metrics}\")\n    \n    def get_metric(self, name: str) -> Any:\n        \"\"\"Get specific metric value\"\"\"\n        return self.metrics.get(name)\n    \n    def get_all_metrics(self) -> Dict[str, Any]:\n        \"\"\"Get all current metrics\"\"\"\n        return self.metrics.copy()\n    \n    def get_summary(self) -> Dict[str, Any]:\n        \"\"\"Get metrics summary\"\"\"\n        summary = {\n            \"current_metrics\": self.metrics,\n            \"total_updates\": len(self.history),\n            \"tracking_duration\": str(datetime.now() - self.start_time)\n        }\n        \n        if self.history:\n            summary[\"first_update\"] = self.history[0][\"timestamp\"]\n            summary[\"last_update\"] = self.history[-1][\"timestamp\"]\n        \n        return summary\n    \n    def save_history(self, file_path: str):\n        \"\"\"Save metrics history to file\"\"\"\n        file_path = Path(file_path)\n        file_path.parent.mkdir(parents=True, exist_ok=True)\n        \n        history_data = {\n            \"metrics_history\": self.history,\n            \"summary\": self.get_summary(),\n            \"exported_at\": datetime.now().isoformat()\n        }\n        \n        with open(file_path, 'w') as f:\n            json.dump(history_data, f, indent=2)\n        \n        logger.info(f\"Metrics history saved to: {file_path}\")\n    \n    def load_history(self, file_path: str):\n        \"\"\"Load metrics history from file\"\"\"\n        file_path = Path(file_path)\n        \n        if not file_path.exists():\n            logger.warning(f\"Metrics file not found: {file_path}\")\n            return\n        \n        with open(file_path, 'r') as f:\n            data = json.load(f)\n        \n        self.history = data.get(\"metrics_history\", [])\n        if self.history:\n            # Restore latest metrics\n            latest = self.history[-1]\n            self.metrics = {k: v for k, v in latest.items() if k != \"timestamp\"}\n        \n        logger.info(f\"Metrics history loaded from: {file_path}\")\n    \n    def compare_metrics(self, other_metrics: Dict[str, float]) -> Dict[str, float]:\n        \"\"\"Compare current metrics with other metrics\"\"\"\n        comparison = {}\n        \n        for metric_name in self.metrics:\n            if metric_name in other_metrics:\n                current_value = self.metrics[metric_name]\n                other_value = other_metrics[metric_name]\n                difference = current_value - other_value\n                comparison[f\"{metric_name}_diff\"] = difference\n                comparison[f\"{metric_name}_improvement\"] = difference > 0\n        \n        return comparison\n    \n    def get_best_metrics(self) -> Dict[str, Any]:\n        \"\"\"Get best values for each metric from history\"\"\"\n        if not self.history:\n            return {}\n        \n        best_metrics = {}\n        \n        # Collect all metric names\n        all_metrics = set()\n        for entry in self.history:\n            all_metrics.update(entry.keys())\n        all_metrics.discard(\"timestamp\")\n        \n        # Find best value for each metric\n        for metric_name in all_metrics:\n            values = []\n            for entry in self.history:\n                if metric_name in entry:\n                    try:\n                        values.append(float(entry[metric_name]))\n                    except (ValueError, TypeError):\n                        continue\n            \n            if values:\n                # Assume higher is better for most metrics (customize as needed)\n                if metric_name.lower() in [\"mse\", \"rmse\", \"mae\", \"loss\", \"error\"]:\n                    best_metrics[f\"best_{metric_name}\"] = min(values)\n                else:\n                    best_metrics[f\"best_{metric_name}\"] = max(values)\n        \n        return best_metrics\n    \n    def reset(self):\n        \"\"\"Reset all metrics and history\"\"\"\n        self.metrics.clear()\n        self.history.clear()\n        self.start_time = datetime.now()\n        logger.info(\"Metrics tracker reset\")"
      }
    },
    "mongoengine": {
      "structure": "├── components/\n│   └── model.py\n├── main.py\n├── requirements.txt\n├── src/\n│   └── database/\n│       └── connection.py\n└── template.yaml\n",
      "files": {
        "main.py": "#!/usr/bin/env python3\n\"\"\"\n{{ project_name }} - MongoDB Application\nCreated by {{ generator }} at {{ timestamp }}\n\nMain entry point for MongoDB application using MongoEngine.\n\"\"\"\n\nimport os\nimport sys\nimport logging\nfrom pathlib import Path\n\n# Add src to Python path\nsys.path.append(str(Path(__file__).parent / \"src\"))\n\nfrom src.database.connection import MongoManager\nfrom src.utils.logger import setup_logging\nfrom config.mongodb import MongoConfig\n\ndef main():\n    \"\"\"Main application function\"\"\"\n    # Setup logging\n    setup_logging()\n    logger = logging.getLogger(__name__)\n    \n    try:\n        logger.info(\"🚀 Starting {{ project_name }} MongoDB Application\")\n        \n        # Initialize MongoDB configuration\n        config = MongoConfig()\n        logger.info(f\"📊 MongoDB URI: {config.get_connection_string()}\")\n        \n        # Initialize MongoDB manager\n        mongo_manager = MongoManager(config)\n        \n        # Connect to MongoDB\n        logger.info(\"🔗 Connecting to MongoDB...\")\n        mongo_manager.connect()\n        \n        # Test connection\n        logger.info(\"🔍 Testing MongoDB connection...\")\n        if mongo_manager.test_connection():\n            logger.info(\"✅ MongoDB connection successful!\")\n        else:\n            logger.error(\"❌ MongoDB connection failed!\")\n            return\n        \n        # Example usage - you can modify this section\n        logger.info(\"📊 MongoDB connection established\")\n        \n        # Add your application logic here\n        # Example:\n        # from src.models.user import User\n        # user = User(name=\"John Doe\", email=\"john@example.com\")\n        # user.save()\n        # logger.info(f\"Created user: {user.name}\")\n        \n        logger.info(\"💾 Application logic completed\")\n        \n        logger.info(\"✅ {{ project_name }} application completed successfully!\")\n        \n    except Exception as e:\n        logger.error(f\"❌ Application error: {str(e)}\")\n        sys.exit(1)\n    finally:\n        # Disconnect from MongoDB\n        try:\n            mongo_manager.disconnect()\n            logger.info(\"🔌 Disconnected from MongoDB\")\n        except:\n            pass\n\nif __name__ == \"__main__\":\n    main()",
        "requirements.txt": "# {{ project_name }} - MongoDB Dependencies\n# Generated by {{ generator }} at {{ timestamp }}\n\n# Core MongoDB and MongoEngine\nmongoengine>=0.27.0\npymongo>=4.5.0\n\n# Async MongoDB support\nmotor>=3.3.0\nbeanie>=1.21.0\n\n# Data validation and serialization\npydantic>=2.0.0\nmarshmallow>=3.20.0\nmarshmallow-mongoengine>=0.30.0\n\n# Configuration management\npython-dotenv>=1.0.0\npyyaml>=6.0.0\nconfigparser>=6.0.0\n\n# Utilities\nclick>=8.1.0\ntqdm>=4.65.0\nrich>=13.5.0\n\n# Development tools\nipython>=8.14.0\njupyter>=1.0.0\n\n# Testing\npytest>=7.4.0\npytest-asyncio>=0.21.0\npytest-cov>=4.1.0\nfactory-boy>=3.3.0\nmongomock>=4.1.0\n\n# Code quality\nblack>=23.7.0\nflake8>=6.0.0\nisort>=5.12.0\nmypy>=1.5.0\n\n# Documentation\nsphinx>=7.1.0\nsphinx-rtd-theme>=1.3.0\n\n# Performance monitoring\npymongo-profiler>=0.1.0\nmemory-profiler>=0.61.0\n\n# Data validation\ncerberus>=1.3.0\nschema>=0.7.0\n\n# Async support\nasyncio>=3.4.3\naiofiles>=23.2.0\n\n# Date and time handling\npython-dateutil>=2.8.0\narrow>=1.2.0\n\n# Image handling (optional)\nPillow>=10.0.0\n\n# Geospatial support (optional)\ngeopy>=2.3.0\nshapely>=2.0.0\n\n# Caching (optional)\nredis>=5.0.0\nmemcached>=1.62\n\n# Monitoring (optional)\nprometheus-client>=0.17.0\nstatsd>=4.0.0\n\n# GridFS support\ngridfs>=4.5.0\n\n# Full-text search (optional)\nwhoosh>=2.7.4\nelasticsearch>=8.9.0",
        "template.yaml": "name: \"python-mongoengine\"\nversion: \"1.0.0\"\ndescription: \"قالب شامل لمشاريع MongoDB مع MongoEngine\"\nlanguage: \"python\"\nframework: \"mongoengine\"\n\nstructure:\n  directories:\n    - \"src\"\n    - \"src/models\"\n    - \"src/services\"\n    - \"src/repositories\"\n    - \"src/utils\"\n    - \"src/database\"\n    - \"config\"\n    - \"tests\"\n    - \"scripts\"\n    - \"docs\"\n\n  files:\n    - path: \"main.py\"\n      template: \"python/mongoengine/main.py\"\n      type: \"template\"\n    \n    - path: \"database.py\"\n      template: \"python/mongoengine/database.py\"\n      type: \"template\"\n    \n    - path: \"requirements.txt\"\n      template: \"python/mongoengine/requirements.txt\"\n      type: \"template\"\n    \n    - path: \"config/mongodb.py\"\n      template: \"python/mongoengine/config/mongodb.py\"\n      type: \"template\"\n    \n    - path: \"src/__init__.py\"\n      content: \"# {{ project_name }} MongoDB Package\\n__version__ = '1.0.0'\\n\"\n      type: \"content\"\n    \n    - path: \".env.example\"\n      template: \"python/mongoengine/env.example\"\n      type: \"template\"\n    \n    - path: \".gitignore\"\n      template: \"python/common/gitignore\"\n      type: \"template\"\n\nassets: []\n\npost_tasks:\n  - type: \"gitinit\"\n  - type: \"create_venv\"\n\ncomponents:\n  model:\n    template: \"python/mongoengine/components/model.py\"\n    path: \"src/models/{{component_name|lower}}.py\"\n  \n  service:\n    template: \"python/mongoengine/components/service.py\"\n    path: \"src/services/{{component_name|lower}}_service.py\"\n  \n  repository:\n    template: \"python/mongoengine/components/repository.py\"\n    path: \"src/repositories/{{component_name|lower}}_repository.py\"",
        "components/model.py": "#!/usr/bin/env python3\n\"\"\"\n{{ component_name }} model for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\"\"\"\n\nfrom mongoengine import Document, EmbeddedDocument, fields\nfrom datetime import datetime\nfrom typing import Dict, Any, Optional, List\n\nclass {{ component_name|title }}(Document):\n    \"\"\"\n    {{ component_name|title }} model for {{ project_name }}\n    \n    This model represents {{ component_name }} documents in MongoDB.\n    Customize the fields below according to your requirements.\n    \"\"\"\n    \n    # Basic fields - customize as needed\n    name = fields.StringField(required=True, max_length=255)\n    description = fields.StringField()\n    is_active = fields.BooleanField(default=True)\n    \n    # Timestamp fields\n    created_at = fields.DateTimeField(default=datetime.utcnow)\n    updated_at = fields.DateTimeField(default=datetime.utcnow)\n    \n    # Add your custom fields here\n    # Example fields:\n    # email = fields.EmailField()\n    # phone = fields.StringField(max_length=20)\n    # age = fields.IntField(min_value=0, max_value=150)\n    # tags = fields.ListField(fields.StringField(max_length=50))\n    # metadata = fields.DictField()\n    \n    # Relationships - uncomment and modify as needed\n    # Example reference field:\n    # category = fields.ReferenceField('Category')\n    # \n    # Example embedded document:\n    # address = fields.EmbeddedDocumentField('Address')\n    # \n    # Example list of references:\n    # related_items = fields.ListField(fields.ReferenceField('{{ component_name|title }}'))\n    \n    # Meta configuration\n    meta = {\n        'collection': '{{ component_name|lower }}s',\n        'indexes': [\n            'name',\n            'is_active',\n            ('name', 'is_active'),\n            {\n                'fields': ['created_at'],\n                'expireAfterSeconds': None  # Set to expire documents after time\n            }\n        ],\n        'ordering': ['-created_at']\n    }\n    \n    def clean(self):\n        \"\"\"Validate document before saving\"\"\"\n        super().clean()\n        \n        # Custom validation logic\n        if self.name:\n            self.name = self.name.strip()\n        \n        # Update timestamp on modification\n        if self.pk:  # If document exists (update)\n            self.updated_at = datetime.utcnow()\n    \n    def save(self, *args, **kwargs):\n        \"\"\"Override save to add custom logic\"\"\"\n        # Update timestamp\n        if not self.created_at:\n            self.created_at = datetime.utcnow()\n        self.updated_at = datetime.utcnow()\n        \n        return super().save(*args, **kwargs)\n    \n    def to_dict(self, include_id=True) -> Dict[str, Any]:\n        \"\"\"\n        Convert document to dictionary\n        \n        Args:\n            include_id: Whether to include the document ID\n            \n        Returns:\n            Dictionary representation of the document\n        \"\"\"\n        result = {}\n        \n        for field_name in self._fields:\n            field_value = getattr(self, field_name)\n            \n            if field_value is not None:\n                if isinstance(field_value, datetime):\n                    result[field_name] = field_value.isoformat()\n                elif hasattr(field_value, 'to_dict'):\n                    result[field_name] = field_value.to_dict()\n                else:\n                    result[field_name] = field_value\n        \n        if include_id and self.pk:\n            result['id'] = str(self.pk)\n        \n        return result\n    \n    @classmethod\n    def create_with_validation(cls, **kwargs):\n        \"\"\"\n        Create new {{ component_name|lower }} with validation\n        \n        Args:\n            **kwargs: Document fields\n            \n        Returns:\n            Created {{ component_name|lower }} instance\n            \n        Raises:\n            ValidationError: If validation fails\n        \"\"\"\n        # Validation logic\n        name = kwargs.get('name')\n        if not name or len(name.strip()) == 0:\n            raise ValueError(\"Name is required\")\n        \n        if len(name) > 255:\n            raise ValueError(\"Name must be 255 characters or less\")\n        \n        # Check for duplicates\n        existing = cls.objects(name=name).first()\n        if existing:\n            raise ValueError(f\"{{ component_name|title }} with name '{name}' already exists\")\n        \n        # Create instance\n        instance = cls(**kwargs)\n        instance.save()\n        return instance\n    \n    @classmethod\n    def get_by_name(cls, name: str):\n        \"\"\"Get {{ component_name|lower }} by name\"\"\"\n        return cls.objects(name=name).first()\n    \n    @classmethod\n    def get_active(cls):\n        \"\"\"Get all active {{ component_name|lower }}s\"\"\"\n        return cls.objects(is_active=True)\n    \n    @classmethod\n    def search_by_name(cls, search_term: str):\n        \"\"\"Search {{ component_name|lower }}s by name\"\"\"\n        return cls.objects(name__icontains=search_term)\n    \n    @classmethod\n    def get_recent(cls, limit: int = 10):\n        \"\"\"Get recent {{ component_name|lower }}s\"\"\"\n        return cls.objects().order_by('-created_at').limit(limit)\n    \n    def activate(self):\n        \"\"\"Activate this {{ component_name|lower }}\"\"\"\n        self.is_active = True\n        self.save()\n    \n    def deactivate(self):\n        \"\"\"Deactivate this {{ component_name|lower }}\"\"\"\n        self.is_active = False\n        self.save()\n    \n    def update_fields(self, **kwargs):\n        \"\"\"\n        Update specific fields\n        \n        Args:\n            **kwargs: Fields to update\n        \"\"\"\n        for field, value in kwargs.items():\n            if field in self._fields:\n                setattr(self, field, value)\n        \n        self.updated_at = datetime.utcnow()\n        self.save()\n    \n    def add_tag(self, tag: str):\n        \"\"\"Add a tag (if tags field exists)\"\"\"\n        if hasattr(self, 'tags'):\n            if tag not in self.tags:\n                self.tags.append(tag)\n                self.save()\n    \n    def remove_tag(self, tag: str):\n        \"\"\"Remove a tag (if tags field exists)\"\"\"\n        if hasattr(self, 'tags') and tag in self.tags:\n            self.tags.remove(tag)\n            self.save()\n    \n    def __str__(self):\n        \"\"\"String representation of the document\"\"\"\n        return f\"{{ component_name|title }}(name='{self.name}')\"\n    \n    def __repr__(self):\n        \"\"\"Developer representation of the document\"\"\"\n        return f\"<{{ component_name|title }}(id={self.pk}, name='{self.name}')>\"\n\n# Example embedded document (uncomment and modify as needed)\n# class Address(EmbeddedDocument):\n#     \"\"\"Address embedded document\"\"\"\n#     street = fields.StringField(max_length=255)\n#     city = fields.StringField(max_length=100)\n#     state = fields.StringField(max_length=50)\n#     country = fields.StringField(max_length=50)\n#     zip_code = fields.StringField(max_length=20)\n#     \n#     def to_dict(self):\n#         return {\n#             'street': self.street,\n#             'city': self.city,\n#             'state': self.state,\n#             'country': self.country,\n#             'zip_code': self.zip_code\n#         }",
        "src/database/connection.py": "#!/usr/bin/env python3\n\"\"\"\nMongoDB connection management for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\"\"\"\n\nimport logging\nfrom typing import Optional\nfrom mongoengine import connect, disconnect, connection\nfrom pymongo.errors import ServerSelectionTimeoutError, ConnectionFailure\nfrom pymongo import MongoClient\n\nlogger = logging.getLogger(__name__)\n\nclass MongoManager:\n    \"\"\"\n    MongoDB connection and database management\n    \n    Handles MongoDB connections, database operations, and connection testing.\n    \"\"\"\n    \n    def __init__(self, config):\n        \"\"\"Initialize MongoDB manager with configuration\"\"\"\n        self.config = config\n        self.client = None\n        self.database = None\n        self._connected = False\n    \n    def connect(self):\n        \"\"\"Connect to MongoDB using MongoEngine\"\"\"\n        try:\n            # Disconnect any existing connections\n            self.disconnect()\n            \n            # Connection parameters\n            connection_params = {\n                'host': self.config.get_connection_string(),\n                'connect': True,\n                'serverSelectionTimeoutMS': self.config.server_selection_timeout,\n                'socketTimeoutMS': self.config.socket_timeout,\n                'maxPoolSize': self.config.max_pool_size,\n                'minPoolSize': self.config.min_pool_size,\n            }\n            \n            # Add authentication if provided\n            if self.config.username and self.config.password:\n                connection_params.update({\n                    'username': self.config.username,\n                    'password': self.config.password,\n                    'authentication_source': self.config.auth_source,\n                })\n            \n            # Add SSL configuration if enabled\n            if self.config.use_ssl:\n                connection_params.update({\n                    'ssl': True,\n                    'ssl_cert_reqs': self.config.ssl_cert_reqs,\n                })\n                \n                if self.config.ssl_ca_certs:\n                    connection_params['ssl_ca_certs'] = self.config.ssl_ca_certs\n                \n                if self.config.ssl_certfile:\n                    connection_params['ssl_certfile'] = self.config.ssl_certfile\n                \n                if self.config.ssl_keyfile:\n                    connection_params['ssl_keyfile'] = self.config.ssl_keyfile\n            \n            # Connect to MongoDB\n            self.client = connect(\n                db=self.config.database_name,\n                alias='default',\n                **connection_params\n            )\n            \n            self.database = self.client[self.config.database_name]\n            self._connected = True\n            \n            logger.info(f\"Connected to MongoDB: {self.config.database_name}\")\n            \n        except Exception as e:\n            logger.error(f\"Failed to connect to MongoDB: {str(e)}\")\n            raise\n    \n    def disconnect(self):\n        \"\"\"Disconnect from MongoDB\"\"\"\n        try:\n            disconnect()\n            self._connected = False\n            logger.info(\"Disconnected from MongoDB\")\n        except Exception as e:\n            logger.warning(f\"Error during MongoDB disconnect: {str(e)}\")\n    \n    def test_connection(self) -> bool:\n        \"\"\"Test MongoDB connection\"\"\"\n        try:\n            if not self._connected:\n                return False\n            \n            # Get MongoDB client and test connection\n            client = connection.get_connection()\n            \n            # Simple ping to test connection\n            client.admin.command('ping')\n            \n            logger.info(\"MongoDB connection test successful\")\n            return True\n            \n        except (ServerSelectionTimeoutError, ConnectionFailure) as e:\n            logger.error(f\"MongoDB connection test failed: {str(e)}\")\n            return False\n        except Exception as e:\n            logger.error(f\"Unexpected error during connection test: {str(e)}\")\n            return False\n    \n    def get_database_info(self) -> dict:\n        \"\"\"Get information about the database\"\"\"\n        try:\n            if not self._connected:\n                raise ConnectionError(\"Not connected to MongoDB\")\n            \n            client = connection.get_connection()\n            db = client[self.config.database_name]\n            \n            # Get database stats\n            stats = db.command(\"dbStats\")\n            \n            # Get collection names\n            collections = db.list_collection_names()\n            \n            # Get indexes for each collection\n            collection_info = {}\n            for collection_name in collections:\n                collection = db[collection_name]\n                indexes = list(collection.list_indexes())\n                collection_info[collection_name] = {\n                    'document_count': collection.count_documents({}),\n                    'indexes': [index['name'] for index in indexes]\n                }\n            \n            return {\n                'database_name': self.config.database_name,\n                'collections': collections,\n                'collection_info': collection_info,\n                'database_stats': {\n                    'size_bytes': stats.get('dataSize', 0),\n                    'index_size_bytes': stats.get('indexSize', 0),\n                    'storage_size_bytes': stats.get('storageSize', 0),\n                    'object_count': stats.get('objects', 0),\n                    'collection_count': stats.get('collections', 0),\n                    'index_count': stats.get('indexes', 0),\n                }\n            }\n            \n        except Exception as e:\n            logger.error(f\"Error getting database info: {str(e)}\")\n            return {}\n    \n    def create_indexes(self, model_classes: list):\n        \"\"\"Create indexes for model classes\"\"\"\n        try:\n            for model_class in model_classes:\n                if hasattr(model_class, '_get_collection'):\n                    collection = model_class._get_collection()\n                    \n                    # Get indexes defined in the model\n                    if hasattr(model_class, '_meta') and hasattr(model_class._meta, 'indexes'):\n                        for index in model_class._meta.indexes:\n                            try:\n                                collection.create_index(index)\n                                logger.info(f\"Created index for {model_class.__name__}: {index}\")\n                            except Exception as e:\n                                logger.warning(f\"Failed to create index for {model_class.__name__}: {str(e)}\")\n            \n            logger.info(\"Index creation completed\")\n            \n        except Exception as e:\n            logger.error(f\"Error creating indexes: {str(e)}\")\n            raise\n    \n    def drop_database(self):\n        \"\"\"Drop the entire database\"\"\"\n        try:\n            if not self._connected:\n                raise ConnectionError(\"Not connected to MongoDB\")\n            \n            client = connection.get_connection()\n            client.drop_database(self.config.database_name)\n            \n            logger.info(f\"Database '{self.config.database_name}' dropped successfully\")\n            \n        except Exception as e:\n            logger.error(f\"Error dropping database: {str(e)}\")\n            raise\n    \n    def backup_database(self, backup_path: str):\n        \"\"\"Create database backup using mongodump\"\"\"\n        import subprocess\n        \n        try:\n            cmd = [\n                'mongodump',\n                '--host', f\"{self.config.host}:{self.config.port}\",\n                '--db', self.config.database_name,\n                '--out', backup_path\n            ]\n            \n            if self.config.username:\n                cmd.extend(['--username', self.config.username])\n            \n            if self.config.password:\n                cmd.extend(['--password', self.config.password])\n            \n            if self.config.auth_source:\n                cmd.extend(['--authenticationDatabase', self.config.auth_source])\n            \n            result = subprocess.run(cmd, capture_output=True, text=True)\n            \n            if result.returncode == 0:\n                logger.info(f\"Database backup created successfully: {backup_path}\")\n            else:\n                logger.error(f\"Database backup failed: {result.stderr}\")\n                raise Exception(f\"Backup failed: {result.stderr}\")\n                \n        except FileNotFoundError:\n            logger.error(\"mongodump command not found. Please install MongoDB tools.\")\n            raise\n        except Exception as e:\n            logger.error(f\"Error creating database backup: {str(e)}\")\n            raise\n    \n    def restore_database(self, backup_path: str):\n        \"\"\"Restore database from backup using mongorestore\"\"\"\n        import subprocess\n        \n        try:\n            cmd = [\n                'mongorestore',\n                '--host', f\"{self.config.host}:{self.config.port}\",\n                '--db', self.config.database_name,\n                '--drop',  # Drop existing collections before restore\n                backup_path\n            ]\n            \n            if self.config.username:\n                cmd.extend(['--username', self.config.username])\n            \n            if self.config.password:\n                cmd.extend(['--password', self.config.password])\n            \n            if self.config.auth_source:\n                cmd.extend(['--authenticationDatabase', self.config.auth_source])\n            \n            result = subprocess.run(cmd, capture_output=True, text=True)\n            \n            if result.returncode == 0:\n                logger.info(f\"Database restored successfully from: {backup_path}\")\n            else:\n                logger.error(f\"Database restore failed: {result.stderr}\")\n                raise Exception(f\"Restore failed: {result.stderr}\")\n                \n        except FileNotFoundError:\n            logger.error(\"mongorestore command not found. Please install MongoDB tools.\")\n            raise\n        except Exception as e:\n            logger.error(f\"Error restoring database: {str(e)}\")\n            raise\n    \n    def get_client(self):\n        \"\"\"Get PyMongo client\"\"\"\n        if self._connected:\n            return connection.get_connection()\n        return None\n    \n    def get_database(self):\n        \"\"\"Get database instance\"\"\"\n        if self._connected:\n            client = connection.get_connection()\n            return client[self.config.database_name]\n        return None\n    \n    def is_connected(self) -> bool:\n        \"\"\"Check if connected to MongoDB\"\"\"\n        return self._connected"
      }
    },
    "pytest": {
      "structure": "├── components/\n│   └── test.py\n├── main.py\n├── requirements.txt\n├── run_tests.py\n└── template.yaml\n",
      "files": {
        "main.py": "#!/usr/bin/env python3\n\"\"\"\n{{ project_name }} - Testing Framework\nCreated by {{ generator }} at {{ timestamp }}\n\nMain entry point for running tests and test management.\n\"\"\"\n\nimport os\nimport sys\nimport logging\nimport pytest\nfrom pathlib import Path\n\n# Add src to Python path\nsys.path.append(str(Path(__file__).parent / \"src\"))\n\nfrom src.utils.logger import setup_logging\n\ndef main():\n    \"\"\"Main testing function\"\"\"\n    # Setup logging\n    setup_logging()\n    logger = logging.getLogger(__name__)\n    \n    try:\n        logger.info(\"🧪 Starting {{ project_name }} Test Suite\")\n        \n        # Default test configuration\n        test_args = [\n            'tests/',\n            '-v',\n            '--tb=short',\n            '--color=yes',\n            '--durations=10'\n        ]\n        \n        # Add coverage if requested\n        if '--coverage' in sys.argv:\n            test_args.extend([\n                '--cov=src',\n                '--cov-report=html',\n                '--cov-report=term-missing'\n            ])\n        \n        # Add specific test file if provided\n        if len(sys.argv) > 1 and not sys.argv[1].startswith('--'):\n            test_file = sys.argv[1]\n            test_args = [test_file] + test_args[1:]\n        \n        logger.info(f\"🚀 Running tests with args: {' '.join(test_args)}\")\n        \n        # Run pytest\n        exit_code = pytest.main(test_args)\n        \n        if exit_code == 0:\n            logger.info(\"✅ All tests passed!\")\n        else:\n            logger.error(f\"❌ Some tests failed (exit code: {exit_code})\")\n        \n        return exit_code\n        \n    except Exception as e:\n        logger.error(f\"❌ Test execution error: {str(e)}\")\n        return 1\n\nif __name__ == \"__main__\":\n    sys.exit(main())",
        "requirements.txt": "# {{ project_name }} - Testing Dependencies\n# Generated by {{ generator }} at {{ timestamp }}\n\n# Core testing framework\npytest>=7.4.0\npytest-cov>=4.1.0\npytest-html>=3.2.0\npytest-xdist>=3.3.0\n\n# Test utilities\npytest-mock>=3.11.0\npytest-asyncio>=0.21.0\npytest-timeout>=2.1.0\npytest-benchmark>=4.0.0\npytest-randomly>=3.13.0\n\n# Fixtures and factories\nfactory-boy>=3.3.0\nfaker>=19.6.0\nfreezegun>=1.2.0\n\n# API testing\nrequests>=2.31.0\nresponses>=0.23.0\nhttpx>=0.24.0\n\n# Database testing\npytest-postgresql>=5.0.0\npytest-mysql>=2.3.0\nsqlalchemy-utils>=0.41.0\n\n# Mocking and stubbing\nunittest-mock>=1.0.1\npytest-stub>=1.1.0\nresponses>=0.23.0\n\n# Performance testing\npytest-benchmark>=4.0.0\nmemory-profiler>=0.61.0\n\n# Code quality\npytest-flake8>=1.1.0\npytest-mypy>=0.10.0\npytest-black>=0.3.0\npytest-isort>=3.1.0\n\n# Reporting\npytest-json-report>=1.5.0\npytest-junit>=0.8.0\nallure-pytest>=2.13.0\n\n# Utilities\npython-dotenv>=1.0.0\npyyaml>=6.0.0\nclick>=8.1.0\nrich>=13.5.0\n\n# Development\nipython>=8.14.0\njupyter>=1.0.0\n\n# Documentation testing\npytest-doctestplus>=1.0.0\n\n# Security testing\nbandit>=1.7.5\nsafety>=2.3.5\n\n# Load testing (optional)\nlocust>=2.16.0\n\n# Contract testing (optional)\npact-python>=2.0.0",
        "run_tests.py": "#!/usr/bin/env python3\n\"\"\"\nTest runner with advanced options for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\"\"\"\n\nimport argparse\nimport sys\nimport subprocess\nimport logging\nfrom pathlib import Path\n\ndef parse_args():\n    \"\"\"Parse command line arguments\"\"\"\n    parser = argparse.ArgumentParser(description=\"Advanced test runner for {{ project_name }}\")\n    \n    parser.add_argument(\n        'test_path',\n        nargs='?',\n        default='tests/',\n        help=\"Path to test file or directory\"\n    )\n    parser.add_argument(\n        '--coverage',\n        action='store_true',\n        help=\"Run tests with coverage reporting\"\n    )\n    parser.add_argument(\n        '--unit',\n        action='store_true',\n        help=\"Run only unit tests\"\n    )\n    parser.add_argument(\n        '--integration',\n        action='store_true',\n        help=\"Run only integration tests\"\n    )\n    parser.add_argument(\n        '--e2e',\n        action='store_true',\n        help=\"Run only end-to-end tests\"\n    )\n    parser.add_argument(\n        '--parallel',\n        type=int,\n        help=\"Number of parallel workers\"\n    )\n    parser.add_argument(\n        '--markers',\n        type=str,\n        help=\"Run tests with specific markers\"\n    )\n    parser.add_argument(\n        '--verbose',\n        action='store_true',\n        help=\"Verbose output\"\n    )\n    parser.add_argument(\n        '--quiet',\n        action='store_true',\n        help=\"Quiet output\"\n    )\n    parser.add_argument(\n        '--html-report',\n        action='store_true',\n        help=\"Generate HTML test report\"\n    )\n    parser.add_argument(\n        '--junit-xml',\n        type=str,\n        help=\"Generate JUnit XML report\"\n    )\n    \n    return parser.parse_args()\n\ndef build_pytest_command(args):\n    \"\"\"Build pytest command from arguments\"\"\"\n    \n    cmd = ['python', '-m', 'pytest']\n    \n    # Test path\n    if args.unit:\n        cmd.append('tests/unit/')\n    elif args.integration:\n        cmd.append('tests/integration/')\n    elif args.e2e:\n        cmd.append('tests/e2e/')\n    else:\n        cmd.append(args.test_path)\n    \n    # Verbosity\n    if args.verbose:\n        cmd.append('-v')\n    elif args.quiet:\n        cmd.append('-q')\n    else:\n        cmd.append('-v')  # Default to verbose\n    \n    # Coverage\n    if args.coverage:\n        cmd.extend([\n            '--cov=src',\n            '--cov-report=html:htmlcov',\n            '--cov-report=term-missing',\n            '--cov-report=xml'\n        ])\n    \n    # Parallel execution\n    if args.parallel:\n        cmd.extend(['-n', str(args.parallel)])\n    \n    # Markers\n    if args.markers:\n        cmd.extend(['-m', args.markers])\n    \n    # Reports\n    if args.html_report:\n        cmd.extend(['--html=reports/test_report.html', '--self-contained-html'])\n    \n    if args.junit_xml:\n        cmd.extend(['--junit-xml', args.junit_xml])\n    \n    # Additional options\n    cmd.extend([\n        '--tb=short',\n        '--color=yes',\n        '--durations=10'\n    ])\n    \n    return cmd\n\ndef main():\n    \"\"\"Main test runner function\"\"\"\n    \n    args = parse_args()\n    \n    # Setup logging\n    logging.basicConfig(\n        level=logging.INFO,\n        format='%(asctime)s - %(levelname)s - %(message)s'\n    )\n    logger = logging.getLogger(__name__)\n    \n    try:\n        # Build pytest command\n        cmd = build_pytest_command(args)\n        \n        logger.info(\"🧪 Starting {{ project_name }} Test Suite\")\n        logger.info(f\"🚀 Command: {' '.join(cmd)}\")\n        \n        # Create reports directory if needed\n        reports_dir = Path('reports')\n        reports_dir.mkdir(exist_ok=True)\n        \n        # Run tests\n        result = subprocess.run(cmd, capture_output=False)\n        \n        # Log results\n        if result.returncode == 0:\n            logger.info(\"✅ All tests passed!\")\n        else:\n            logger.error(f\"❌ Some tests failed (exit code: {result.returncode})\")\n        \n        # Coverage report location\n        if args.coverage:\n            logger.info(\"📊 Coverage report generated: htmlcov/index.html\")\n        \n        # HTML report location\n        if args.html_report:\n            logger.info(\"📋 HTML test report: reports/test_report.html\")\n        \n        return result.returncode\n        \n    except FileNotFoundError:\n        logger.error(\"❌ pytest not found. Please install pytest: pip install pytest\")\n        return 1\n    except Exception as e:\n        logger.error(f\"❌ Test execution error: {str(e)}\")\n        return 1\n\nif __name__ == \"__main__\":\n    sys.exit(main())",
        "template.yaml": "name: \"python-pytest\"\nversion: \"1.0.0\"\ndescription: \"قالب شامل لمشاريع اختبار Python مع pytest\"\nlanguage: \"python\"\nframework: \"pytest\"\n\nstructure:\n  directories:\n    - \"src\"\n    - \"tests\"\n    - \"tests/unit\"\n    - \"tests/integration\"\n    - \"tests/e2e\"\n    - \"tests/fixtures\"\n    - \"tests/utils\"\n    - \"config\"\n    - \"docs\"\n    - \"scripts\"\n\n  files:\n    - path: \"main.py\"\n      template: \"python/pytest/main.py\"\n      type: \"template\"\n    \n    - path: \"run_tests.py\"\n      template: \"python/pytest/run_tests.py\"\n      type: \"template\"\n    \n    - path: \"requirements.txt\"\n      template: \"python/pytest/requirements.txt\"\n      type: \"template\"\n    \n    - path: \"pytest.ini\"\n      template: \"python/pytest/pytest.ini\"\n      type: \"template\"\n    \n    - path: \"conftest.py\"\n      template: \"python/pytest/conftest.py\"\n      type: \"template\"\n    \n    - path: \"src/__init__.py\"\n      content: \"# {{ project_name }} Testing Package\\n__version__ = '1.0.0'\\n\"\n      type: \"content\"\n    \n    - path: \"tests/__init__.py\"\n      content: \"# {{ project_name }} Tests\\n\"\n      type: \"content\"\n    \n    - path: \".gitignore\"\n      template: \"python/common/gitignore\"\n      type: \"template\"\n\nassets: []\n\npost_tasks:\n  - type: \"gitinit\"\n  - type: \"create_venv\"\n\ncomponents:\n  test:\n    template: \"python/pytest/components/test.py\"\n    path: \"tests/{{component_name|lower}}/test_{{component_name|lower}}.py\"\n  \n  fixture:\n    template: \"python/pytest/components/fixture.py\"\n    path: \"tests/fixtures/{{component_name|lower}}_fixtures.py\"\n  \n  mock:\n    template: \"python/pytest/components/mock.py\"\n    path: \"tests/utils/{{component_name|lower}}_mocks.py\"",
        "components/test.py": "#!/usr/bin/env python3\n\"\"\"\n{{ component_name }} tests for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\"\"\"\n\nimport pytest\nimport unittest\nfrom unittest.mock import Mock, patch, MagicMock\nfrom typing import Any, Dict, List\n\n# Import the module under test\n# from src.{{ module_name }} import {{ component_name|title }}\n\nclass Test{{ component_name|title }}:\n    \"\"\"\n    Test suite for {{ component_name|title }}\n    \n    This test class contains unit tests for the {{ component_name }} component.\n    \"\"\"\n    \n    def setup_method(self, method):\n        \"\"\"Setup method called before each test\"\"\"\n        # Initialize test data and mocks\n        self.test_data = {\n            'sample_key': 'sample_value',\n            'number': 42,\n            'list': [1, 2, 3]\n        }\n        \n        # Setup mock objects if needed\n        self.mock_dependency = Mock()\n        \n        # Initialize the component under test\n        # self.component = {{ component_name|title }}()\n    \n    def teardown_method(self, method):\n        \"\"\"Teardown method called after each test\"\"\"\n        # Clean up test data\n        pass\n    \n    def test_{{ component_name }}_initialization(self):\n        \"\"\"Test {{ component_name }} initialization\"\"\"\n        # Arrange\n        # expected_value = \"expected\"\n        \n        # Act\n        # result = self.component.some_method()\n        \n        # Assert\n        # assert result == expected_value\n        assert True  # Placeholder assertion\n    \n    def test_{{ component_name }}_basic_functionality(self):\n        \"\"\"Test basic functionality of {{ component_name }}\"\"\"\n        # Arrange\n        input_data = {'test': 'data'}\n        \n        # Act\n        # result = self.component.process(input_data)\n        \n        # Assert\n        # assert result is not None\n        # assert isinstance(result, dict)\n        assert True  # Placeholder assertion\n    \n    def test_{{ component_name }}_edge_cases(self):\n        \"\"\"Test edge cases for {{ component_name }}\"\"\"\n        # Test with None input\n        # result = self.component.process(None)\n        # assert result is None\n        \n        # Test with empty input\n        # result = self.component.process({})\n        # assert result == {}\n        \n        assert True  # Placeholder assertion\n    \n    def test_{{ component_name }}_error_handling(self):\n        \"\"\"Test error handling in {{ component_name }}\"\"\"\n        # Test that appropriate exceptions are raised\n        # with pytest.raises(ValueError):\n        #     self.component.process(\"invalid_input\")\n        \n        assert True  # Placeholder assertion\n    \n    @pytest.mark.parametrize(\"input_value,expected\", [\n        (\"test1\", \"result1\"),\n        (\"test2\", \"result2\"),\n        (\"test3\", \"result3\"),\n    ])\n    def test_{{ component_name }}_parametrized(self, input_value, expected):\n        \"\"\"Parametrized test for {{ component_name }}\"\"\"\n        # Act\n        # result = self.component.transform(input_value)\n        \n        # Assert\n        # assert result == expected\n        assert True  # Placeholder assertion\n    \n    @pytest.mark.slow\n    def test_{{ component_name }}_performance(self):\n        \"\"\"Test performance characteristics of {{ component_name }}\"\"\"\n        import time\n        \n        # Arrange\n        large_dataset = list(range(1000))\n        \n        # Act\n        start_time = time.time()\n        # result = self.component.bulk_process(large_dataset)\n        end_time = time.time()\n        \n        # Assert\n        execution_time = end_time - start_time\n        assert execution_time < 1.0  # Should complete within 1 second\n    \n    @patch('src.{{ module_name or component_name }}.external_service')\n    def test_{{ component_name }}_with_mocked_dependency(self, mock_service):\n        \"\"\"Test {{ component_name }} with mocked external dependency\"\"\"\n        # Arrange\n        mock_service.return_value = \"mocked_response\"\n        \n        # Act\n        # result = self.component.method_using_external_service()\n        \n        # Assert\n        # assert result == \"processed_mocked_response\"\n        # mock_service.assert_called_once()\n        assert True  # Placeholder assertion\n    \n    def test_{{ component_name }}_async_method(self):\n        \"\"\"Test async methods in {{ component_name }}\"\"\"\n        import asyncio\n        \n        async def async_test():\n            # Act\n            # result = await self.component.async_method()\n            \n            # Assert\n            # assert result is not None\n            pass\n        \n        # Run async test\n        asyncio.run(async_test())\n    \n    @pytest.fixture\n    def sample_data(self):\n        \"\"\"Fixture providing sample data for tests\"\"\"\n        return {\n            'id': 1,\n            'name': 'Test {{ component_name|title }}',\n            'data': [1, 2, 3, 4, 5]\n        }\n    \n    def test_{{ component_name }}_with_fixture(self, sample_data):\n        \"\"\"Test {{ component_name }} using fixture data\"\"\"\n        # Act\n        # result = self.component.process_data(sample_data)\n        \n        # Assert\n        # assert result['processed'] == True\n        # assert len(result['data']) == len(sample_data['data'])\n        assert True  # Placeholder assertion\n\n# Integration tests\nclass TestIntegration{{ component_name|title }}:\n    \"\"\"Integration tests for {{ component_name|title }}\"\"\"\n    \n    @pytest.mark.integration\n    def test_{{ component_name }}_integration(self):\n        \"\"\"Test integration between {{ component_name }} and other components\"\"\"\n        # Test full workflow integration\n        assert True  # Placeholder assertion\n    \n    @pytest.mark.integration\n    @pytest.mark.database\n    def test_{{ component_name }}_database_integration(self):\n        \"\"\"Test {{ component_name }} with database\"\"\"\n        # Test database operations\n        assert True  # Placeholder assertion\n\n# Performance tests\nclass TestPerformance{{ component_name|title }}:\n    \"\"\"Performance tests for {{ component_name|title }}\"\"\"\n    \n    @pytest.mark.benchmark\n    def test_{{ component_name }}_benchmark(self, benchmark):\n        \"\"\"Benchmark {{ component_name }} performance\"\"\"\n        # result = benchmark(self.component.expensive_operation)\n        # assert result is not None\n        pass\n\n# Property-based tests (if using hypothesis)\n# @pytest.mark.hypothesis\n# class TestProperty{{ component_name|title }}:\n#     \"\"\"Property-based tests for {{ component_name|title }}\"\"\"\n#     \n#     @given(st.text())\n#     def test_{{ component_name }}_property(self, text_input):\n#         \"\"\"Property-based test for {{ component_name }}\"\"\"\n#         # assume(len(text_input) > 0)\n#         # result = self.component.process_text(text_input)\n#         # assert isinstance(result, str)\n#         pass"
      }
    },
    "sqlalchemy": {
      "structure": "├── .env.example\n├── components/\n│   ├── model.py\n│   └── repository.py\n├── config/\n│   └── database.py\n├── database.py\n├── main.py\n├── requirements.txt\n├── src/\n│   └── database/\n│       ├── base.py\n│       └── connection.py\n└── template.yaml\n",
      "files": {
        ".env.example": "# {{ project_name }} Environment Configuration\n# Generated by {{ generator }} at {{ timestamp }}\n\n# Database Configuration\nDATABASE_TYPE=sqlite\n# Options: sqlite, postgresql, mysql, oracle, mssql\n\n# SQLite Configuration (if using SQLite)\nDATABASE_PATH=data/{{ project_name }}.db\n\n# PostgreSQL Configuration (if using PostgreSQL)\n# DATABASE_TYPE=postgresql\n# DATABASE_HOST=localhost\n# DATABASE_PORT=5432\n# DATABASE_NAME={{ project_name }}_db\n# DATABASE_USER=postgres\n# DATABASE_PASSWORD=password\n\n# MySQL Configuration (if using MySQL)\n# DATABASE_TYPE=mysql\n# DATABASE_HOST=localhost\n# DATABASE_PORT=3306\n# DATABASE_NAME={{ project_name }}_db\n# DATABASE_USER=root\n# DATABASE_PASSWORD=password\n\n# SQLAlchemy Settings\nDATABASE_ECHO=False\nENVIRONMENT=development\n\n# Connection Pool Settings\nDATABASE_POOL_SIZE=5\nDATABASE_MAX_OVERFLOW=10\nDATABASE_POOL_TIMEOUT=30\n\n# Application Settings\nSECRET_KEY=your-secret-key-here\nDEBUG=True\nLOG_LEVEL=INFO\n\n# Optional: External Services\n# REDIS_URL=redis://localhost:6379/0\n# CELERY_BROKER_URL=redis://localhost:6379/0",
        "database.py": "#!/usr/bin/env python3\n\"\"\"\nDatabase setup and utilities for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\nStandalone database management script.\n\"\"\"\n\nimport argparse\nimport sys\nimport logging\nfrom pathlib import Path\n\n# Add src to Python path\nsys.path.append(str(Path(__file__).parent / \"src\"))\n\nfrom src.database.connection import DatabaseManager\nfrom src.utils.logger import setup_logging\nfrom config.database import DatabaseConfig\n\ndef parse_args():\n    \"\"\"Parse command line arguments\"\"\"\n    parser = argparse.ArgumentParser(description=\"Database management for {{ project_name }}\")\n    \n    parser.add_argument(\n        \"command\",\n        choices=[\"create\", \"drop\", \"migrate\", \"seed\", \"reset\", \"test\"],\n        help=\"Database command to execute\"\n    )\n    parser.add_argument(\n        \"--force\",\n        action=\"store_true\",\n        help=\"Force operation without confirmation\"\n    )\n    parser.add_argument(\n        \"--verbose\",\n        action=\"store_true\",\n        help=\"Verbose output\"\n    )\n    \n    return parser.parse_args()\n\ndef main():\n    \"\"\"Main database management function\"\"\"\n    args = parse_args()\n    \n    # Setup logging\n    setup_logging()\n    logger = logging.getLogger(__name__)\n    \n    try:\n        # Initialize database\n        config = DatabaseConfig()\n        db_manager = DatabaseManager(config)\n        \n        if args.command == \"create\":\n            logger.info(\"📋 Creating database tables...\")\n            db_manager.create_all_tables()\n            logger.info(\"✅ Tables created successfully!\")\n        \n        elif args.command == \"drop\":\n            if not args.force:\n                confirm = input(\"⚠️  This will delete all data. Are you sure? (y/N): \")\n                if confirm.lower() != 'y':\n                    logger.info(\"Operation cancelled\")\n                    return\n            \n            logger.info(\"🗑️  Dropping database tables...\")\n            db_manager.drop_all_tables()\n            logger.info(\"✅ Tables dropped successfully!\")\n        \n        elif args.command == \"migrate\":\n            logger.info(\"🔄 Running database migrations...\")\n            # Here you would integrate with Alembic\n            logger.info(\"⚠️  Migration feature requires Alembic integration\")\n        \n        elif args.command == \"seed\":\n            logger.info(\"🌱 Seeding database with sample data...\")\n            db_manager.seed_database()\n            logger.info(\"✅ Database seeded successfully!\")\n        \n        elif args.command == \"reset\":\n            if not args.force:\n                confirm = input(\"⚠️  This will reset all data. Are you sure? (y/N): \")\n                if confirm.lower() != 'y':\n                    logger.info(\"Operation cancelled\")\n                    return\n            \n            logger.info(\"🔄 Resetting database...\")\n            db_manager.reset_database()\n            logger.info(\"✅ Database reset successfully!\")\n        \n        elif args.command == \"test\":\n            logger.info(\"🧪 Testing database connection...\")\n            if db_manager.test_connection():\n                logger.info(\"✅ Database connection test passed!\")\n            else:\n                logger.error(\"❌ Database connection test failed!\")\n                sys.exit(1)\n        \n    except Exception as e:\n        logger.error(f\"❌ Database operation failed: {str(e)}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()",
        "main.py": "#!/usr/bin/env python3\n\"\"\"\n{{ project_name }} - SQLAlchemy Application\nCreated by {{ generator }} at {{ timestamp }}\n\nMain entry point for SQLAlchemy database application.\n\"\"\"\n\nimport os\nimport sys\nimport logging\nfrom pathlib import Path\n\n# Add src to Python path\nsys.path.append(str(Path(__file__).parent / \"src\"))\n\nfrom src.database.connection import DatabaseManager\nfrom src.database.base import Base\nfrom src.utils.logger import setup_logging\nfrom config.database import DatabaseConfig\n\ndef main():\n    \"\"\"Main application function\"\"\"\n    # Setup logging\n    setup_logging()\n    logger = logging.getLogger(__name__)\n    \n    try:\n        logger.info(\"🚀 Starting {{ project_name }} SQLAlchemy Application\")\n        \n        # Initialize database configuration\n        config = DatabaseConfig()\n        logger.info(f\"📊 Database URL: {config.get_database_url()}\")\n        \n        # Initialize database manager\n        db_manager = DatabaseManager(config)\n        \n        # Create all tables\n        logger.info(\"📋 Creating database tables...\")\n        db_manager.create_all_tables()\n        \n        # Test database connection\n        logger.info(\"🔍 Testing database connection...\")\n        if db_manager.test_connection():\n            logger.info(\"✅ Database connection successful!\")\n        else:\n            logger.error(\"❌ Database connection failed!\")\n            return\n        \n        # Example usage - you can modify this section\n        with db_manager.get_session() as session:\n            logger.info(\"📊 Database session created successfully\")\n            \n            # Add your application logic here\n            # Example:\n            # from src.models.user import User\n            # new_user = User(name=\"John Doe\", email=\"john@example.com\")\n            # session.add(new_user)\n            # session.commit()\n            \n            logger.info(\"💾 Application logic completed\")\n        \n        logger.info(\"✅ {{ project_name }} application completed successfully!\")\n        \n    except Exception as e:\n        logger.error(f\"❌ Application error: {str(e)}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()",
        "requirements.txt": "# {{ project_name }} - SQLAlchemy Dependencies\n# Generated by {{ generator }} at {{ timestamp }}\n\n# Core SQLAlchemy\nsqlalchemy>=2.0.0\nalembic>=1.12.0\n\n# Database drivers\npsycopg2-binary>=2.9.0    # PostgreSQL\nPyMySQL>=1.1.0            # MySQL\nsqlite3                   # SQLite (built-in)\n\n# Connection pooling and async support\nasyncpg>=0.28.0           # Async PostgreSQL\naiomysql>=0.2.0           # Async MySQL\naiosqlite>=0.19.0         # Async SQLite\n\n# ORM utilities\nsqlalchemy-utils>=0.41.0\nsqlalchemy-serializer>=1.4.0\n\n# Validation and serialization\npydantic>=2.0.0\nmarshmallow>=3.20.0\nmarshmallow-sqlalchemy>=0.29.0\n\n# Configuration management\npython-dotenv>=1.0.0\npyyaml>=6.0.0\nconfigparser>=6.0.0\n\n# Utilities\nclick>=8.1.0\ntqdm>=4.65.0\nrich>=13.5.0\n\n# Development tools\nipython>=8.14.0\njupyter>=1.0.0\n\n# Testing\npytest>=7.4.0\npytest-asyncio>=0.21.0\npytest-cov>=4.1.0\nfactory-boy>=3.3.0\n\n# Database testing\npytest-postgresql>=5.0.0\npytest-mysql>=2.3.0\n\n# Code quality\nblack>=23.7.0\nflake8>=6.0.0\nisort>=5.12.0\nmypy>=1.5.0\n\n# Documentation\nsphinx>=7.1.0\nsphinx-rtd-theme>=1.3.0\n\n# Performance monitoring\nsqlalchemy-debug>=0.1.0\nmemory-profiler>=0.61.0\n\n# Migration tools\nalembic>=1.12.0\nsqlalchemy-migrate>=0.13.0\n\n# Data validation\ncerberus>=1.3.0\nschema>=0.7.0\n\n# Async support\nasyncio>=3.4.3\naiofiles>=23.2.0\n\n# Caching (optional)\nredis>=5.0.0\nmemcached>=1.62\n\n# Monitoring (optional)\nprometheus-client>=0.17.0\nstatsd>=4.0.0",
        "template.yaml": "name: \"python-sqlalchemy\"\nversion: \"1.0.0\"\ndescription: \"قالب شامل لمشاريع SQLAlchemy وقواعد البيانات\"\nlanguage: \"python\"\nframework: \"sqlalchemy\"\n\nstructure:\n  directories:\n    - \"src\"\n    - \"src/models\"\n    - \"src/database\"\n    - \"src/migrations\"\n    - \"src/utils\"\n    - \"src/services\"\n    - \"src/repositories\"\n    - \"config\"\n    - \"tests\"\n    - \"scripts\"\n    - \"docs\"\n\n  files:\n    - path: \"main.py\"\n      template: \"python/sqlalchemy/main.py\"\n      type: \"template\"\n    \n    - path: \"database.py\"\n      template: \"python/sqlalchemy/database.py\"\n      type: \"template\"\n    \n    - path: \"requirements.txt\"\n      template: \"python/sqlalchemy/requirements.txt\"\n      type: \"template\"\n    \n    - path: \"alembic.ini\"\n      template: \"python/sqlalchemy/alembic.ini\"\n      type: \"template\"\n    \n    - path: \"config/database.py\"\n      template: \"python/sqlalchemy/config/database.py\"\n      type: \"template\"\n    \n    - path: \"src/__init__.py\"\n      content: \"# {{ project_name }} SQLAlchemy Package\\n__version__ = '1.0.0'\\n\"\n      type: \"content\"\n    \n    - path: \".env.example\"\n      template: \"python/sqlalchemy/env.example\"\n      type: \"template\"\n    \n    - path: \".gitignore\"\n      template: \"python/common/gitignore\"\n      type: \"template\"\n\nassets: []\n\npost_tasks:\n  - type: \"gitinit\"\n  - type: \"create_venv\"\n\ncomponents:\n  model:\n    template: \"python/sqlalchemy/components/model.py\"\n    path: \"src/models/{{component_name|lower}}.py\"\n  \n  repository:\n    template: \"python/sqlalchemy/components/repository.py\"\n    path: \"src/repositories/{{component_name|lower}}_repository.py\"\n  \n  service:\n    template: \"python/sqlalchemy/components/service.py\"\n    path: \"src/services/{{component_name|lower}}_service.py\"\n  \n  migration:\n    template: \"python/sqlalchemy/components/migration.py\"\n    path: \"src/migrations/{{component_name|lower}}_migration.py\"",
        "components/model.py": "#!/usr/bin/env python3\n\"\"\"\n{{ component_name }} model for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\"\"\"\n\nfrom sqlalchemy import Column, Integer, String, DateTime, Text, Boolean, ForeignKey\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql import func\nfrom src.database.base import BaseModel\n\nclass {{ component_name|title }}(BaseModel):\n    \"\"\"\n    {{ component_name|title }} model for {{ project_name }}\n    \n    This model represents {{ component_name }} entities in the database.\n    Customize the fields below according to your requirements.\n    \"\"\"\n    \n    __tablename__ = '{{ component_name|lower }}s'\n    \n    # Basic fields - customize as needed\n    name = Column(String(255), nullable=False, index=True)\n    description = Column(Text, nullable=True)\n    is_active = Column(Boolean, default=True, nullable=False)\n    \n    # Add your custom fields here\n    # Example fields:\n    # email = Column(String(255), unique=True, index=True)\n    # phone = Column(String(20), nullable=True)\n    # address = Column(Text, nullable=True)\n    \n    # Relationships - uncomment and modify as needed\n    # Example one-to-many relationship:\n    # category_id = Column(Integer, ForeignKey('categories.id'), nullable=True)\n    # category = relationship(\"Category\", back_populates=\"{{ component_name|lower }}s\")\n    \n    # Example many-to-many relationship:\n    # tags = relationship(\"Tag\", secondary=\"{{ component_name|lower }}_tags\", back_populates=\"{{ component_name|lower }}s\")\n    \n    def __repr__(self):\n        \"\"\"String representation of the model\"\"\"\n        return f\"<{{ component_name|title }}(id={self.id}, name='{self.name}')>\"\n    \n    def to_dict(self, include_relationships=False):\n        \"\"\"\n        Convert model to dictionary\n        \n        Args:\n            include_relationships: Whether to include relationship data\n            \n        Returns:\n            Dictionary representation of the model\n        \"\"\"\n        result = super().to_dict()\n        \n        if include_relationships:\n            # Add relationship data here if needed\n            # Example:\n            # result['category'] = self.category.to_dict() if self.category else None\n            # result['tags'] = [tag.to_dict() for tag in self.tags]\n            pass\n        \n        return result\n    \n    @classmethod\n    def get_by_name(cls, session, name: str):\n        \"\"\"Get {{ component_name }} by name\"\"\"\n        return session.query(cls).filter(cls.name == name).first()\n    \n    @classmethod\n    def get_active(cls, session):\n        \"\"\"Get all active {{ component_name|lower }}s\"\"\"\n        return session.query(cls).filter(cls.is_active == True).all()\n    \n    @classmethod\n    def search_by_name(cls, session, search_term: str):\n        \"\"\"Search {{ component_name|lower }}s by name\"\"\"\n        return session.query(cls).filter(\n            cls.name.ilike(f'%{search_term}%')\n        ).all()\n    \n    def activate(self, session):\n        \"\"\"Activate this {{ component_name|lower }}\"\"\"\n        self.is_active = True\n        session.commit()\n    \n    def deactivate(self, session):\n        \"\"\"Deactivate this {{ component_name|lower }}\"\"\"\n        self.is_active = False\n        session.commit()\n    \n    @classmethod\n    def create_with_validation(cls, session, **kwargs):\n        \"\"\"\n        Create new {{ component_name|lower }} with validation\n        \n        Args:\n            session: Database session\n            **kwargs: Model fields\n            \n        Returns:\n            Created {{ component_name|lower }} instance\n            \n        Raises:\n            ValueError: If validation fails\n        \"\"\"\n        # Validation logic\n        name = kwargs.get('name')\n        if not name or len(name.strip()) == 0:\n            raise ValueError(\"Name is required\")\n        \n        if len(name) > 255:\n            raise ValueError(\"Name must be 255 characters or less\")\n        \n        # Check for duplicates\n        existing = cls.get_by_name(session, name)\n        if existing:\n            raise ValueError(f\"{{ component_name|title }} with name '{name}' already exists\")\n        \n        # Create instance\n        instance = cls(**kwargs)\n        return instance.save(session)\n    \n    def update_with_validation(self, session, **kwargs):\n        \"\"\"\n        Update {{ component_name|lower }} with validation\n        \n        Args:\n            session: Database session\n            **kwargs: Fields to update\n        \"\"\"\n        # Validation logic\n        if 'name' in kwargs:\n            name = kwargs['name']\n            if not name or len(name.strip()) == 0:\n                raise ValueError(\"Name is required\")\n            \n            if len(name) > 255:\n                raise ValueError(\"Name must be 255 characters or less\")\n            \n            # Check for duplicates (excluding current instance)\n            existing = session.query(self.__class__).filter(\n                self.__class__.name == name,\n                self.__class__.id != self.id\n            ).first()\n            \n            if existing:\n                raise ValueError(f\"{{ component_name|title }} with name '{name}' already exists\")\n        \n        # Update fields\n        self.update_from_dict(kwargs)\n        session.commit()\n        \n        return self\n\n# Association table for many-to-many relationships (example)\n# Uncomment and modify as needed:\n#\n# from sqlalchemy import Table\n# \n# {{ component_name|lower }}_tags = Table(\n#     '{{ component_name|lower }}_tags',\n#     BaseModel.metadata,\n#     Column('{{ component_name|lower }}_id', Integer, ForeignKey('{{ component_name|lower }}s.id'), primary_key=True),\n#     Column('tag_id', Integer, ForeignKey('tags.id'), primary_key=True)\n# )",
        "components/repository.py": "#!/usr/bin/env python3\n\"\"\"\n{{ component_name }} repository for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\"\"\"\n\nfrom typing import List, Optional, Dict, Any\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy import and_, or_, desc, asc\nfrom src.models.{{ component_name|lower }} import {{ component_name|title }}\n\nclass {{ component_name|title }}Repository:\n    \"\"\"\n    Repository pattern implementation for {{ component_name|title }} model\n    \n    Encapsulates database operations and complex queries for {{ component_name|title }} entities.\n    \"\"\"\n    \n    def __init__(self, session: Session):\n        \"\"\"Initialize repository with database session\"\"\"\n        self.session = session\n        self.model = {{ component_name|title }}\n    \n    def create(self, **kwargs) -> {{ component_name|title }}:\n        \"\"\"\n        Create new {{ component_name|lower }}\n        \n        Args:\n            **kwargs: Model fields\n            \n        Returns:\n            Created {{ component_name|lower }} instance\n        \"\"\"\n        return self.model.create_with_validation(self.session, **kwargs)\n    \n    def get_by_id(self, {{ component_name|lower }}_id: int) -> Optional[{{ component_name|title }}]:\n        \"\"\"\n        Get {{ component_name|lower }} by ID\n        \n        Args:\n            {{ component_name|lower }}_id: {{ component_name|title }} ID\n            \n        Returns:\n            {{ component_name|title }} instance or None\n        \"\"\"\n        return self.session.query(self.model).filter(self.model.id == {{ component_name|lower }}_id).first()\n    \n    def get_by_name(self, name: str) -> Optional[{{ component_name|title }}]:\n        \"\"\"\n        Get {{ component_name|lower }} by name\n        \n        Args:\n            name: {{ component_name|title }} name\n            \n        Returns:\n            {{ component_name|title }} instance or None\n        \"\"\"\n        return self.session.query(self.model).filter(self.model.name == name).first()\n    \n    def get_all(self, limit: Optional[int] = None, offset: Optional[int] = None) -> List[{{ component_name|title }}]:\n        \"\"\"\n        Get all {{ component_name|lower }}s\n        \n        Args:\n            limit: Maximum number of results\n            offset: Number of results to skip\n            \n        Returns:\n            List of {{ component_name|title }} instances\n        \"\"\"\n        query = self.session.query(self.model)\n        \n        if offset:\n            query = query.offset(offset)\n        \n        if limit:\n            query = query.limit(limit)\n        \n        return query.all()\n    \n    def get_active(self) -> List[{{ component_name|title }}]:\n        \"\"\"\n        Get all active {{ component_name|lower }}s\n        \n        Returns:\n            List of active {{ component_name|title }} instances\n        \"\"\"\n        return self.session.query(self.model).filter(self.model.is_active == True).all()\n    \n    def search(self, search_term: str, limit: Optional[int] = None) -> List[{{ component_name|title }}]:\n        \"\"\"\n        Search {{ component_name|lower }}s by name or description\n        \n        Args:\n            search_term: Term to search for\n            limit: Maximum number of results\n            \n        Returns:\n            List of matching {{ component_name|title }} instances\n        \"\"\"\n        query = self.session.query(self.model).filter(\n            or_(\n                self.model.name.ilike(f'%{search_term}%'),\n                self.model.description.ilike(f'%{search_term}%')\n            )\n        )\n        \n        if limit:\n            query = query.limit(limit)\n        \n        return query.all()\n    \n    def update(self, {{ component_name|lower }}_id: int, **kwargs) -> Optional[{{ component_name|title }}]:\n        \"\"\"\n        Update {{ component_name|lower }}\n        \n        Args:\n            {{ component_name|lower }}_id: {{ component_name|title }} ID\n            **kwargs: Fields to update\n            \n        Returns:\n            Updated {{ component_name|title }} instance or None\n        \"\"\"\n        {{ component_name|lower }} = self.get_by_id({{ component_name|lower }}_id)\n        if {{ component_name|lower }}:\n            {{ component_name|lower }}.update_with_validation(self.session, **kwargs)\n        return {{ component_name|lower }}\n    \n    def delete(self, {{ component_name|lower }}_id: int) -> bool:\n        \"\"\"\n        Delete {{ component_name|lower }}\n        \n        Args:\n            {{ component_name|lower }}_id: {{ component_name|title }} ID\n            \n        Returns:\n            True if deleted, False if not found\n        \"\"\"\n        {{ component_name|lower }} = self.get_by_id({{ component_name|lower }}_id)\n        if {{ component_name|lower }}:\n            {{ component_name|lower }}.delete(self.session)\n            return True\n        return False\n    \n    def soft_delete(self, {{ component_name|lower }}_id: int) -> bool:\n        \"\"\"\n        Soft delete {{ component_name|lower }} (deactivate)\n        \n        Args:\n            {{ component_name|lower }}_id: {{ component_name|title }} ID\n            \n        Returns:\n            True if deactivated, False if not found\n        \"\"\"\n        {{ component_name|lower }} = self.get_by_id({{ component_name|lower }}_id)\n        if {{ component_name|lower }}:\n            {{ component_name|lower }}.deactivate(self.session)\n            return True\n        return False\n    \n    def restore(self, {{ component_name|lower }}_id: int) -> bool:\n        \"\"\"\n        Restore {{ component_name|lower }} (activate)\n        \n        Args:\n            {{ component_name|lower }}_id: {{ component_name|title }} ID\n            \n        Returns:\n            True if activated, False if not found\n        \"\"\"\n        {{ component_name|lower }} = self.get_by_id({{ component_name|lower }}_id)\n        if {{ component_name|lower }}:\n            {{ component_name|lower }}.activate(self.session)\n            return True\n        return False\n    \n    def count(self, active_only: bool = False) -> int:\n        \"\"\"\n        Count {{ component_name|lower }}s\n        \n        Args:\n            active_only: Count only active {{ component_name|lower }}s\n            \n        Returns:\n            Number of {{ component_name|lower }}s\n        \"\"\"\n        query = self.session.query(self.model)\n        \n        if active_only:\n            query = query.filter(self.model.is_active == True)\n        \n        return query.count()\n    \n    def get_paginated(self, page: int = 1, per_page: int = 20, \n                     filters: Optional[Dict[str, Any]] = None,\n                     sort_by: str = 'id', sort_order: str = 'asc') -> Dict[str, Any]:\n        \"\"\"\n        Get paginated {{ component_name|lower }}s\n        \n        Args:\n            page: Page number (1-based)\n            per_page: Items per page\n            filters: Dictionary of filters to apply\n            sort_by: Field to sort by\n            sort_order: 'asc' or 'desc'\n            \n        Returns:\n            Dictionary with pagination info and data\n        \"\"\"\n        query = self.session.query(self.model)\n        \n        # Apply filters\n        if filters:\n            for field, value in filters.items():\n                if hasattr(self.model, field):\n                    if isinstance(value, str):\n                        query = query.filter(getattr(self.model, field).ilike(f'%{value}%'))\n                    else:\n                        query = query.filter(getattr(self.model, field) == value)\n        \n        # Apply sorting\n        if hasattr(self.model, sort_by):\n            if sort_order.lower() == 'desc':\n                query = query.order_by(desc(getattr(self.model, sort_by)))\n            else:\n                query = query.order_by(asc(getattr(self.model, sort_by)))\n        \n        # Get total count before pagination\n        total = query.count()\n        \n        # Apply pagination\n        offset = (page - 1) * per_page\n        items = query.offset(offset).limit(per_page).all()\n        \n        # Calculate pagination info\n        total_pages = (total + per_page - 1) // per_page\n        has_prev = page > 1\n        has_next = page < total_pages\n        \n        return {\n            'items': items,\n            'total': total,\n            'page': page,\n            'per_page': per_page,\n            'total_pages': total_pages,\n            'has_prev': has_prev,\n            'has_next': has_next,\n            'prev_page': page - 1 if has_prev else None,\n            'next_page': page + 1 if has_next else None\n        }\n    \n    def bulk_create(self, {{ component_name|lower }}s_data: List[Dict[str, Any]]) -> List[{{ component_name|title }}]:\n        \"\"\"\n        Create multiple {{ component_name|lower }}s at once\n        \n        Args:\n            {{ component_name|lower }}s_data: List of dictionaries with {{ component_name|lower }} data\n            \n        Returns:\n            List of created {{ component_name|title }} instances\n        \"\"\"\n        created_{{ component_name|lower }}s = []\n        \n        for data in {{ component_name|lower }}s_data:\n            {{ component_name|lower }} = self.model(**data)\n            self.session.add({{ component_name|lower }})\n            created_{{ component_name|lower }}s.append({{ component_name|lower }})\n        \n        self.session.commit()\n        \n        # Refresh all instances\n        for {{ component_name|lower }} in created_{{ component_name|lower }}s:\n            self.session.refresh({{ component_name|lower }})\n        \n        return created_{{ component_name|lower }}s\n    \n    def bulk_update(self, updates: List[Dict[str, Any]]) -> int:\n        \"\"\"\n        Update multiple {{ component_name|lower }}s at once\n        \n        Args:\n            updates: List of dictionaries with 'id' and update data\n            \n        Returns:\n            Number of updated {{ component_name|lower }}s\n        \"\"\"\n        updated_count = 0\n        \n        for update_data in updates:\n            {{ component_name|lower }}_id = update_data.pop('id')\n            {{ component_name|lower }} = self.get_by_id({{ component_name|lower }}_id)\n            \n            if {{ component_name|lower }}:\n                {{ component_name|lower }}.update_from_dict(update_data)\n                updated_count += 1\n        \n        self.session.commit()\n        return updated_count\n    \n    def exists(self, **kwargs) -> bool:\n        \"\"\"\n        Check if {{ component_name|lower }} exists with given criteria\n        \n        Args:\n            **kwargs: Search criteria\n            \n        Returns:\n            True if exists, False otherwise\n        \"\"\"\n        query = self.session.query(self.model)\n        \n        for field, value in kwargs.items():\n            if hasattr(self.model, field):\n                query = query.filter(getattr(self.model, field) == value)\n        \n        return query.first() is not None",
        "config/database.py": "#!/usr/bin/env python3\n\"\"\"\nDatabase configuration for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\"\"\"\n\nimport os\nfrom typing import Optional\nfrom dotenv import load_dotenv\n\n# Load environment variables\nload_dotenv()\n\nclass DatabaseConfig:\n    \"\"\"Database configuration management\"\"\"\n    \n    def __init__(self):\n        \"\"\"Initialize database configuration\"\"\"\n        self.database_type = os.getenv('DATABASE_TYPE', 'sqlite')\n        self.database_host = os.getenv('DATABASE_HOST', 'localhost')\n        self.database_port = os.getenv('DATABASE_PORT', self._get_default_port())\n        self.database_name = os.getenv('DATABASE_NAME', '{{ project_name }}_db')\n        self.database_user = os.getenv('DATABASE_USER', 'user')\n        self.database_password = os.getenv('DATABASE_PASSWORD', 'password')\n        \n        # SQLAlchemy specific settings\n        self.echo_sql = os.getenv('DATABASE_ECHO', 'False').lower() == 'true'\n        self.development_mode = os.getenv('ENVIRONMENT', 'development') == 'development'\n        \n        # Connection settings\n        self.pool_size = int(os.getenv('DATABASE_POOL_SIZE', '5'))\n        self.max_overflow = int(os.getenv('DATABASE_MAX_OVERFLOW', '10'))\n        self.pool_timeout = int(os.getenv('DATABASE_POOL_TIMEOUT', '30'))\n        \n    def _get_default_port(self) -> str:\n        \"\"\"Get default port based on database type\"\"\"\n        ports = {\n            'postgresql': '5432',\n            'mysql': '3306',\n            'sqlite': '',\n            'oracle': '1521',\n            'mssql': '1433'\n        }\n        return ports.get(self.database_type, '5432')\n    \n    def get_database_url(self) -> str:\n        \"\"\"\n        Generate database URL based on configuration\n        \n        Returns:\n            Complete database URL for SQLAlchemy\n        \"\"\"\n        if self.database_type == 'sqlite':\n            # SQLite database file path\n            db_path = os.getenv('DATABASE_PATH', 'data/{{ project_name }}.db')\n            return f\"sqlite:///{db_path}\"\n        \n        elif self.database_type == 'postgresql':\n            return (\n                f\"postgresql://{self.database_user}:{self.database_password}\"\n                f\"@{self.database_host}:{self.database_port}/{self.database_name}\"\n            )\n        \n        elif self.database_type == 'mysql':\n            return (\n                f\"mysql+pymysql://{self.database_user}:{self.database_password}\"\n                f\"@{self.database_host}:{self.database_port}/{self.database_name}\"\n            )\n        \n        elif self.database_type == 'oracle':\n            return (\n                f\"oracle+cx_oracle://{self.database_user}:{self.database_password}\"\n                f\"@{self.database_host}:{self.database_port}/{self.database_name}\"\n            )\n        \n        elif self.database_type == 'mssql':\n            return (\n                f\"mssql+pyodbc://{self.database_user}:{self.database_password}\"\n                f\"@{self.database_host}:{self.database_port}/{self.database_name}\"\n                f\"?driver=ODBC+Driver+17+for+SQL+Server\"\n            )\n        \n        else:\n            raise ValueError(f\"Unsupported database type: {self.database_type}\")\n    \n    def get_async_database_url(self) -> str:\n        \"\"\"\n        Generate async database URL for async operations\n        \n        Returns:\n            Async database URL for SQLAlchemy\n        \"\"\"\n        if self.database_type == 'postgresql':\n            return (\n                f\"postgresql+asyncpg://{self.database_user}:{self.database_password}\"\n                f\"@{self.database_host}:{self.database_port}/{self.database_name}\"\n            )\n        \n        elif self.database_type == 'mysql':\n            return (\n                f\"mysql+aiomysql://{self.database_user}:{self.database_password}\"\n                f\"@{self.database_host}:{self.database_port}/{self.database_name}\"\n            )\n        \n        elif self.database_type == 'sqlite':\n            db_path = os.getenv('DATABASE_PATH', 'data/{{ project_name }}.db')\n            return f\"sqlite+aiosqlite:///{db_path}\"\n        \n        else:\n            raise ValueError(f\"Async not supported for database type: {self.database_type}\")\n    \n    def get_alembic_config(self) -> dict:\n        \"\"\"Get configuration for Alembic migrations\"\"\"\n        return {\n            'sqlalchemy.url': self.get_database_url(),\n            'script_location': 'src/migrations',\n            'file_template': '%%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d_%%(rev)s_%%(slug)s',\n            'timezone': 'UTC',\n        }\n    \n    def validate_config(self) -> bool:\n        \"\"\"Validate database configuration\"\"\"\n        if not self.database_type:\n            raise ValueError(\"DATABASE_TYPE must be specified\")\n        \n        if self.database_type != 'sqlite':\n            if not self.database_host:\n                raise ValueError(\"DATABASE_HOST must be specified for non-SQLite databases\")\n            \n            if not self.database_name:\n                raise ValueError(\"DATABASE_NAME must be specified\")\n            \n            if not self.database_user:\n                raise ValueError(\"DATABASE_USER must be specified\")\n            \n            if not self.database_password:\n                raise ValueError(\"DATABASE_PASSWORD must be specified\")\n        \n        return True\n    \n    def __repr__(self):\n        \"\"\"String representation of configuration\"\"\"\n        return f\"DatabaseConfig(type={self.database_type}, host={self.database_host})\"",
        "src/database/base.py": "#!/usr/bin/env python3\n\"\"\"\nBase model and database setup for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\"\"\"\n\nfrom sqlalchemy import Column, Integer, DateTime, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.sql import func\nfrom datetime import datetime\nfrom typing import Dict, Any\n\n# Create base class for all models\nBase = declarative_base()\n\nclass BaseModel(Base):\n    \"\"\"\n    Base model class with common fields and methods\n    \n    All models should inherit from this class to get:\n    - id field (primary key)\n    - created_at timestamp\n    - updated_at timestamp\n    - Common utility methods\n    \"\"\"\n    \n    __abstract__ = True\n    \n    # Common fields\n    id = Column(Integer, primary_key=True, index=True)\n    created_at = Column(DateTime(timezone=True), server_default=func.now(), nullable=False)\n    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now(), nullable=False)\n    \n    def to_dict(self, exclude_fields: list = None) -> Dict[str, Any]:\n        \"\"\"\n        Convert model instance to dictionary\n        \n        Args:\n            exclude_fields: List of field names to exclude\n            \n        Returns:\n            Dictionary representation of the model\n        \"\"\"\n        exclude_fields = exclude_fields or []\n        \n        result = {}\n        for column in self.__table__.columns:\n            if column.name not in exclude_fields:\n                value = getattr(self, column.name)\n                \n                # Handle datetime serialization\n                if isinstance(value, datetime):\n                    result[column.name] = value.isoformat()\n                else:\n                    result[column.name] = value\n        \n        return result\n    \n    def update_from_dict(self, data: Dict[str, Any], exclude_fields: list = None):\n        \"\"\"\n        Update model instance from dictionary\n        \n        Args:\n            data: Dictionary with field values\n            exclude_fields: List of field names to exclude from update\n        \"\"\"\n        exclude_fields = exclude_fields or ['id', 'created_at']\n        \n        for key, value in data.items():\n            if key not in exclude_fields and hasattr(self, key):\n                setattr(self, key, value)\n    \n    def __repr__(self):\n        \"\"\"String representation of the model\"\"\"\n        return f\"<{self.__class__.__name__}(id={self.id})>\"\n    \n    def save(self, session):\n        \"\"\"Save model instance to database\"\"\"\n        session.add(self)\n        session.commit()\n        session.refresh(self)\n        return self\n    \n    def delete(self, session):\n        \"\"\"Delete model instance from database\"\"\"\n        session.delete(self)\n        session.commit()\n    \n    @classmethod\n    def get_by_id(cls, session, model_id: int):\n        \"\"\"Get model instance by ID\"\"\"\n        return session.query(cls).filter(cls.id == model_id).first()\n    \n    @classmethod\n    def get_all(cls, session, limit: int = None, offset: int = None):\n        \"\"\"Get all model instances\"\"\"\n        query = session.query(cls)\n        \n        if offset:\n            query = query.offset(offset)\n        \n        if limit:\n            query = query.limit(limit)\n        \n        return query.all()\n    \n    @classmethod\n    def count(cls, session) -> int:\n        \"\"\"Count total number of instances\"\"\"\n        return session.query(cls).count()\n    \n    @classmethod\n    def create(cls, session, **kwargs):\n        \"\"\"Create new model instance\"\"\"\n        instance = cls(**kwargs)\n        return instance.save(session)\n\nclass TimestampMixin:\n    \"\"\"Mixin for models that need timestamp fields\"\"\"\n    \n    created_at = Column(DateTime(timezone=True), server_default=func.now(), nullable=False)\n    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now(), nullable=False)\n\nclass SoftDeleteMixin:\n    \"\"\"Mixin for models that need soft delete functionality\"\"\"\n    \n    deleted_at = Column(DateTime(timezone=True), nullable=True)\n    is_deleted = Column(String(1), default='N', nullable=False)\n    \n    def soft_delete(self, session):\n        \"\"\"Soft delete the model instance\"\"\"\n        self.deleted_at = func.now()\n        self.is_deleted = 'Y'\n        session.commit()\n    \n    def restore(self, session):\n        \"\"\"Restore soft deleted model instance\"\"\"\n        self.deleted_at = None\n        self.is_deleted = 'N'\n        session.commit()\n    \n    @classmethod\n    def get_active(cls, session):\n        \"\"\"Get all active (non-deleted) instances\"\"\"\n        return session.query(cls).filter(cls.is_deleted == 'N').all()\n    \n    @classmethod\n    def get_deleted(cls, session):\n        \"\"\"Get all soft deleted instances\"\"\"\n        return session.query(cls).filter(cls.is_deleted == 'Y').all()",
        "src/database/connection.py": "#!/usr/bin/env python3\n\"\"\"\nDatabase connection management for {{ project_name }}\nCreated by {{ generator }} at {{ timestamp }}\n\"\"\"\n\nimport logging\nfrom contextlib import contextmanager\nfrom typing import Optional, Generator\nfrom sqlalchemy import create_engine, MetaData, text\nfrom sqlalchemy.orm import sessionmaker, Session\nfrom sqlalchemy.pool import QueuePool\nfrom sqlalchemy.exc import SQLAlchemyError\n\nfrom .base import Base\n\nlogger = logging.getLogger(__name__)\n\nclass DatabaseManager:\n    \"\"\"\n    Database connection and session management\n    \n    Handles database connections, session management, and basic operations.\n    \"\"\"\n    \n    def __init__(self, config):\n        \"\"\"Initialize database manager with configuration\"\"\"\n        self.config = config\n        self.engine = None\n        self.SessionLocal = None\n        self._setup_engine()\n        self._setup_session_factory()\n    \n    def _setup_engine(self):\n        \"\"\"Setup SQLAlchemy engine with configuration\"\"\"\n        database_url = self.config.get_database_url()\n        \n        # Engine configuration\n        engine_kwargs = {\n            'echo': self.config.echo_sql,\n            'pool_pre_ping': True,\n            'pool_recycle': 3600,\n        }\n        \n        # Add connection pooling for production\n        if not self.config.development_mode:\n            engine_kwargs.update({\n                'poolclass': QueuePool,\n                'pool_size': 10,\n                'max_overflow': 20,\n                'pool_timeout': 30,\n            })\n        \n        self.engine = create_engine(database_url, **engine_kwargs)\n        logger.info(f\"Database engine created: {self.config.database_type}\")\n    \n    def _setup_session_factory(self):\n        \"\"\"Setup session factory\"\"\"\n        self.SessionLocal = sessionmaker(\n            bind=self.engine,\n            autocommit=False,\n            autoflush=False,\n            expire_on_commit=False\n        )\n        logger.info(\"Session factory configured\")\n    \n    @contextmanager\n    def get_session(self) -> Generator[Session, None, None]:\n        \"\"\"\n        Get database session with context manager\n        \n        Usage:\n            with db_manager.get_session() as session:\n                # Your database operations\n                pass\n        \"\"\"\n        session = self.SessionLocal()\n        try:\n            yield session\n            session.commit()\n        except Exception as e:\n            session.rollback()\n            logger.error(f\"Database session error: {str(e)}\")\n            raise\n        finally:\n            session.close()\n    \n    def create_all_tables(self):\n        \"\"\"Create all database tables\"\"\"\n        try:\n            Base.metadata.create_all(bind=self.engine)\n            logger.info(\"All database tables created successfully\")\n        except SQLAlchemyError as e:\n            logger.error(f\"Error creating tables: {str(e)}\")\n            raise\n    \n    def drop_all_tables(self):\n        \"\"\"Drop all database tables\"\"\"\n        try:\n            Base.metadata.drop_all(bind=self.engine)\n            logger.info(\"All database tables dropped successfully\")\n        except SQLAlchemyError as e:\n            logger.error(f\"Error dropping tables: {str(e)}\")\n            raise\n    \n    def reset_database(self):\n        \"\"\"Reset database by dropping and recreating all tables\"\"\"\n        logger.info(\"Resetting database...\")\n        self.drop_all_tables()\n        self.create_all_tables()\n        logger.info(\"Database reset completed\")\n    \n    def test_connection(self) -> bool:\n        \"\"\"Test database connection\"\"\"\n        try:\n            with self.engine.connect() as connection:\n                result = connection.execute(text(\"SELECT 1\"))\n                result.fetchone()\n            logger.info(\"Database connection test successful\")\n            return True\n        except Exception as e:\n            logger.error(f\"Database connection test failed: {str(e)}\")\n            return False\n    \n    def get_table_info(self) -> dict:\n        \"\"\"Get information about database tables\"\"\"\n        try:\n            metadata = MetaData()\n            metadata.reflect(bind=self.engine)\n            \n            table_info = {}\n            for table_name, table in metadata.tables.items():\n                table_info[table_name] = {\n                    'columns': [col.name for col in table.columns],\n                    'primary_keys': [col.name for col in table.primary_key],\n                    'foreign_keys': [\n                        {\n                            'column': fk.parent.name,\n                            'references': f\"{fk.column.table.name}.{fk.column.name}\"\n                        }\n                        for fk in table.foreign_keys\n                    ]\n                }\n            \n            return table_info\n        except Exception as e:\n            logger.error(f\"Error getting table info: {str(e)}\")\n            return {}\n    \n    def execute_raw_sql(self, sql: str, params: dict = None) -> list:\n        \"\"\"\n        Execute raw SQL query\n        \n        Args:\n            sql: SQL query string\n            params: Query parameters\n            \n        Returns:\n            List of result rows\n        \"\"\"\n        try:\n            with self.engine.connect() as connection:\n                result = connection.execute(text(sql), params or {})\n                return result.fetchall()\n        except Exception as e:\n            logger.error(f\"Error executing SQL: {str(e)}\")\n            raise\n    \n    def seed_database(self):\n        \"\"\"Seed database with sample data\"\"\"\n        logger.info(\"Seeding database with sample data...\")\n        \n        # Add your seeding logic here\n        # Example:\n        # with self.get_session() as session:\n        #     from src.models.user import User\n        #     sample_user = User(name=\"John Doe\", email=\"john@example.com\")\n        #     session.add(sample_user)\n        #     session.commit()\n        \n        logger.info(\"Database seeding completed\")\n    \n    def backup_database(self, backup_path: str):\n        \"\"\"Create database backup\"\"\"\n        # Implementation depends on database type\n        logger.warning(\"Database backup not implemented yet\")\n        pass\n    \n    def restore_database(self, backup_path: str):\n        \"\"\"Restore database from backup\"\"\"\n        # Implementation depends on database type\n        logger.warning(\"Database restore not implemented yet\")\n        pass\n    \n    def get_engine(self):\n        \"\"\"Get SQLAlchemy engine\"\"\"\n        return self.engine\n    \n    def get_session_factory(self):\n        \"\"\"Get session factory\"\"\"\n        return self.SessionLocal\n    \n    def close(self):\n        \"\"\"Close database connections\"\"\"\n        if self.engine:\n            self.engine.dispose()\n            logger.info(\"Database connections closed\")"
      }
    }
  }
}